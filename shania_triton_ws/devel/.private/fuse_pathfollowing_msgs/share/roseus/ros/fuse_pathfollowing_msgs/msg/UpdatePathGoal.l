;; Auto-generated. Do not edit!


(when (boundp 'fuse_pathfollowing_msgs::UpdatePathGoal)
  (if (not (find-package "FUSE_PATHFOLLOWING_MSGS"))
    (make-package "FUSE_PATHFOLLOWING_MSGS"))
  (shadow 'UpdatePathGoal (find-package "FUSE_PATHFOLLOWING_MSGS")))
(unless (find-package "FUSE_PATHFOLLOWING_MSGS::UPDATEPATHGOAL")
  (make-package "FUSE_PATHFOLLOWING_MSGS::UPDATEPATHGOAL"))

(in-package "ROS")
;;//! \htmlinclude UpdatePathGoal.msg.html


(defclass fuse_pathfollowing_msgs::UpdatePathGoal
  :super ros::object
  :slots (_append _path ))

(defmethod fuse_pathfollowing_msgs::UpdatePathGoal
  (:init
   (&key
    ((:append __append) nil)
    ((:path __path) (instance fuse_pathfollowing_msgs::Path :init))
    )
   (send-super :init)
   (setq _append __append)
   (setq _path __path)
   self)
  (:append
   (&optional __append)
   (if __append (setq _append __append)) _append)
  (:path
   (&rest __path)
   (if (keywordp (car __path))
       (send* _path __path)
     (progn
       (if __path (setq _path (car __path)))
       _path)))
  (:serialization-length
   ()
   (+
    ;; bool _append
    1
    ;; fuse_pathfollowing_msgs/Path _path
    (send _path :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _append
       (if _append (write-byte -1 s) (write-byte 0 s))
     ;; fuse_pathfollowing_msgs/Path _path
       (send _path :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _append
     (setq _append (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; fuse_pathfollowing_msgs/Path _path
     (send _path :deserialize buf ptr-) (incf ptr- (send _path :serialization-length))
   ;;
   self)
  )

(setf (get fuse_pathfollowing_msgs::UpdatePathGoal :md5sum-) "eff9309fa89cab8a5db9aa4ccabe061e")
(setf (get fuse_pathfollowing_msgs::UpdatePathGoal :datatype-) "fuse_pathfollowing_msgs/UpdatePathGoal")
(setf (get fuse_pathfollowing_msgs::UpdatePathGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## Action used to command the vehicle to update the path

# Goal
bool append # If true, append this path to the current one; if false, replace current path with this one
Path path 

================================================================================
MSG: fuse_pathfollowing_msgs/Path

Header header
Segment[] segments
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: fuse_pathfollowing_msgs/Segment
## Array of segments that compose a path

# Defines the type of segment (see possible types below)
uint8 type_enum
# Possible types
uint8 TYPE_UNKNOWN = 0
uint8 TYPE_LINE = 1
uint8 TYPE_ARC = 2

# The ID of the node that has been reached when this segment is complete.
#   If this ID is blank, then this segment is intermediary, and no node is reached on completion
string completion_node_id

# 3D location (in meters) of the start of the segment
geometry_msgs/Vector3 start
# 3D location (in meters) of the end of the segment
geometry_msgs/Vector3 end

## Arc-specific parameters
# Radius (in meters) of the arc
float32 radius
# True if arc is > 180 degrees, False if not
bool is_large_arc
# True if arc moves in clockwise direction, False if counter-clockwise
bool is_clockwise


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :fuse_pathfollowing_msgs/UpdatePathGoal "eff9309fa89cab8a5db9aa4ccabe061e")


