// Generated by gencpp from file fuse_pathfollowing_msgs/UpdatePathGoal.msg
// DO NOT EDIT!


#ifndef FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHGOAL_H
#define FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fuse_pathfollowing_msgs/Path.h>

namespace fuse_pathfollowing_msgs
{
template <class ContainerAllocator>
struct UpdatePathGoal_
{
  typedef UpdatePathGoal_<ContainerAllocator> Type;

  UpdatePathGoal_()
    : append(false)
    , path()  {
    }
  UpdatePathGoal_(const ContainerAllocator& _alloc)
    : append(false)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _append_type;
  _append_type append;

   typedef  ::fuse_pathfollowing_msgs::Path_<ContainerAllocator>  _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> const> ConstPtr;

}; // struct UpdatePathGoal_

typedef ::fuse_pathfollowing_msgs::UpdatePathGoal_<std::allocator<void> > UpdatePathGoal;

typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathGoal > UpdatePathGoalPtr;
typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathGoal const> UpdatePathGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator2> & rhs)
{
  return lhs.append == rhs.append &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_pathfollowing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eff9309fa89cab8a5db9aa4ccabe061e";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeff9309fa89cab8aULL;
  static const uint64_t static_value2 = 0x5db9aa4ccabe061eULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_pathfollowing_msgs/UpdatePathGoal";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"## Action used to command the vehicle to update the path\n"
"\n"
"# Goal\n"
"bool append # If true, append this path to the current one; if false, replace current path with this one\n"
"Path path \n"
"\n"
"================================================================================\n"
"MSG: fuse_pathfollowing_msgs/Path\n"
"\n"
"Header header\n"
"Segment[] segments\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fuse_pathfollowing_msgs/Segment\n"
"## Array of segments that compose a path\n"
"\n"
"# Defines the type of segment (see possible types below)\n"
"uint8 type_enum\n"
"# Possible types\n"
"uint8 TYPE_UNKNOWN = 0\n"
"uint8 TYPE_LINE = 1\n"
"uint8 TYPE_ARC = 2\n"
"\n"
"# The ID of the node that has been reached when this segment is complete.\n"
"#   If this ID is blank, then this segment is intermediary, and no node is reached on completion\n"
"string completion_node_id\n"
"\n"
"# 3D location (in meters) of the start of the segment\n"
"geometry_msgs/Vector3 start\n"
"# 3D location (in meters) of the end of the segment\n"
"geometry_msgs/Vector3 end\n"
"\n"
"## Arc-specific parameters\n"
"# Radius (in meters) of the arc\n"
"float32 radius\n"
"# True if arc is > 180 degrees, False if not\n"
"bool is_large_arc\n"
"# True if arc moves in clockwise direction, False if counter-clockwise\n"
"bool is_clockwise\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.append);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdatePathGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_pathfollowing_msgs::UpdatePathGoal_<ContainerAllocator>& v)
  {
    s << indent << "append: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.append);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::fuse_pathfollowing_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHGOAL_H
