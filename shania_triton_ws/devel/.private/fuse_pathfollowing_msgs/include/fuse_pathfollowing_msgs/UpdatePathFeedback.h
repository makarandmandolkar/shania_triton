// Generated by gencpp from file fuse_pathfollowing_msgs/UpdatePathFeedback.msg
// DO NOT EDIT!


#ifndef FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHFEEDBACK_H
#define FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fuse_pathfollowing_msgs
{
template <class ContainerAllocator>
struct UpdatePathFeedback_
{
  typedef UpdatePathFeedback_<ContainerAllocator> Type;

  UpdatePathFeedback_()
    : status()
    , completed_nodes()
    , percent_complete(0.0)
    , distance_to_end(0.0)
    , distance_to_next_node(0.0)  {
    }
  UpdatePathFeedback_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , completed_nodes(_alloc)
    , percent_complete(0.0)
    , distance_to_end(0.0)
    , distance_to_next_node(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _completed_nodes_type;
  _completed_nodes_type completed_nodes;

   typedef double _percent_complete_type;
  _percent_complete_type percent_complete;

   typedef double _distance_to_end_type;
  _distance_to_end_type distance_to_end;

   typedef double _distance_to_next_node_type;
  _distance_to_next_node_type distance_to_next_node;





  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct UpdatePathFeedback_

typedef ::fuse_pathfollowing_msgs::UpdatePathFeedback_<std::allocator<void> > UpdatePathFeedback;

typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathFeedback > UpdatePathFeedbackPtr;
typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathFeedback const> UpdatePathFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.completed_nodes == rhs.completed_nodes &&
    lhs.percent_complete == rhs.percent_complete &&
    lhs.distance_to_end == rhs.distance_to_end &&
    lhs.distance_to_next_node == rhs.distance_to_next_node;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_pathfollowing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44f1771366ed4f018f0b801737cd8b2e";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44f1771366ed4f01ULL;
  static const uint64_t static_value2 = 0x8f0b801737cd8b2eULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_pathfollowing_msgs/UpdatePathFeedback";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"string status\n"
"string[] completed_nodes # List of the completed node ids - excludes first node since it is never \"reached\" by the path follower\n"
"float64 percent_complete # Percent of the full path distance that has been traversed (0-100)\n"
"float64 distance_to_end  # Distance in meters (along path) to the end of the path\n"
"float64 distance_to_next_node # Distance in meters (along path) to the next node\n"
;
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.completed_nodes);
      stream.next(m.percent_complete);
      stream.next(m.distance_to_end);
      stream.next(m.distance_to_next_node);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdatePathFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_pathfollowing_msgs::UpdatePathFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "completed_nodes[]" << std::endl;
    for (size_t i = 0; i < v.completed_nodes.size(); ++i)
    {
      s << indent << "  completed_nodes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.completed_nodes[i]);
    }
    s << indent << "percent_complete: ";
    Printer<double>::stream(s, indent + "  ", v.percent_complete);
    s << indent << "distance_to_end: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_end);
    s << indent << "distance_to_next_node: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_next_node);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHFEEDBACK_H
