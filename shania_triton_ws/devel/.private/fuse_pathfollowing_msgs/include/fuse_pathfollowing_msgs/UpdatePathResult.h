// Generated by gencpp from file fuse_pathfollowing_msgs/UpdatePathResult.msg
// DO NOT EDIT!


#ifndef FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHRESULT_H
#define FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fuse_pathfollowing_msgs
{
template <class ContainerAllocator>
struct UpdatePathResult_
{
  typedef UpdatePathResult_<ContainerAllocator> Type;

  UpdatePathResult_()
    : finished_path(false)  {
    }
  UpdatePathResult_(const ContainerAllocator& _alloc)
    : finished_path(false)  {
  (void)_alloc;
    }



   typedef uint8_t _finished_path_type;
  _finished_path_type finished_path;





  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> const> ConstPtr;

}; // struct UpdatePathResult_

typedef ::fuse_pathfollowing_msgs::UpdatePathResult_<std::allocator<void> > UpdatePathResult;

typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathResult > UpdatePathResultPtr;
typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::UpdatePathResult const> UpdatePathResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator2> & rhs)
{
  return lhs.finished_path == rhs.finished_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_pathfollowing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ab398067b95b71c7db0b4f86b08b7bf";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ab398067b95b71cULL;
  static const uint64_t static_value2 = 0x7db0b4f86b08b7bfULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_pathfollowing_msgs/UpdatePathResult";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"bool finished_path\n"
;
  }

  static const char* value(const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finished_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdatePathResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_pathfollowing_msgs::UpdatePathResult_<ContainerAllocator>& v)
  {
    s << indent << "finished_path: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finished_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_PATHFOLLOWING_MSGS_MESSAGE_UPDATEPATHRESULT_H
