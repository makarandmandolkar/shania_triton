// Generated by gencpp from file fuse_pathfollowing_msgs/DebugMetrics.msg
// DO NOT EDIT!


#ifndef FUSE_PATHFOLLOWING_MSGS_MESSAGE_DEBUGMETRICS_H
#define FUSE_PATHFOLLOWING_MSGS_MESSAGE_DEBUGMETRICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>
#include <fuse_pathfollowing_msgs/PIDMetrics.h>
#include <fuse_pathfollowing_msgs/PIDMetrics.h>
#include <fuse_pathfollowing_msgs/PIDMetrics.h>

namespace fuse_pathfollowing_msgs
{
template <class ContainerAllocator>
struct DebugMetrics_
{
  typedef DebugMetrics_<ContainerAllocator> Type;

  DebugMetrics_()
    : header()
    , vehicle_navodom()
    , vehicle_heading(0.0)
    , vehicle_linear_speed(0.0)
    , vehicle_body_vel()
    , path_position()
    , distance_along_path(0.0)
    , desired_speed(0.0)
    , safe_speed(0.0)
    , current_speed(0.0)
    , terminal_speed(0.0)
    , path_heading(0.0)
    , desired_heading(0.0)
    , feed_forward_yawrate(0.0)
    , alpha_nominal_heading(0.0)
    , alpha_path_error(0.0)
    , path_velocity(0.0)
    , correction_velocity(0.0)
    , nominal_speed(0.0)
    , path_error(0.0)
    , path_heading_error(0.0)
    , desired_heading_error(0.0)
    , dt(0.0)
    , cmd_vel()
    , yaw_pid()
    , terminal_vel_pid()
    , correction_vel_pid()  {
    }
  DebugMetrics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_navodom(_alloc)
    , vehicle_heading(0.0)
    , vehicle_linear_speed(0.0)
    , vehicle_body_vel(_alloc)
    , path_position(_alloc)
    , distance_along_path(0.0)
    , desired_speed(0.0)
    , safe_speed(0.0)
    , current_speed(0.0)
    , terminal_speed(0.0)
    , path_heading(0.0)
    , desired_heading(0.0)
    , feed_forward_yawrate(0.0)
    , alpha_nominal_heading(0.0)
    , alpha_path_error(0.0)
    , path_velocity(0.0)
    , correction_velocity(0.0)
    , nominal_speed(0.0)
    , path_error(0.0)
    , path_heading_error(0.0)
    , desired_heading_error(0.0)
    , dt(0.0)
    , cmd_vel(_alloc)
    , yaw_pid(_alloc)
    , terminal_vel_pid(_alloc)
    , correction_vel_pid(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _vehicle_navodom_type;
  _vehicle_navodom_type vehicle_navodom;

   typedef double _vehicle_heading_type;
  _vehicle_heading_type vehicle_heading;

   typedef double _vehicle_linear_speed_type;
  _vehicle_linear_speed_type vehicle_linear_speed;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vehicle_body_vel_type;
  _vehicle_body_vel_type vehicle_body_vel;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _path_position_type;
  _path_position_type path_position;

   typedef double _distance_along_path_type;
  _distance_along_path_type distance_along_path;

   typedef double _desired_speed_type;
  _desired_speed_type desired_speed;

   typedef double _safe_speed_type;
  _safe_speed_type safe_speed;

   typedef double _current_speed_type;
  _current_speed_type current_speed;

   typedef double _terminal_speed_type;
  _terminal_speed_type terminal_speed;

   typedef double _path_heading_type;
  _path_heading_type path_heading;

   typedef double _desired_heading_type;
  _desired_heading_type desired_heading;

   typedef double _feed_forward_yawrate_type;
  _feed_forward_yawrate_type feed_forward_yawrate;

   typedef double _alpha_nominal_heading_type;
  _alpha_nominal_heading_type alpha_nominal_heading;

   typedef double _alpha_path_error_type;
  _alpha_path_error_type alpha_path_error;

   typedef double _path_velocity_type;
  _path_velocity_type path_velocity;

   typedef double _correction_velocity_type;
  _correction_velocity_type correction_velocity;

   typedef double _nominal_speed_type;
  _nominal_speed_type nominal_speed;

   typedef double _path_error_type;
  _path_error_type path_error;

   typedef double _path_heading_error_type;
  _path_heading_error_type path_heading_error;

   typedef double _desired_heading_error_type;
  _desired_heading_error_type desired_heading_error;

   typedef double _dt_type;
  _dt_type dt;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;

   typedef  ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>  _yaw_pid_type;
  _yaw_pid_type yaw_pid;

   typedef  ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>  _terminal_vel_pid_type;
  _terminal_vel_pid_type terminal_vel_pid;

   typedef  ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>  _correction_vel_pid_type;
  _correction_vel_pid_type correction_vel_pid;





  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> const> ConstPtr;

}; // struct DebugMetrics_

typedef ::fuse_pathfollowing_msgs::DebugMetrics_<std::allocator<void> > DebugMetrics;

typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::DebugMetrics > DebugMetricsPtr;
typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::DebugMetrics const> DebugMetricsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vehicle_navodom == rhs.vehicle_navodom &&
    lhs.vehicle_heading == rhs.vehicle_heading &&
    lhs.vehicle_linear_speed == rhs.vehicle_linear_speed &&
    lhs.vehicle_body_vel == rhs.vehicle_body_vel &&
    lhs.path_position == rhs.path_position &&
    lhs.distance_along_path == rhs.distance_along_path &&
    lhs.desired_speed == rhs.desired_speed &&
    lhs.safe_speed == rhs.safe_speed &&
    lhs.current_speed == rhs.current_speed &&
    lhs.terminal_speed == rhs.terminal_speed &&
    lhs.path_heading == rhs.path_heading &&
    lhs.desired_heading == rhs.desired_heading &&
    lhs.feed_forward_yawrate == rhs.feed_forward_yawrate &&
    lhs.alpha_nominal_heading == rhs.alpha_nominal_heading &&
    lhs.alpha_path_error == rhs.alpha_path_error &&
    lhs.path_velocity == rhs.path_velocity &&
    lhs.correction_velocity == rhs.correction_velocity &&
    lhs.nominal_speed == rhs.nominal_speed &&
    lhs.path_error == rhs.path_error &&
    lhs.path_heading_error == rhs.path_heading_error &&
    lhs.desired_heading_error == rhs.desired_heading_error &&
    lhs.dt == rhs.dt &&
    lhs.cmd_vel == rhs.cmd_vel &&
    lhs.yaw_pid == rhs.yaw_pid &&
    lhs.terminal_vel_pid == rhs.terminal_vel_pid &&
    lhs.correction_vel_pid == rhs.correction_vel_pid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_pathfollowing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7936a8e5a90f165bce29007c47f74eb";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7936a8e5a90f165ULL;
  static const uint64_t static_value2 = 0xbce29007c47f74ebULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_pathfollowing_msgs/DebugMetrics";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Robot state\n"
"nav_msgs/Odometry vehicle_navodom # Includes position, velocity, orientation, and angular velocity\n"
"float64 vehicle_heading # Heading in radians - Useful so we don't have to extract from quaternion\n"
"float64 vehicle_linear_speed # Linear speed in meters - Useful so we don't have to take the norm of the linear velocity vector\n"
"geometry_msgs/Vector3 vehicle_body_vel # Linear velocity in body frame - useful so we don't have to transform from a global frame\n"
"# Path info\n"
"geometry_msgs/Point path_position # XYZ position of the \n"
"float64 distance_along_path # Distance traveled along the path\n"
"float64 desired_speed \n"
"float64 safe_speed\n"
"float64 current_speed\n"
"float64 terminal_speed\n"
"float64 path_heading\n"
"float64 desired_heading\n"
"float64 feed_forward_yawrate\n"
"# Alpha velocity method\n"
"float64 alpha_nominal_heading\n"
"float64 alpha_path_error\n"
"float64 path_velocity\n"
"float64 correction_velocity\n"
"float64 nominal_speed\n"
"\n"
"# Path error\n"
"float64 path_error\n"
"float64 path_heading_error\n"
"float64 desired_heading_error\n"
"# Control info\n"
"float64 dt\n"
"geometry_msgs/Twist cmd_vel\n"
"PIDMetrics yaw_pid\n"
"PIDMetrics terminal_vel_pid\n"
"PIDMetrics correction_vel_pid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: fuse_pathfollowing_msgs/PIDMetrics\n"
"float64 p_effort\n"
"float64 i_effort\n"
"float64 d_effort\n"
"float64 total_effort\n"
;
  }

  static const char* value(const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_navodom);
      stream.next(m.vehicle_heading);
      stream.next(m.vehicle_linear_speed);
      stream.next(m.vehicle_body_vel);
      stream.next(m.path_position);
      stream.next(m.distance_along_path);
      stream.next(m.desired_speed);
      stream.next(m.safe_speed);
      stream.next(m.current_speed);
      stream.next(m.terminal_speed);
      stream.next(m.path_heading);
      stream.next(m.desired_heading);
      stream.next(m.feed_forward_yawrate);
      stream.next(m.alpha_nominal_heading);
      stream.next(m.alpha_path_error);
      stream.next(m.path_velocity);
      stream.next(m.correction_velocity);
      stream.next(m.nominal_speed);
      stream.next(m.path_error);
      stream.next(m.path_heading_error);
      stream.next(m.desired_heading_error);
      stream.next(m.dt);
      stream.next(m.cmd_vel);
      stream.next(m.yaw_pid);
      stream.next(m.terminal_vel_pid);
      stream.next(m.correction_vel_pid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DebugMetrics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_pathfollowing_msgs::DebugMetrics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_navodom: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_navodom);
    s << indent << "vehicle_heading: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_heading);
    s << indent << "vehicle_linear_speed: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_linear_speed);
    s << indent << "vehicle_body_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_body_vel);
    s << indent << "path_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.path_position);
    s << indent << "distance_along_path: ";
    Printer<double>::stream(s, indent + "  ", v.distance_along_path);
    s << indent << "desired_speed: ";
    Printer<double>::stream(s, indent + "  ", v.desired_speed);
    s << indent << "safe_speed: ";
    Printer<double>::stream(s, indent + "  ", v.safe_speed);
    s << indent << "current_speed: ";
    Printer<double>::stream(s, indent + "  ", v.current_speed);
    s << indent << "terminal_speed: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_speed);
    s << indent << "path_heading: ";
    Printer<double>::stream(s, indent + "  ", v.path_heading);
    s << indent << "desired_heading: ";
    Printer<double>::stream(s, indent + "  ", v.desired_heading);
    s << indent << "feed_forward_yawrate: ";
    Printer<double>::stream(s, indent + "  ", v.feed_forward_yawrate);
    s << indent << "alpha_nominal_heading: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_nominal_heading);
    s << indent << "alpha_path_error: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_path_error);
    s << indent << "path_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.path_velocity);
    s << indent << "correction_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.correction_velocity);
    s << indent << "nominal_speed: ";
    Printer<double>::stream(s, indent + "  ", v.nominal_speed);
    s << indent << "path_error: ";
    Printer<double>::stream(s, indent + "  ", v.path_error);
    s << indent << "path_heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.path_heading_error);
    s << indent << "desired_heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.desired_heading_error);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "cmd_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
    s << indent << "yaw_pid: ";
    s << std::endl;
    Printer< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >::stream(s, indent + "  ", v.yaw_pid);
    s << indent << "terminal_vel_pid: ";
    s << std::endl;
    Printer< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >::stream(s, indent + "  ", v.terminal_vel_pid);
    s << indent << "correction_vel_pid: ";
    s << std::endl;
    Printer< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >::stream(s, indent + "  ", v.correction_vel_pid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_PATHFOLLOWING_MSGS_MESSAGE_DEBUGMETRICS_H
