// Generated by gencpp from file fuse_pathfollowing_msgs/Segment.msg
// DO NOT EDIT!


#ifndef FUSE_PATHFOLLOWING_MSGS_MESSAGE_SEGMENT_H
#define FUSE_PATHFOLLOWING_MSGS_MESSAGE_SEGMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace fuse_pathfollowing_msgs
{
template <class ContainerAllocator>
struct Segment_
{
  typedef Segment_<ContainerAllocator> Type;

  Segment_()
    : type_enum(0)
    , completion_node_id()
    , start()
    , end()
    , radius(0.0)
    , is_large_arc(false)
    , is_clockwise(false)  {
    }
  Segment_(const ContainerAllocator& _alloc)
    : type_enum(0)
    , completion_node_id(_alloc)
    , start(_alloc)
    , end(_alloc)
    , radius(0.0)
    , is_large_arc(false)
    , is_clockwise(false)  {
  (void)_alloc;
    }



   typedef uint8_t _type_enum_type;
  _type_enum_type type_enum;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _completion_node_id_type;
  _completion_node_id_type completion_node_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _end_type;
  _end_type end;

   typedef float _radius_type;
  _radius_type radius;

   typedef uint8_t _is_large_arc_type;
  _is_large_arc_type is_large_arc;

   typedef uint8_t _is_clockwise_type;
  _is_clockwise_type is_clockwise;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_UNKNOWN)
  #undef TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(TYPE_LINE)
  #undef TYPE_LINE
#endif
#if defined(_WIN32) && defined(TYPE_ARC)
  #undef TYPE_ARC
#endif

  enum {
    TYPE_UNKNOWN = 0u,
    TYPE_LINE = 1u,
    TYPE_ARC = 2u,
  };


  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> const> ConstPtr;

}; // struct Segment_

typedef ::fuse_pathfollowing_msgs::Segment_<std::allocator<void> > Segment;

typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::Segment > SegmentPtr;
typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::Segment const> SegmentConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator2> & rhs)
{
  return lhs.type_enum == rhs.type_enum &&
    lhs.completion_node_id == rhs.completion_node_id &&
    lhs.start == rhs.start &&
    lhs.end == rhs.end &&
    lhs.radius == rhs.radius &&
    lhs.is_large_arc == rhs.is_large_arc &&
    lhs.is_clockwise == rhs.is_clockwise;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_pathfollowing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90e1867debfb66d37e5a20d9acd4d899";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90e1867debfb66d3ULL;
  static const uint64_t static_value2 = 0x7e5a20d9acd4d899ULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_pathfollowing_msgs/Segment";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Array of segments that compose a path\n"
"\n"
"# Defines the type of segment (see possible types below)\n"
"uint8 type_enum\n"
"# Possible types\n"
"uint8 TYPE_UNKNOWN = 0\n"
"uint8 TYPE_LINE = 1\n"
"uint8 TYPE_ARC = 2\n"
"\n"
"# The ID of the node that has been reached when this segment is complete.\n"
"#   If this ID is blank, then this segment is intermediary, and no node is reached on completion\n"
"string completion_node_id\n"
"\n"
"# 3D location (in meters) of the start of the segment\n"
"geometry_msgs/Vector3 start\n"
"# 3D location (in meters) of the end of the segment\n"
"geometry_msgs/Vector3 end\n"
"\n"
"## Arc-specific parameters\n"
"# Radius (in meters) of the arc\n"
"float32 radius\n"
"# True if arc is > 180 degrees, False if not\n"
"bool is_large_arc\n"
"# True if arc moves in clockwise direction, False if counter-clockwise\n"
"bool is_clockwise\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type_enum);
      stream.next(m.completion_node_id);
      stream.next(m.start);
      stream.next(m.end);
      stream.next(m.radius);
      stream.next(m.is_large_arc);
      stream.next(m.is_clockwise);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Segment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_pathfollowing_msgs::Segment_<ContainerAllocator>& v)
  {
    s << indent << "type_enum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type_enum);
    s << indent << "completion_node_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.completion_node_id);
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "is_large_arc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_large_arc);
    s << indent << "is_clockwise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_clockwise);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_PATHFOLLOWING_MSGS_MESSAGE_SEGMENT_H
