# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fuse_pathfollowing_msgs/Segment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Segment(genpy.Message):
  _md5sum = "90e1867debfb66d37e5a20d9acd4d899"
  _type = "fuse_pathfollowing_msgs/Segment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """## Array of segments that compose a path

# Defines the type of segment (see possible types below)
uint8 type_enum
# Possible types
uint8 TYPE_UNKNOWN = 0
uint8 TYPE_LINE = 1
uint8 TYPE_ARC = 2

# The ID of the node that has been reached when this segment is complete.
#   If this ID is blank, then this segment is intermediary, and no node is reached on completion
string completion_node_id

# 3D location (in meters) of the start of the segment
geometry_msgs/Vector3 start
# 3D location (in meters) of the end of the segment
geometry_msgs/Vector3 end

## Arc-specific parameters
# Radius (in meters) of the arc
float32 radius
# True if arc is > 180 degrees, False if not
bool is_large_arc
# True if arc moves in clockwise direction, False if counter-clockwise
bool is_clockwise


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  TYPE_UNKNOWN = 0
  TYPE_LINE = 1
  TYPE_ARC = 2

  __slots__ = ['type_enum','completion_node_id','start','end','radius','is_large_arc','is_clockwise']
  _slot_types = ['uint8','string','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type_enum,completion_node_id,start,end,radius,is_large_arc,is_clockwise

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Segment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type_enum is None:
        self.type_enum = 0
      if self.completion_node_id is None:
        self.completion_node_id = ''
      if self.start is None:
        self.start = geometry_msgs.msg.Vector3()
      if self.end is None:
        self.end = geometry_msgs.msg.Vector3()
      if self.radius is None:
        self.radius = 0.
      if self.is_large_arc is None:
        self.is_large_arc = False
      if self.is_clockwise is None:
        self.is_clockwise = False
    else:
      self.type_enum = 0
      self.completion_node_id = ''
      self.start = geometry_msgs.msg.Vector3()
      self.end = geometry_msgs.msg.Vector3()
      self.radius = 0.
      self.is_large_arc = False
      self.is_clockwise = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type_enum
      buff.write(_get_struct_B().pack(_x))
      _x = self.completion_node_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6df2B().pack(_x.start.x, _x.start.y, _x.start.z, _x.end.x, _x.end.y, _x.end.z, _x.radius, _x.is_large_arc, _x.is_clockwise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Vector3()
      if self.end is None:
        self.end = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 1
      (self.type_enum,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.completion_node_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.completion_node_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.start.x, _x.start.y, _x.start.z, _x.end.x, _x.end.y, _x.end.z, _x.radius, _x.is_large_arc, _x.is_clockwise,) = _get_struct_6df2B().unpack(str[start:end])
      self.is_large_arc = bool(self.is_large_arc)
      self.is_clockwise = bool(self.is_clockwise)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type_enum
      buff.write(_get_struct_B().pack(_x))
      _x = self.completion_node_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6df2B().pack(_x.start.x, _x.start.y, _x.start.z, _x.end.x, _x.end.y, _x.end.z, _x.radius, _x.is_large_arc, _x.is_clockwise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Vector3()
      if self.end is None:
        self.end = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 1
      (self.type_enum,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.completion_node_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.completion_node_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.start.x, _x.start.y, _x.start.z, _x.end.x, _x.end.y, _x.end.z, _x.radius, _x.is_large_arc, _x.is_clockwise,) = _get_struct_6df2B().unpack(str[start:end])
      self.is_large_arc = bool(self.is_large_arc)
      self.is_clockwise = bool(self.is_clockwise)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6df2B = None
def _get_struct_6df2B():
    global _struct_6df2B
    if _struct_6df2B is None:
        _struct_6df2B = struct.Struct("<6df2B")
    return _struct_6df2B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
