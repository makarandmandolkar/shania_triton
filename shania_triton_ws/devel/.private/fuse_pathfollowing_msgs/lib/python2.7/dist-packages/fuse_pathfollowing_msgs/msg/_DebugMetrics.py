# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fuse_pathfollowing_msgs/DebugMetrics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fuse_pathfollowing_msgs.msg
import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg

class DebugMetrics(genpy.Message):
  _md5sum = "e7936a8e5a90f165bce29007c47f74eb"
  _type = "fuse_pathfollowing_msgs/DebugMetrics"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# Robot state
nav_msgs/Odometry vehicle_navodom # Includes position, velocity, orientation, and angular velocity
float64 vehicle_heading # Heading in radians - Useful so we don't have to extract from quaternion
float64 vehicle_linear_speed # Linear speed in meters - Useful so we don't have to take the norm of the linear velocity vector
geometry_msgs/Vector3 vehicle_body_vel # Linear velocity in body frame - useful so we don't have to transform from a global frame
# Path info
geometry_msgs/Point path_position # XYZ position of the 
float64 distance_along_path # Distance traveled along the path
float64 desired_speed 
float64 safe_speed
float64 current_speed
float64 terminal_speed
float64 path_heading
float64 desired_heading
float64 feed_forward_yawrate
# Alpha velocity method
float64 alpha_nominal_heading
float64 alpha_path_error
float64 path_velocity
float64 correction_velocity
float64 nominal_speed

# Path error
float64 path_error
float64 path_heading_error
float64 desired_heading_error
# Control info
float64 dt
geometry_msgs/Twist cmd_vel
PIDMetrics yaw_pid
PIDMetrics terminal_vel_pid
PIDMetrics correction_vel_pid


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: fuse_pathfollowing_msgs/PIDMetrics
float64 p_effort
float64 i_effort
float64 d_effort
float64 total_effort"""
  __slots__ = ['header','vehicle_navodom','vehicle_heading','vehicle_linear_speed','vehicle_body_vel','path_position','distance_along_path','desired_speed','safe_speed','current_speed','terminal_speed','path_heading','desired_heading','feed_forward_yawrate','alpha_nominal_heading','alpha_path_error','path_velocity','correction_velocity','nominal_speed','path_error','path_heading_error','desired_heading_error','dt','cmd_vel','yaw_pid','terminal_vel_pid','correction_vel_pid']
  _slot_types = ['std_msgs/Header','nav_msgs/Odometry','float64','float64','geometry_msgs/Vector3','geometry_msgs/Point','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','geometry_msgs/Twist','fuse_pathfollowing_msgs/PIDMetrics','fuse_pathfollowing_msgs/PIDMetrics','fuse_pathfollowing_msgs/PIDMetrics']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vehicle_navodom,vehicle_heading,vehicle_linear_speed,vehicle_body_vel,path_position,distance_along_path,desired_speed,safe_speed,current_speed,terminal_speed,path_heading,desired_heading,feed_forward_yawrate,alpha_nominal_heading,alpha_path_error,path_velocity,correction_velocity,nominal_speed,path_error,path_heading_error,desired_heading_error,dt,cmd_vel,yaw_pid,terminal_vel_pid,correction_vel_pid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DebugMetrics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_navodom is None:
        self.vehicle_navodom = nav_msgs.msg.Odometry()
      if self.vehicle_heading is None:
        self.vehicle_heading = 0.
      if self.vehicle_linear_speed is None:
        self.vehicle_linear_speed = 0.
      if self.vehicle_body_vel is None:
        self.vehicle_body_vel = geometry_msgs.msg.Vector3()
      if self.path_position is None:
        self.path_position = geometry_msgs.msg.Point()
      if self.distance_along_path is None:
        self.distance_along_path = 0.
      if self.desired_speed is None:
        self.desired_speed = 0.
      if self.safe_speed is None:
        self.safe_speed = 0.
      if self.current_speed is None:
        self.current_speed = 0.
      if self.terminal_speed is None:
        self.terminal_speed = 0.
      if self.path_heading is None:
        self.path_heading = 0.
      if self.desired_heading is None:
        self.desired_heading = 0.
      if self.feed_forward_yawrate is None:
        self.feed_forward_yawrate = 0.
      if self.alpha_nominal_heading is None:
        self.alpha_nominal_heading = 0.
      if self.alpha_path_error is None:
        self.alpha_path_error = 0.
      if self.path_velocity is None:
        self.path_velocity = 0.
      if self.correction_velocity is None:
        self.correction_velocity = 0.
      if self.nominal_speed is None:
        self.nominal_speed = 0.
      if self.path_error is None:
        self.path_error = 0.
      if self.path_heading_error is None:
        self.path_heading_error = 0.
      if self.desired_heading_error is None:
        self.desired_heading_error = 0.
      if self.dt is None:
        self.dt = 0.
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.yaw_pid is None:
        self.yaw_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      if self.terminal_vel_pid is None:
        self.terminal_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      if self.correction_vel_pid is None:
        self.correction_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
    else:
      self.header = std_msgs.msg.Header()
      self.vehicle_navodom = nav_msgs.msg.Odometry()
      self.vehicle_heading = 0.
      self.vehicle_linear_speed = 0.
      self.vehicle_body_vel = geometry_msgs.msg.Vector3()
      self.path_position = geometry_msgs.msg.Point()
      self.distance_along_path = 0.
      self.desired_speed = 0.
      self.safe_speed = 0.
      self.current_speed = 0.
      self.terminal_speed = 0.
      self.path_heading = 0.
      self.desired_heading = 0.
      self.feed_forward_yawrate = 0.
      self.alpha_nominal_heading = 0.
      self.alpha_path_error = 0.
      self.path_velocity = 0.
      self.correction_velocity = 0.
      self.nominal_speed = 0.
      self.path_error = 0.
      self.path_heading_error = 0.
      self.desired_heading_error = 0.
      self.dt = 0.
      self.cmd_vel = geometry_msgs.msg.Twist()
      self.yaw_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      self.terminal_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      self.correction_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vehicle_navodom.header.seq, _x.vehicle_navodom.header.stamp.secs, _x.vehicle_navodom.header.stamp.nsecs))
      _x = self.vehicle_navodom.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vehicle_navodom.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.vehicle_navodom.pose.pose.position.x, _x.vehicle_navodom.pose.pose.position.y, _x.vehicle_navodom.pose.pose.position.z, _x.vehicle_navodom.pose.pose.orientation.x, _x.vehicle_navodom.pose.pose.orientation.y, _x.vehicle_navodom.pose.pose.orientation.z, _x.vehicle_navodom.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.vehicle_navodom.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.vehicle_navodom.twist.twist.linear.x, _x.vehicle_navodom.twist.twist.linear.y, _x.vehicle_navodom.twist.twist.linear.z, _x.vehicle_navodom.twist.twist.angular.x, _x.vehicle_navodom.twist.twist.angular.y, _x.vehicle_navodom.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.vehicle_navodom.twist.covariance))
      _x = self
      buff.write(_get_struct_43d().pack(_x.vehicle_heading, _x.vehicle_linear_speed, _x.vehicle_body_vel.x, _x.vehicle_body_vel.y, _x.vehicle_body_vel.z, _x.path_position.x, _x.path_position.y, _x.path_position.z, _x.distance_along_path, _x.desired_speed, _x.safe_speed, _x.current_speed, _x.terminal_speed, _x.path_heading, _x.desired_heading, _x.feed_forward_yawrate, _x.alpha_nominal_heading, _x.alpha_path_error, _x.path_velocity, _x.correction_velocity, _x.nominal_speed, _x.path_error, _x.path_heading_error, _x.desired_heading_error, _x.dt, _x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z, _x.yaw_pid.p_effort, _x.yaw_pid.i_effort, _x.yaw_pid.d_effort, _x.yaw_pid.total_effort, _x.terminal_vel_pid.p_effort, _x.terminal_vel_pid.i_effort, _x.terminal_vel_pid.d_effort, _x.terminal_vel_pid.total_effort, _x.correction_vel_pid.p_effort, _x.correction_vel_pid.i_effort, _x.correction_vel_pid.d_effort, _x.correction_vel_pid.total_effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_navodom is None:
        self.vehicle_navodom = nav_msgs.msg.Odometry()
      if self.vehicle_body_vel is None:
        self.vehicle_body_vel = geometry_msgs.msg.Vector3()
      if self.path_position is None:
        self.path_position = geometry_msgs.msg.Point()
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.yaw_pid is None:
        self.yaw_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      if self.terminal_vel_pid is None:
        self.terminal_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      if self.correction_vel_pid is None:
        self.correction_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.vehicle_navodom.header.seq, _x.vehicle_navodom.header.stamp.secs, _x.vehicle_navodom.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_navodom.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_navodom.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_navodom.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_navodom.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.vehicle_navodom.pose.pose.position.x, _x.vehicle_navodom.pose.pose.position.y, _x.vehicle_navodom.pose.pose.position.z, _x.vehicle_navodom.pose.pose.orientation.x, _x.vehicle_navodom.pose.pose.orientation.y, _x.vehicle_navodom.pose.pose.orientation.z, _x.vehicle_navodom.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.vehicle_navodom.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.vehicle_navodom.twist.twist.linear.x, _x.vehicle_navodom.twist.twist.linear.y, _x.vehicle_navodom.twist.twist.linear.z, _x.vehicle_navodom.twist.twist.angular.x, _x.vehicle_navodom.twist.twist.angular.y, _x.vehicle_navodom.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.vehicle_navodom.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 344
      (_x.vehicle_heading, _x.vehicle_linear_speed, _x.vehicle_body_vel.x, _x.vehicle_body_vel.y, _x.vehicle_body_vel.z, _x.path_position.x, _x.path_position.y, _x.path_position.z, _x.distance_along_path, _x.desired_speed, _x.safe_speed, _x.current_speed, _x.terminal_speed, _x.path_heading, _x.desired_heading, _x.feed_forward_yawrate, _x.alpha_nominal_heading, _x.alpha_path_error, _x.path_velocity, _x.correction_velocity, _x.nominal_speed, _x.path_error, _x.path_heading_error, _x.desired_heading_error, _x.dt, _x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z, _x.yaw_pid.p_effort, _x.yaw_pid.i_effort, _x.yaw_pid.d_effort, _x.yaw_pid.total_effort, _x.terminal_vel_pid.p_effort, _x.terminal_vel_pid.i_effort, _x.terminal_vel_pid.d_effort, _x.terminal_vel_pid.total_effort, _x.correction_vel_pid.p_effort, _x.correction_vel_pid.i_effort, _x.correction_vel_pid.d_effort, _x.correction_vel_pid.total_effort,) = _get_struct_43d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vehicle_navodom.header.seq, _x.vehicle_navodom.header.stamp.secs, _x.vehicle_navodom.header.stamp.nsecs))
      _x = self.vehicle_navodom.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vehicle_navodom.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.vehicle_navodom.pose.pose.position.x, _x.vehicle_navodom.pose.pose.position.y, _x.vehicle_navodom.pose.pose.position.z, _x.vehicle_navodom.pose.pose.orientation.x, _x.vehicle_navodom.pose.pose.orientation.y, _x.vehicle_navodom.pose.pose.orientation.z, _x.vehicle_navodom.pose.pose.orientation.w))
      buff.write(self.vehicle_navodom.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.vehicle_navodom.twist.twist.linear.x, _x.vehicle_navodom.twist.twist.linear.y, _x.vehicle_navodom.twist.twist.linear.z, _x.vehicle_navodom.twist.twist.angular.x, _x.vehicle_navodom.twist.twist.angular.y, _x.vehicle_navodom.twist.twist.angular.z))
      buff.write(self.vehicle_navodom.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_43d().pack(_x.vehicle_heading, _x.vehicle_linear_speed, _x.vehicle_body_vel.x, _x.vehicle_body_vel.y, _x.vehicle_body_vel.z, _x.path_position.x, _x.path_position.y, _x.path_position.z, _x.distance_along_path, _x.desired_speed, _x.safe_speed, _x.current_speed, _x.terminal_speed, _x.path_heading, _x.desired_heading, _x.feed_forward_yawrate, _x.alpha_nominal_heading, _x.alpha_path_error, _x.path_velocity, _x.correction_velocity, _x.nominal_speed, _x.path_error, _x.path_heading_error, _x.desired_heading_error, _x.dt, _x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z, _x.yaw_pid.p_effort, _x.yaw_pid.i_effort, _x.yaw_pid.d_effort, _x.yaw_pid.total_effort, _x.terminal_vel_pid.p_effort, _x.terminal_vel_pid.i_effort, _x.terminal_vel_pid.d_effort, _x.terminal_vel_pid.total_effort, _x.correction_vel_pid.p_effort, _x.correction_vel_pid.i_effort, _x.correction_vel_pid.d_effort, _x.correction_vel_pid.total_effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicle_navodom is None:
        self.vehicle_navodom = nav_msgs.msg.Odometry()
      if self.vehicle_body_vel is None:
        self.vehicle_body_vel = geometry_msgs.msg.Vector3()
      if self.path_position is None:
        self.path_position = geometry_msgs.msg.Point()
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.yaw_pid is None:
        self.yaw_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      if self.terminal_vel_pid is None:
        self.terminal_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      if self.correction_vel_pid is None:
        self.correction_vel_pid = fuse_pathfollowing_msgs.msg.PIDMetrics()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.vehicle_navodom.header.seq, _x.vehicle_navodom.header.stamp.secs, _x.vehicle_navodom.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_navodom.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_navodom.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_navodom.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_navodom.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.vehicle_navodom.pose.pose.position.x, _x.vehicle_navodom.pose.pose.position.y, _x.vehicle_navodom.pose.pose.position.z, _x.vehicle_navodom.pose.pose.orientation.x, _x.vehicle_navodom.pose.pose.orientation.y, _x.vehicle_navodom.pose.pose.orientation.z, _x.vehicle_navodom.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.vehicle_navodom.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.vehicle_navodom.twist.twist.linear.x, _x.vehicle_navodom.twist.twist.linear.y, _x.vehicle_navodom.twist.twist.linear.z, _x.vehicle_navodom.twist.twist.angular.x, _x.vehicle_navodom.twist.twist.angular.y, _x.vehicle_navodom.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.vehicle_navodom.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 344
      (_x.vehicle_heading, _x.vehicle_linear_speed, _x.vehicle_body_vel.x, _x.vehicle_body_vel.y, _x.vehicle_body_vel.z, _x.path_position.x, _x.path_position.y, _x.path_position.z, _x.distance_along_path, _x.desired_speed, _x.safe_speed, _x.current_speed, _x.terminal_speed, _x.path_heading, _x.desired_heading, _x.feed_forward_yawrate, _x.alpha_nominal_heading, _x.alpha_path_error, _x.path_velocity, _x.correction_velocity, _x.nominal_speed, _x.path_error, _x.path_heading_error, _x.desired_heading_error, _x.dt, _x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z, _x.yaw_pid.p_effort, _x.yaw_pid.i_effort, _x.yaw_pid.d_effort, _x.yaw_pid.total_effort, _x.terminal_vel_pid.p_effort, _x.terminal_vel_pid.i_effort, _x.terminal_vel_pid.d_effort, _x.terminal_vel_pid.total_effort, _x.correction_vel_pid.p_effort, _x.correction_vel_pid.i_effort, _x.correction_vel_pid.d_effort, _x.correction_vel_pid.total_effort,) = _get_struct_43d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_43d = None
def _get_struct_43d():
    global _struct_43d
    if _struct_43d is None:
        _struct_43d = struct.Struct("<43d")
    return _struct_43d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
