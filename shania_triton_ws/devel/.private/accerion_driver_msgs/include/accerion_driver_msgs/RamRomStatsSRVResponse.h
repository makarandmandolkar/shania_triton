// Generated by gencpp from file accerion_driver_msgs/RamRomStatsSRVResponse.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_RAMROMSTATSSRVRESPONSE_H
#define ACCERION_DRIVER_MSGS_MESSAGE_RAMROMSTATSSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <accerion_driver_msgs/RamRomStats.h>

namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct RamRomStatsSRVResponse_
{
  typedef RamRomStatsSRVResponse_<ContainerAllocator> Type;

  RamRomStatsSRVResponse_()
    : success(false)
    , stats()  {
    }
  RamRomStatsSRVResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , stats(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::accerion_driver_msgs::RamRomStats_<ContainerAllocator>  _stats_type;
  _stats_type stats;





  typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RamRomStatsSRVResponse_

typedef ::accerion_driver_msgs::RamRomStatsSRVResponse_<std::allocator<void> > RamRomStatsSRVResponse;

typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStatsSRVResponse > RamRomStatsSRVResponsePtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStatsSRVResponse const> RamRomStatsSRVResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.stats == rhs.stats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f929a081cee331427f8c52eba3b62cee";
  }

  static const char* value(const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf929a081cee33142ULL;
  static const uint64_t static_value2 = 0x7f8c52eba3b62ceeULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/RamRomStatsSRVResponse";
  }

  static const char* value(const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success   				# indicate successful run of triggered service\n"
"RamRomStats stats\n"
"\n"
"================================================================================\n"
"MSG: accerion_driver_msgs/RamRomStats\n"
"uint32 romAvailable\n"
"uint32 romTotal\n"
"uint32 sdAvailable\n"
"uint32 sdTotal\n"
"uint16 ramUsed\n"
"uint16 ramTotal\n"
"DirSizePart[] parts\n"
"================================================================================\n"
"MSG: accerion_driver_msgs/DirSizePart\n"
"uint16 type\n"
"uint32 sizeInMB\n"
"uint32 nameLength\n"
"string name\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.stats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RamRomStatsSRVResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::RamRomStatsSRVResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "stats: ";
    s << std::endl;
    Printer< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >::stream(s, indent + "  ", v.stats);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_RAMROMSTATSSRVRESPONSE_H
