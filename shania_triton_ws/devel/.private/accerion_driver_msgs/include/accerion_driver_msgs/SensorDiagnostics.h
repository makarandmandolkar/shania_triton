// Generated by gencpp from file accerion_driver_msgs/SensorDiagnostics.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_SENSORDIAGNOSTICS_H
#define ACCERION_DRIVER_MSGS_MESSAGE_SENSORDIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct SensorDiagnostics_
{
  typedef SensorDiagnostics_<ContainerAllocator> Type;

  SensorDiagnostics_()
    : header()
    , serial_number(0)
    , raw_timestamp(0)
    , modes_code(0)
    , active_modes()
    , warnings_code(0)
    , active_warnings()
    , errors_code(0)
    , active_errors()
    , status_code(0)
    , active_status()  {
    }
  SensorDiagnostics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , serial_number(0)
    , raw_timestamp(0)
    , modes_code(0)
    , active_modes(_alloc)
    , warnings_code(0)
    , active_warnings(_alloc)
    , errors_code(0)
    , active_errors(_alloc)
    , status_code(0)
    , active_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _serial_number_type;
  _serial_number_type serial_number;

   typedef uint64_t _raw_timestamp_type;
  _raw_timestamp_type raw_timestamp;

   typedef uint16_t _modes_code_type;
  _modes_code_type modes_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _active_modes_type;
  _active_modes_type active_modes;

   typedef uint16_t _warnings_code_type;
  _warnings_code_type warnings_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _active_warnings_type;
  _active_warnings_type active_warnings;

   typedef uint32_t _errors_code_type;
  _errors_code_type errors_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _active_errors_type;
  _active_errors_type active_errors;

   typedef uint8_t _status_code_type;
  _status_code_type status_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _active_status_type;
  _active_status_type active_status;





  typedef boost::shared_ptr< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct SensorDiagnostics_

typedef ::accerion_driver_msgs::SensorDiagnostics_<std::allocator<void> > SensorDiagnostics;

typedef boost::shared_ptr< ::accerion_driver_msgs::SensorDiagnostics > SensorDiagnosticsPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::SensorDiagnostics const> SensorDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.serial_number == rhs.serial_number &&
    lhs.raw_timestamp == rhs.raw_timestamp &&
    lhs.modes_code == rhs.modes_code &&
    lhs.active_modes == rhs.active_modes &&
    lhs.warnings_code == rhs.warnings_code &&
    lhs.active_warnings == rhs.active_warnings &&
    lhs.errors_code == rhs.errors_code &&
    lhs.active_errors == rhs.active_errors &&
    lhs.status_code == rhs.status_code &&
    lhs.active_status == rhs.active_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4e775bb96850e70d26b61240e99cf8a";
  }

  static const char* value(const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4e775bb96850e70ULL;
  static const uint64_t static_value2 = 0xd26b61240e99cf8aULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/SensorDiagnostics";
  }

  static const char* value(const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header           \n"
"\n"
"uint32 serial_number\n"
"uint64 raw_timestamp\n"
"\n"
"uint16 modes_code\n"
"string active_modes\n"
"\n"
"uint16 warnings_code\n"
"string active_warnings\n"
"\n"
"uint32 errors_code\n"
"string active_errors\n"
"\n"
"uint8 status_code\n"
"string active_status\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.serial_number);
      stream.next(m.raw_timestamp);
      stream.next(m.modes_code);
      stream.next(m.active_modes);
      stream.next(m.warnings_code);
      stream.next(m.active_warnings);
      stream.next(m.errors_code);
      stream.next(m.active_errors);
      stream.next(m.status_code);
      stream.next(m.active_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::SensorDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "serial_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serial_number);
    s << indent << "raw_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.raw_timestamp);
    s << indent << "modes_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.modes_code);
    s << indent << "active_modes: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.active_modes);
    s << indent << "warnings_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.warnings_code);
    s << indent << "active_warnings: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.active_warnings);
    s << indent << "errors_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.errors_code);
    s << indent << "active_errors: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.active_errors);
    s << indent << "status_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_code);
    s << indent << "active_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.active_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_SENSORDIAGNOSTICS_H
