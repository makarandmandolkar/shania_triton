// Generated by gencpp from file accerion_driver_msgs/SecondaryLFResponse.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_SECONDARYLFRESPONSE_H
#define ACCERION_DRIVER_MSGS_MESSAGE_SECONDARYLFRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct SecondaryLFResponse_
{
  typedef SecondaryLFResponse_<ContainerAllocator> Type;

  SecondaryLFResponse_()
    : success(false)
    , message()
    , timeStamp(0)
    , x(0.0)
    , y(0.0)
    , heading(0.0)
    , closestPointX(0.0)
    , closestPointY(0.0)
    , line_heading(0.0)
    , clusterID(0)  {
    }
  SecondaryLFResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , timeStamp(0)
    , x(0.0)
    , y(0.0)
    , heading(0.0)
    , closestPointX(0.0)
    , closestPointY(0.0)
    , line_heading(0.0)
    , clusterID(0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _closestPointX_type;
  _closestPointX_type closestPointX;

   typedef float _closestPointY_type;
  _closestPointY_type closestPointY;

   typedef float _line_heading_type;
  _line_heading_type line_heading;

   typedef uint16_t _clusterID_type;
  _clusterID_type clusterID;





  typedef boost::shared_ptr< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SecondaryLFResponse_

typedef ::accerion_driver_msgs::SecondaryLFResponse_<std::allocator<void> > SecondaryLFResponse;

typedef boost::shared_ptr< ::accerion_driver_msgs::SecondaryLFResponse > SecondaryLFResponsePtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::SecondaryLFResponse const> SecondaryLFResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.timeStamp == rhs.timeStamp &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.heading == rhs.heading &&
    lhs.closestPointX == rhs.closestPointX &&
    lhs.closestPointY == rhs.closestPointY &&
    lhs.line_heading == rhs.line_heading &&
    lhs.clusterID == rhs.clusterID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fffb73d647782f825b2796e38e707ab";
  }

  static const char* value(const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fffb73d647782f8ULL;
  static const uint64_t static_value2 = 0x25b2796e38e707abULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/SecondaryLFResponse";
  }

  static const char* value(const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success   	      # indicate successful run of triggered service\n"
"string message 	      # informational, e.g. for error messages\n"
"uint64 timeStamp             # Timestamp when the message was made\n"
"float32 x                    # Position of the sensor in meters x\n"
"float32 y                    # Position of the sensor in meters y\n"
"float32 heading              # Heading of the sensor in degrees\n"
"float32 closestPointX        # Closest point on line in meters x\n"
"float32 closestPointY        # Closest point on line in meters y\n"
"float32 line_heading         # heading of the line on closest point\n"
"uint16 clusterID             # ClusterID of the requested cluster line\n"
"\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.timeStamp);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.heading);
      stream.next(m.closestPointX);
      stream.next(m.closestPointY);
      stream.next(m.line_heading);
      stream.next(m.clusterID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SecondaryLFResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::SecondaryLFResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "closestPointX: ";
    Printer<float>::stream(s, indent + "  ", v.closestPointX);
    s << indent << "closestPointY: ";
    Printer<float>::stream(s, indent + "  ", v.closestPointY);
    s << indent << "line_heading: ";
    Printer<float>::stream(s, indent + "  ", v.line_heading);
    s << indent << "clusterID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.clusterID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_SECONDARYLFRESPONSE_H
