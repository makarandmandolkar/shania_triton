// Generated by gencpp from file accerion_driver_msgs/SubsetMapGoal.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_SUBSETMAPGOAL_H
#define ACCERION_DRIVER_MSGS_MESSAGE_SUBSETMAPGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct SubsetMapGoal_
{
  typedef SubsetMapGoal_<ContainerAllocator> Type;

  SubsetMapGoal_()
    : clusterIDs()
    , targetAreaID(0)  {
    }
  SubsetMapGoal_(const ContainerAllocator& _alloc)
    : clusterIDs(_alloc)
    , targetAreaID(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _clusterIDs_type;
  _clusterIDs_type clusterIDs;

   typedef uint16_t _targetAreaID_type;
  _targetAreaID_type targetAreaID;





  typedef boost::shared_ptr< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SubsetMapGoal_

typedef ::accerion_driver_msgs::SubsetMapGoal_<std::allocator<void> > SubsetMapGoal;

typedef boost::shared_ptr< ::accerion_driver_msgs::SubsetMapGoal > SubsetMapGoalPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::SubsetMapGoal const> SubsetMapGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator2> & rhs)
{
  return lhs.clusterIDs == rhs.clusterIDs &&
    lhs.targetAreaID == rhs.targetAreaID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebb07f5655f1c030657a7fb8af794413";
  }

  static const char* value(const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebb07f5655f1c030ULL;
  static const uint64_t static_value2 = 0x657a7fb8af794413ULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/SubsetMapGoal";
  }

  static const char* value(const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"string clusterIDs           # idxs of the clusters to be moved(e.g. 0-100,102)\n"
"uint16 targetAreaID         # id of the targetArea, has to be unused/empty\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clusterIDs);
      stream.next(m.targetAreaID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubsetMapGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::SubsetMapGoal_<ContainerAllocator>& v)
  {
    s << indent << "clusterIDs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.clusterIDs);
    s << indent << "targetAreaID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.targetAreaID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_SUBSETMAPGOAL_H
