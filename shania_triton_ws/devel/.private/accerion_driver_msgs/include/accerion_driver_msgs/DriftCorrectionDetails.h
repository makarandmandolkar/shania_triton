// Generated by gencpp from file accerion_driver_msgs/DriftCorrectionDetails.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_DRIFTCORRECTIONDETAILS_H
#define ACCERION_DRIVER_MSGS_MESSAGE_DRIFTCORRECTIONDETAILS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>

namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct DriftCorrectionDetails_
{
  typedef DriftCorrectionDetails_<ContainerAllocator> Type;

  DriftCorrectionDetails_()
    : new_corrected_pose()
    , correction_x(0.0)
    , correction_y(0.0)
    , correction_heading(0.0)
    , error_heading_deg(0.0)
    , correct_heading_deg(0.0)
    , cumulative_traveled_distance(0.0)
    , cumulative_traveled_rotation(0.0)
    , error_percentage(0.0)
    , cluster_id(0)
    , acq_quality_estimate(0)
    , reserved1(0.0)
    , reserved2(0.0)
    , reserved3(0.0)  {
    }
  DriftCorrectionDetails_(const ContainerAllocator& _alloc)
    : new_corrected_pose(_alloc)
    , correction_x(0.0)
    , correction_y(0.0)
    , correction_heading(0.0)
    , error_heading_deg(0.0)
    , correct_heading_deg(0.0)
    , cumulative_traveled_distance(0.0)
    , cumulative_traveled_rotation(0.0)
    , error_percentage(0.0)
    , cluster_id(0)
    , acq_quality_estimate(0)
    , reserved1(0.0)
    , reserved2(0.0)
    , reserved3(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _new_corrected_pose_type;
  _new_corrected_pose_type new_corrected_pose;

   typedef float _correction_x_type;
  _correction_x_type correction_x;

   typedef float _correction_y_type;
  _correction_y_type correction_y;

   typedef float _correction_heading_type;
  _correction_heading_type correction_heading;

   typedef float _error_heading_deg_type;
  _error_heading_deg_type error_heading_deg;

   typedef float _correct_heading_deg_type;
  _correct_heading_deg_type correct_heading_deg;

   typedef float _cumulative_traveled_distance_type;
  _cumulative_traveled_distance_type cumulative_traveled_distance;

   typedef float _cumulative_traveled_rotation_type;
  _cumulative_traveled_rotation_type cumulative_traveled_rotation;

   typedef float _error_percentage_type;
  _error_percentage_type error_percentage;

   typedef uint16_t _cluster_id_type;
  _cluster_id_type cluster_id;

   typedef uint8_t _acq_quality_estimate_type;
  _acq_quality_estimate_type acq_quality_estimate;

   typedef float _reserved1_type;
  _reserved1_type reserved1;

   typedef float _reserved2_type;
  _reserved2_type reserved2;

   typedef float _reserved3_type;
  _reserved3_type reserved3;





  typedef boost::shared_ptr< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> const> ConstPtr;

}; // struct DriftCorrectionDetails_

typedef ::accerion_driver_msgs::DriftCorrectionDetails_<std::allocator<void> > DriftCorrectionDetails;

typedef boost::shared_ptr< ::accerion_driver_msgs::DriftCorrectionDetails > DriftCorrectionDetailsPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::DriftCorrectionDetails const> DriftCorrectionDetailsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator2> & rhs)
{
  return lhs.new_corrected_pose == rhs.new_corrected_pose &&
    lhs.correction_x == rhs.correction_x &&
    lhs.correction_y == rhs.correction_y &&
    lhs.correction_heading == rhs.correction_heading &&
    lhs.error_heading_deg == rhs.error_heading_deg &&
    lhs.correct_heading_deg == rhs.correct_heading_deg &&
    lhs.cumulative_traveled_distance == rhs.cumulative_traveled_distance &&
    lhs.cumulative_traveled_rotation == rhs.cumulative_traveled_rotation &&
    lhs.error_percentage == rhs.error_percentage &&
    lhs.cluster_id == rhs.cluster_id &&
    lhs.acq_quality_estimate == rhs.acq_quality_estimate &&
    lhs.reserved1 == rhs.reserved1 &&
    lhs.reserved2 == rhs.reserved2 &&
    lhs.reserved3 == rhs.reserved3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6dee6f706294700ef373c89c1963dda5";
  }

  static const char* value(const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6dee6f706294700eULL;
  static const uint64_t static_value2 = 0xf373c89c1963dda5ULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/DriftCorrectionDetails";
  }

  static const char* value(const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseWithCovariance new_corrected_pose  # corrected pose in reference frame\n"
"\n"
"float32 correction_x                    		# corrected position error [m] in +x direction in reference frame\n"
"float32 correction_y                   		    # corrected position error [m] in +y direction in reference frame\n"
"float32 correction_heading              		# corrected orientation error [rad] in +z direction in reference frame\n"
"float32 error_heading_deg                  	    # orientation error [deg] in +z direction in reference frame\n"
"float32 correct_heading_deg                 	# correct (new) orientation [deg] in +z direction in reference frame\n"
"\n"
"float32 cumulative_traveled_distance     		# cumulative traveled linear distance since last drift correction\n"
"float32 cumulative_traveled_rotation     		# cumulative traveled rotational distance since last drift correction\n"
"float32 error_percentage 			   		    # (preliminary) simple positional accuracy figure\n"
"uint16   cluster_id 					   		# ID of the cluster on which the drift correction is based\n"
"\n"
"uint8   acq_quality_estimate             		# quality estimate\n"
"\n"
"float32 reserved1     		                    #\n"
"float32 reserved2     		                    #\n"
"float32 reserved3 			   		            #\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_corrected_pose);
      stream.next(m.correction_x);
      stream.next(m.correction_y);
      stream.next(m.correction_heading);
      stream.next(m.error_heading_deg);
      stream.next(m.correct_heading_deg);
      stream.next(m.cumulative_traveled_distance);
      stream.next(m.cumulative_traveled_rotation);
      stream.next(m.error_percentage);
      stream.next(m.cluster_id);
      stream.next(m.acq_quality_estimate);
      stream.next(m.reserved1);
      stream.next(m.reserved2);
      stream.next(m.reserved3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriftCorrectionDetails_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::DriftCorrectionDetails_<ContainerAllocator>& v)
  {
    s << indent << "new_corrected_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.new_corrected_pose);
    s << indent << "correction_x: ";
    Printer<float>::stream(s, indent + "  ", v.correction_x);
    s << indent << "correction_y: ";
    Printer<float>::stream(s, indent + "  ", v.correction_y);
    s << indent << "correction_heading: ";
    Printer<float>::stream(s, indent + "  ", v.correction_heading);
    s << indent << "error_heading_deg: ";
    Printer<float>::stream(s, indent + "  ", v.error_heading_deg);
    s << indent << "correct_heading_deg: ";
    Printer<float>::stream(s, indent + "  ", v.correct_heading_deg);
    s << indent << "cumulative_traveled_distance: ";
    Printer<float>::stream(s, indent + "  ", v.cumulative_traveled_distance);
    s << indent << "cumulative_traveled_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.cumulative_traveled_rotation);
    s << indent << "error_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.error_percentage);
    s << indent << "cluster_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cluster_id);
    s << indent << "acq_quality_estimate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acq_quality_estimate);
    s << indent << "reserved1: ";
    Printer<float>::stream(s, indent + "  ", v.reserved1);
    s << indent << "reserved2: ";
    Printer<float>::stream(s, indent + "  ", v.reserved2);
    s << indent << "reserved3: ";
    Printer<float>::stream(s, indent + "  ", v.reserved3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_DRIFTCORRECTIONDETAILS_H
