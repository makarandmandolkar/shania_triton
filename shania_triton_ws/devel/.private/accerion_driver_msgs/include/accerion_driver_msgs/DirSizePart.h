// Generated by gencpp from file accerion_driver_msgs/DirSizePart.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_DIRSIZEPART_H
#define ACCERION_DRIVER_MSGS_MESSAGE_DIRSIZEPART_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct DirSizePart_
{
  typedef DirSizePart_<ContainerAllocator> Type;

  DirSizePart_()
    : type(0)
    , sizeInMB(0)
    , nameLength(0)
    , name()  {
    }
  DirSizePart_(const ContainerAllocator& _alloc)
    : type(0)
    , sizeInMB(0)
    , nameLength(0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _type_type;
  _type_type type;

   typedef uint32_t _sizeInMB_type;
  _sizeInMB_type sizeInMB;

   typedef uint32_t _nameLength_type;
  _nameLength_type nameLength;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> const> ConstPtr;

}; // struct DirSizePart_

typedef ::accerion_driver_msgs::DirSizePart_<std::allocator<void> > DirSizePart;

typedef boost::shared_ptr< ::accerion_driver_msgs::DirSizePart > DirSizePartPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::DirSizePart const> DirSizePartConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.sizeInMB == rhs.sizeInMB &&
    lhs.nameLength == rhs.nameLength &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "148a4802f96912a7e6838d49c25793cf";
  }

  static const char* value(const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x148a4802f96912a7ULL;
  static const uint64_t static_value2 = 0xe6838d49c25793cfULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/DirSizePart";
  }

  static const char* value(const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 type\n"
"uint32 sizeInMB\n"
"uint32 nameLength\n"
"string name\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.sizeInMB);
      stream.next(m.nameLength);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DirSizePart_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::DirSizePart_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type);
    s << indent << "sizeInMB: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sizeInMB);
    s << indent << "nameLength: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nameLength);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_DIRSIZEPART_H
