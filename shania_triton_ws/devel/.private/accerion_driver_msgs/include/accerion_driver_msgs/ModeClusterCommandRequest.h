// Generated by gencpp from file accerion_driver_msgs/ModeClusterCommandRequest.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_MODECLUSTERCOMMANDREQUEST_H
#define ACCERION_DRIVER_MSGS_MESSAGE_MODECLUSTERCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct ModeClusterCommandRequest_
{
  typedef ModeClusterCommandRequest_<ContainerAllocator> Type;

  ModeClusterCommandRequest_()
    : mode()
    , cluster_id(0)
    , command()  {
    }
  ModeClusterCommandRequest_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , cluster_id(0)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef int32_t _cluster_id_type;
  _cluster_id_type cluster_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ModeClusterCommandRequest_

typedef ::accerion_driver_msgs::ModeClusterCommandRequest_<std::allocator<void> > ModeClusterCommandRequest;

typedef boost::shared_ptr< ::accerion_driver_msgs::ModeClusterCommandRequest > ModeClusterCommandRequestPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::ModeClusterCommandRequest const> ModeClusterCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.cluster_id == rhs.cluster_id &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdab8b08a3326120c7215ea36b7f62ac";
  }

  static const char* value(const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdab8b08a3326120ULL;
  static const uint64_t static_value2 = 0xc7215ea36b7f62acULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/ModeClusterCommandRequest";
  }

  static const char* value(const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode                 # [mapping, active_mapping, line_following]\n"
"int32 cluster_id			# specify the cluster id. This can be used at the start of mapping, line following mode etc\n"
"string command              # [start, stop] the desired mode\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.cluster_id);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModeClusterCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::ModeClusterCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "cluster_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cluster_id);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_MODECLUSTERCOMMANDREQUEST_H
