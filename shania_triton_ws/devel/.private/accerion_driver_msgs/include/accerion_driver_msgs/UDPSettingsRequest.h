// Generated by gencpp from file accerion_driver_msgs/UDPSettingsRequest.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_UDPSETTINGSREQUEST_H
#define ACCERION_DRIVER_MSGS_MESSAGE_UDPSETTINGSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct UDPSettingsRequest_
{
  typedef UDPSettingsRequest_<ContainerAllocator> Type;

  UDPSettingsRequest_()
    : unicast_ip_address_first(0)
    , unicast_ip_address_second(0)
    , unicast_ip_address_third(0)
    , unicast_ip_address_fourth(0)
    , message_type(0)
    , udp_mode(0)  {
    }
  UDPSettingsRequest_(const ContainerAllocator& _alloc)
    : unicast_ip_address_first(0)
    , unicast_ip_address_second(0)
    , unicast_ip_address_third(0)
    , unicast_ip_address_fourth(0)
    , message_type(0)
    , udp_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _unicast_ip_address_first_type;
  _unicast_ip_address_first_type unicast_ip_address_first;

   typedef uint8_t _unicast_ip_address_second_type;
  _unicast_ip_address_second_type unicast_ip_address_second;

   typedef uint8_t _unicast_ip_address_third_type;
  _unicast_ip_address_third_type unicast_ip_address_third;

   typedef uint8_t _unicast_ip_address_fourth_type;
  _unicast_ip_address_fourth_type unicast_ip_address_fourth;

   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint8_t _udp_mode_type;
  _udp_mode_type udp_mode;





  typedef boost::shared_ptr< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UDPSettingsRequest_

typedef ::accerion_driver_msgs::UDPSettingsRequest_<std::allocator<void> > UDPSettingsRequest;

typedef boost::shared_ptr< ::accerion_driver_msgs::UDPSettingsRequest > UDPSettingsRequestPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::UDPSettingsRequest const> UDPSettingsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.unicast_ip_address_first == rhs.unicast_ip_address_first &&
    lhs.unicast_ip_address_second == rhs.unicast_ip_address_second &&
    lhs.unicast_ip_address_third == rhs.unicast_ip_address_third &&
    lhs.unicast_ip_address_fourth == rhs.unicast_ip_address_fourth &&
    lhs.message_type == rhs.message_type &&
    lhs.udp_mode == rhs.udp_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99562254465350d0143bdef14bb5dc6f";
  }

  static const char* value(const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99562254465350d0ULL;
  static const uint64_t static_value2 = 0x143bdef14bb5dc6fULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/UDPSettingsRequest";
  }

  static const char* value(const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 unicast_ip_address_first   # unicast target ip address first\n"
"uint8 unicast_ip_address_second  # unicast target ip address second\n"
"uint8 unicast_ip_address_third   # unicast target ip address third\n"
"uint8 unicast_ip_address_fourth   # unicast target ip address fourth\n"
"uint8  message_type         # 0x01: none, 0x02: only streaming, 0x03: only intermittent, 0x04: both streaming & intermittent messages\n"
"uint8  udp_mode             # 0x01:Broadcast, 0x02:Unicast, 0x03:Unicast no HB  \n"
;
  }

  static const char* value(const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unicast_ip_address_first);
      stream.next(m.unicast_ip_address_second);
      stream.next(m.unicast_ip_address_third);
      stream.next(m.unicast_ip_address_fourth);
      stream.next(m.message_type);
      stream.next(m.udp_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UDPSettingsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::UDPSettingsRequest_<ContainerAllocator>& v)
  {
    s << indent << "unicast_ip_address_first: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unicast_ip_address_first);
    s << indent << "unicast_ip_address_second: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unicast_ip_address_second);
    s << indent << "unicast_ip_address_third: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unicast_ip_address_third);
    s << indent << "unicast_ip_address_fourth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unicast_ip_address_fourth);
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "udp_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.udp_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_UDPSETTINGSREQUEST_H
