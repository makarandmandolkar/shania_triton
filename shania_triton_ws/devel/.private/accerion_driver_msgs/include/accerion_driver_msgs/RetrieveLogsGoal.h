// Generated by gencpp from file accerion_driver_msgs/RetrieveLogsGoal.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_RETRIEVELOGSGOAL_H
#define ACCERION_DRIVER_MSGS_MESSAGE_RETRIEVELOGSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct RetrieveLogsGoal_
{
  typedef RetrieveLogsGoal_<ContainerAllocator> Type;

  RetrieveLogsGoal_()
    : path()
    , backup_logs(false)  {
    }
  RetrieveLogsGoal_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , backup_logs(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  _path_type path;

   typedef uint8_t _backup_logs_type;
  _backup_logs_type backup_logs;





  typedef boost::shared_ptr< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RetrieveLogsGoal_

typedef ::accerion_driver_msgs::RetrieveLogsGoal_<std::allocator<void> > RetrieveLogsGoal;

typedef boost::shared_ptr< ::accerion_driver_msgs::RetrieveLogsGoal > RetrieveLogsGoalPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::RetrieveLogsGoal const> RetrieveLogsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.path == rhs.path &&
    lhs.backup_logs == rhs.backup_logs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d229c956cdfc5fe93f7272546acbcd70";
  }

  static const char* value(const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd229c956cdfc5fe9ULL;
  static const uint64_t static_value2 = 0x3f7272546acbcd70ULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/RetrieveLogsGoal";
  }

  static const char* value(const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"string path                 # Path where the logs should be stored\n"
"bool backup_logs             # boolean, set to true if backup logs are to be retrieved.\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.backup_logs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RetrieveLogsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::RetrieveLogsGoal_<ContainerAllocator>& v)
  {
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path);
    s << indent << "backup_logs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.backup_logs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_RETRIEVELOGSGOAL_H
