// Generated by gencpp from file accerion_driver_msgs/StartBufferedRecoveryModeRequest.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_STARTBUFFEREDRECOVERYMODEREQUEST_H
#define ACCERION_DRIVER_MSGS_MESSAGE_STARTBUFFEREDRECOVERYMODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct StartBufferedRecoveryModeRequest_
{
  typedef StartBufferedRecoveryModeRequest_<ContainerAllocator> Type;

  StartBufferedRecoveryModeRequest_()
    : xPos(0.0)
    , yPos(0.0)
    , radius(0.0)
    , fullMapSearch(false)  {
    }
  StartBufferedRecoveryModeRequest_(const ContainerAllocator& _alloc)
    : xPos(0.0)
    , yPos(0.0)
    , radius(0.0)
    , fullMapSearch(false)  {
  (void)_alloc;
    }



   typedef float _xPos_type;
  _xPos_type xPos;

   typedef float _yPos_type;
  _yPos_type yPos;

   typedef float _radius_type;
  _radius_type radius;

   typedef uint8_t _fullMapSearch_type;
  _fullMapSearch_type fullMapSearch;





  typedef boost::shared_ptr< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartBufferedRecoveryModeRequest_

typedef ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<std::allocator<void> > StartBufferedRecoveryModeRequest;

typedef boost::shared_ptr< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest > StartBufferedRecoveryModeRequestPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest const> StartBufferedRecoveryModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.xPos == rhs.xPos &&
    lhs.yPos == rhs.yPos &&
    lhs.radius == rhs.radius &&
    lhs.fullMapSearch == rhs.fullMapSearch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87fec0ffb4a91d839aea3d715e9b21ad";
  }

  static const char* value(const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87fec0ffb4a91d83ULL;
  static const uint64_t static_value2 = 0x9aea3d715e9b21adULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/StartBufferedRecoveryModeRequest";
  }

  static const char* value(const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xPos			# specify the anchor x position\n"
"float32 yPos			# specify the anchor y position\n"
"float32 radius	        # specify the search radius\n"
"bool    fullMapSearch   # specify if full map search mode is on\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xPos);
      stream.next(m.yPos);
      stream.next(m.radius);
      stream.next(m.fullMapSearch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartBufferedRecoveryModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::StartBufferedRecoveryModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "xPos: ";
    Printer<float>::stream(s, indent + "  ", v.xPos);
    s << indent << "yPos: ";
    Printer<float>::stream(s, indent + "  ", v.yPos);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "fullMapSearch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fullMapSearch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_STARTBUFFEREDRECOVERYMODEREQUEST_H
