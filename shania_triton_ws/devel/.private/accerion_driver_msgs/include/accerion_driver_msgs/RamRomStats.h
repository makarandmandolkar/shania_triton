// Generated by gencpp from file accerion_driver_msgs/RamRomStats.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_RAMROMSTATS_H
#define ACCERION_DRIVER_MSGS_MESSAGE_RAMROMSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <accerion_driver_msgs/DirSizePart.h>

namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct RamRomStats_
{
  typedef RamRomStats_<ContainerAllocator> Type;

  RamRomStats_()
    : romAvailable(0)
    , romTotal(0)
    , sdAvailable(0)
    , sdTotal(0)
    , ramUsed(0)
    , ramTotal(0)
    , parts()  {
    }
  RamRomStats_(const ContainerAllocator& _alloc)
    : romAvailable(0)
    , romTotal(0)
    , sdAvailable(0)
    , sdTotal(0)
    , ramUsed(0)
    , ramTotal(0)
    , parts(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _romAvailable_type;
  _romAvailable_type romAvailable;

   typedef uint32_t _romTotal_type;
  _romTotal_type romTotal;

   typedef uint32_t _sdAvailable_type;
  _sdAvailable_type sdAvailable;

   typedef uint32_t _sdTotal_type;
  _sdTotal_type sdTotal;

   typedef uint16_t _ramUsed_type;
  _ramUsed_type ramUsed;

   typedef uint16_t _ramTotal_type;
  _ramTotal_type ramTotal;

   typedef std::vector< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >::other >  _parts_type;
  _parts_type parts;





  typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> const> ConstPtr;

}; // struct RamRomStats_

typedef ::accerion_driver_msgs::RamRomStats_<std::allocator<void> > RamRomStats;

typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStats > RamRomStatsPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::RamRomStats const> RamRomStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator2> & rhs)
{
  return lhs.romAvailable == rhs.romAvailable &&
    lhs.romTotal == rhs.romTotal &&
    lhs.sdAvailable == rhs.sdAvailable &&
    lhs.sdTotal == rhs.sdTotal &&
    lhs.ramUsed == rhs.ramUsed &&
    lhs.ramTotal == rhs.ramTotal &&
    lhs.parts == rhs.parts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7806d72dc3ef14ad7527222b80c652ff";
  }

  static const char* value(const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7806d72dc3ef14adULL;
  static const uint64_t static_value2 = 0x7527222b80c652ffULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/RamRomStats";
  }

  static const char* value(const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 romAvailable\n"
"uint32 romTotal\n"
"uint32 sdAvailable\n"
"uint32 sdTotal\n"
"uint16 ramUsed\n"
"uint16 ramTotal\n"
"DirSizePart[] parts\n"
"================================================================================\n"
"MSG: accerion_driver_msgs/DirSizePart\n"
"uint16 type\n"
"uint32 sizeInMB\n"
"uint32 nameLength\n"
"string name\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.romAvailable);
      stream.next(m.romTotal);
      stream.next(m.sdAvailable);
      stream.next(m.sdTotal);
      stream.next(m.ramUsed);
      stream.next(m.ramTotal);
      stream.next(m.parts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RamRomStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::RamRomStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::RamRomStats_<ContainerAllocator>& v)
  {
    s << indent << "romAvailable: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.romAvailable);
    s << indent << "romTotal: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.romTotal);
    s << indent << "sdAvailable: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sdAvailable);
    s << indent << "sdTotal: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sdTotal);
    s << indent << "ramUsed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ramUsed);
    s << indent << "ramTotal: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ramTotal);
    s << indent << "parts[]" << std::endl;
    for (size_t i = 0; i < v.parts.size(); ++i)
    {
      s << indent << "  parts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::accerion_driver_msgs::DirSizePart_<ContainerAllocator> >::stream(s, indent + "    ", v.parts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_RAMROMSTATS_H
