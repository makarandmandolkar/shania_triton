// Generated by gencpp from file accerion_driver_msgs/RecordingsRequest.msg
// DO NOT EDIT!


#ifndef ACCERION_DRIVER_MSGS_MESSAGE_RECORDINGSREQUEST_H
#define ACCERION_DRIVER_MSGS_MESSAGE_RECORDINGSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accerion_driver_msgs
{
template <class ContainerAllocator>
struct RecordingsRequest_
{
  typedef RecordingsRequest_<ContainerAllocator> Type;

  RecordingsRequest_()
    : mode()
    , recordingIndexes()  {
    }
  RecordingsRequest_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , recordingIndexes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _recordingIndexes_type;
  _recordingIndexes_type recordingIndexes;





  typedef boost::shared_ptr< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RecordingsRequest_

typedef ::accerion_driver_msgs::RecordingsRequest_<std::allocator<void> > RecordingsRequest;

typedef boost::shared_ptr< ::accerion_driver_msgs::RecordingsRequest > RecordingsRequestPtr;
typedef boost::shared_ptr< ::accerion_driver_msgs::RecordingsRequest const> RecordingsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.recordingIndexes == rhs.recordingIndexes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator1> & lhs, const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accerion_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "034f89eca09b7ab066a8b6eebe46c09c";
  }

  static const char* value(const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x034f89eca09b7ab0ULL;
  static const uint64_t static_value2 = 0x66a8b6eebe46c09cULL;
};

template<class ContainerAllocator>
struct DataType< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accerion_driver_msgs/RecordingsRequest";
  }

  static const char* value(const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode                 # list(to retrieve list of recordings), delete(delete one or more recordings)\n"
"uint8[]  recordingIndexes   # indexes of the recordings to be retrieved\n"
;
  }

  static const char* value(const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.recordingIndexes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecordingsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accerion_driver_msgs::RecordingsRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "recordingIndexes[]" << std::endl;
    for (size_t i = 0; i < v.recordingIndexes.size(); ++i)
    {
      s << indent << "  recordingIndexes[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.recordingIndexes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCERION_DRIVER_MSGS_MESSAGE_RECORDINGSREQUEST_H
