# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from accerion_driver_msgs/SensorDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SensorDiagnostics(genpy.Message):
  _md5sum = "c4e775bb96850e70d26b61240e99cf8a"
  _type = "accerion_driver_msgs/SensorDiagnostics"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header           

uint32 serial_number
uint64 raw_timestamp

uint16 modes_code
string active_modes

uint16 warnings_code
string active_warnings

uint32 errors_code
string active_errors

uint8 status_code
string active_status


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','serial_number','raw_timestamp','modes_code','active_modes','warnings_code','active_warnings','errors_code','active_errors','status_code','active_status']
  _slot_types = ['std_msgs/Header','uint32','uint64','uint16','string','uint16','string','uint32','string','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,serial_number,raw_timestamp,modes_code,active_modes,warnings_code,active_warnings,errors_code,active_errors,status_code,active_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.serial_number is None:
        self.serial_number = 0
      if self.raw_timestamp is None:
        self.raw_timestamp = 0
      if self.modes_code is None:
        self.modes_code = 0
      if self.active_modes is None:
        self.active_modes = ''
      if self.warnings_code is None:
        self.warnings_code = 0
      if self.active_warnings is None:
        self.active_warnings = ''
      if self.errors_code is None:
        self.errors_code = 0
      if self.active_errors is None:
        self.active_errors = ''
      if self.status_code is None:
        self.status_code = 0
      if self.active_status is None:
        self.active_status = ''
    else:
      self.header = std_msgs.msg.Header()
      self.serial_number = 0
      self.raw_timestamp = 0
      self.modes_code = 0
      self.active_modes = ''
      self.warnings_code = 0
      self.active_warnings = ''
      self.errors_code = 0
      self.active_errors = ''
      self.status_code = 0
      self.active_status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQH().pack(_x.serial_number, _x.raw_timestamp, _x.modes_code))
      _x = self.active_modes
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.warnings_code
      buff.write(_get_struct_H().pack(_x))
      _x = self.active_warnings
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.errors_code
      buff.write(_get_struct_I().pack(_x))
      _x = self.active_errors
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status_code
      buff.write(_get_struct_B().pack(_x))
      _x = self.active_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.serial_number, _x.raw_timestamp, _x.modes_code,) = _get_struct_IQH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_modes = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_modes = str[start:end]
      start = end
      end += 2
      (self.warnings_code,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_warnings = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_warnings = str[start:end]
      start = end
      end += 4
      (self.errors_code,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_errors = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_errors = str[start:end]
      start = end
      end += 1
      (self.status_code,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQH().pack(_x.serial_number, _x.raw_timestamp, _x.modes_code))
      _x = self.active_modes
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.warnings_code
      buff.write(_get_struct_H().pack(_x))
      _x = self.active_warnings
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.errors_code
      buff.write(_get_struct_I().pack(_x))
      _x = self.active_errors
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status_code
      buff.write(_get_struct_B().pack(_x))
      _x = self.active_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.serial_number, _x.raw_timestamp, _x.modes_code,) = _get_struct_IQH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_modes = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_modes = str[start:end]
      start = end
      end += 2
      (self.warnings_code,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_warnings = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_warnings = str[start:end]
      start = end
      end += 4
      (self.errors_code,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_errors = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_errors = str[start:end]
      start = end
      end += 1
      (self.status_code,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_IQH = None
def _get_struct_IQH():
    global _struct_IQH
    if _struct_IQH is None:
        _struct_IQH = struct.Struct("<IQH")
    return _struct_IQH
