# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from accerion_driver_msgs/RamRomStatsSRVRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RamRomStatsSRVRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "accerion_driver_msgs/RamRomStatsSRVRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RamRomStatsSRVRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from accerion_driver_msgs/RamRomStatsSRVResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import accerion_driver_msgs.msg

class RamRomStatsSRVResponse(genpy.Message):
  _md5sum = "f929a081cee331427f8c52eba3b62cee"
  _type = "accerion_driver_msgs/RamRomStatsSRVResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success   				# indicate successful run of triggered service
RamRomStats stats

================================================================================
MSG: accerion_driver_msgs/RamRomStats
uint32 romAvailable
uint32 romTotal
uint32 sdAvailable
uint32 sdTotal
uint16 ramUsed
uint16 ramTotal
DirSizePart[] parts
================================================================================
MSG: accerion_driver_msgs/DirSizePart
uint16 type
uint32 sizeInMB
uint32 nameLength
string name"""
  __slots__ = ['success','stats']
  _slot_types = ['bool','accerion_driver_msgs/RamRomStats']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RamRomStatsSRVResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.stats is None:
        self.stats = accerion_driver_msgs.msg.RamRomStats()
    else:
      self.success = False
      self.stats = accerion_driver_msgs.msg.RamRomStats()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4I2H().pack(_x.success, _x.stats.romAvailable, _x.stats.romTotal, _x.stats.sdAvailable, _x.stats.sdTotal, _x.stats.ramUsed, _x.stats.ramTotal))
      length = len(self.stats.parts)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats.parts:
        _x = val1
        buff.write(_get_struct_H2I().pack(_x.type, _x.sizeInMB, _x.nameLength))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stats is None:
        self.stats = accerion_driver_msgs.msg.RamRomStats()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.success, _x.stats.romAvailable, _x.stats.romTotal, _x.stats.sdAvailable, _x.stats.sdTotal, _x.stats.ramUsed, _x.stats.ramTotal,) = _get_struct_B4I2H().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats.parts = []
      for i in range(0, length):
        val1 = accerion_driver_msgs.msg.DirSizePart()
        _x = val1
        start = end
        end += 10
        (_x.type, _x.sizeInMB, _x.nameLength,) = _get_struct_H2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        self.stats.parts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4I2H().pack(_x.success, _x.stats.romAvailable, _x.stats.romTotal, _x.stats.sdAvailable, _x.stats.sdTotal, _x.stats.ramUsed, _x.stats.ramTotal))
      length = len(self.stats.parts)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats.parts:
        _x = val1
        buff.write(_get_struct_H2I().pack(_x.type, _x.sizeInMB, _x.nameLength))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stats is None:
        self.stats = accerion_driver_msgs.msg.RamRomStats()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.success, _x.stats.romAvailable, _x.stats.romTotal, _x.stats.sdAvailable, _x.stats.sdTotal, _x.stats.ramUsed, _x.stats.ramTotal,) = _get_struct_B4I2H().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats.parts = []
      for i in range(0, length):
        val1 = accerion_driver_msgs.msg.DirSizePart()
        _x = val1
        start = end
        end += 10
        (_x.type, _x.sizeInMB, _x.nameLength,) = _get_struct_H2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        self.stats.parts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4I2H = None
def _get_struct_B4I2H():
    global _struct_B4I2H
    if _struct_B4I2H is None:
        _struct_B4I2H = struct.Struct("<B4I2H")
    return _struct_B4I2H
_struct_H2I = None
def _get_struct_H2I():
    global _struct_H2I
    if _struct_H2I is None:
        _struct_H2I = struct.Struct("<H2I")
    return _struct_H2I
class RamRomStatsSRV(object):
  _type          = 'accerion_driver_msgs/RamRomStatsSRV'
  _md5sum = 'f929a081cee331427f8c52eba3b62cee'
  _request_class  = RamRomStatsSRVRequest
  _response_class = RamRomStatsSRVResponse
