# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from accerion_driver_msgs/SecondaryLFRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SecondaryLFRequest(genpy.Message):
  _md5sum = "e0a9a4b847ac5299245224ada02c00e0"
  _type = "accerion_driver_msgs/SecondaryLFRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 clusterID	      # uint16_t ID of the Cluster that you want the closest point of
"""
  __slots__ = ['clusterID']
  _slot_types = ['uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clusterID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SecondaryLFRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.clusterID is None:
        self.clusterID = 0
    else:
      self.clusterID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.clusterID
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.clusterID,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.clusterID
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.clusterID,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from accerion_driver_msgs/SecondaryLFResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SecondaryLFResponse(genpy.Message):
  _md5sum = "9fffb73d647782f825b2796e38e707ab"
  _type = "accerion_driver_msgs/SecondaryLFResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success   	      # indicate successful run of triggered service
string message 	      # informational, e.g. for error messages
uint64 timeStamp             # Timestamp when the message was made
float32 x                    # Position of the sensor in meters x
float32 y                    # Position of the sensor in meters y
float32 heading              # Heading of the sensor in degrees
float32 closestPointX        # Closest point on line in meters x
float32 closestPointY        # Closest point on line in meters y
float32 line_heading         # heading of the line on closest point
uint16 clusterID             # ClusterID of the requested cluster line

"""
  __slots__ = ['success','message','timeStamp','x','y','heading','closestPointX','closestPointY','line_heading','clusterID']
  _slot_types = ['bool','string','uint64','float32','float32','float32','float32','float32','float32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message,timeStamp,x,y,heading,closestPointX,closestPointY,line_heading,clusterID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SecondaryLFResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
      if self.timeStamp is None:
        self.timeStamp = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.heading is None:
        self.heading = 0.
      if self.closestPointX is None:
        self.closestPointX = 0.
      if self.closestPointY is None:
        self.closestPointY = 0.
      if self.line_heading is None:
        self.line_heading = 0.
      if self.clusterID is None:
        self.clusterID = 0
    else:
      self.success = False
      self.message = ''
      self.timeStamp = 0
      self.x = 0.
      self.y = 0.
      self.heading = 0.
      self.closestPointX = 0.
      self.closestPointY = 0.
      self.line_heading = 0.
      self.clusterID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q6fH().pack(_x.timeStamp, _x.x, _x.y, _x.heading, _x.closestPointX, _x.closestPointY, _x.line_heading, _x.clusterID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.timeStamp, _x.x, _x.y, _x.heading, _x.closestPointX, _x.closestPointY, _x.line_heading, _x.clusterID,) = _get_struct_Q6fH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q6fH().pack(_x.timeStamp, _x.x, _x.y, _x.heading, _x.closestPointX, _x.closestPointY, _x.line_heading, _x.clusterID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.timeStamp, _x.x, _x.y, _x.heading, _x.closestPointX, _x.closestPointY, _x.line_heading, _x.clusterID,) = _get_struct_Q6fH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Q6fH = None
def _get_struct_Q6fH():
    global _struct_Q6fH
    if _struct_Q6fH is None:
        _struct_Q6fH = struct.Struct("<Q6fH")
    return _struct_Q6fH
class SecondaryLF(object):
  _type          = 'accerion_driver_msgs/SecondaryLF'
  _md5sum = '941d90c566e891f5d4b78bfaff569951'
  _request_class  = SecondaryLFRequest
  _response_class = SecondaryLFResponse
