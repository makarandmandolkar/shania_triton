# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from accerion_driver_msgs/DriftCorrectionDetails.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class DriftCorrectionDetails(genpy.Message):
  _md5sum = "6dee6f706294700ef373c89c1963dda5"
  _type = "accerion_driver_msgs/DriftCorrectionDetails"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseWithCovariance new_corrected_pose  # corrected pose in reference frame

float32 correction_x                    		# corrected position error [m] in +x direction in reference frame
float32 correction_y                   		    # corrected position error [m] in +y direction in reference frame
float32 correction_heading              		# corrected orientation error [rad] in +z direction in reference frame
float32 error_heading_deg                  	    # orientation error [deg] in +z direction in reference frame
float32 correct_heading_deg                 	# correct (new) orientation [deg] in +z direction in reference frame

float32 cumulative_traveled_distance     		# cumulative traveled linear distance since last drift correction
float32 cumulative_traveled_rotation     		# cumulative traveled rotational distance since last drift correction
float32 error_percentage 			   		    # (preliminary) simple positional accuracy figure
uint16   cluster_id 					   		# ID of the cluster on which the drift correction is based

uint8   acq_quality_estimate             		# quality estimate

float32 reserved1     		                    #
float32 reserved2     		                    #
float32 reserved3 			   		            #
================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['new_corrected_pose','correction_x','correction_y','correction_heading','error_heading_deg','correct_heading_deg','cumulative_traveled_distance','cumulative_traveled_rotation','error_percentage','cluster_id','acq_quality_estimate','reserved1','reserved2','reserved3']
  _slot_types = ['geometry_msgs/PoseWithCovariance','float32','float32','float32','float32','float32','float32','float32','float32','uint16','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       new_corrected_pose,correction_x,correction_y,correction_heading,error_heading_deg,correct_heading_deg,cumulative_traveled_distance,cumulative_traveled_rotation,error_percentage,cluster_id,acq_quality_estimate,reserved1,reserved2,reserved3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriftCorrectionDetails, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.new_corrected_pose is None:
        self.new_corrected_pose = geometry_msgs.msg.PoseWithCovariance()
      if self.correction_x is None:
        self.correction_x = 0.
      if self.correction_y is None:
        self.correction_y = 0.
      if self.correction_heading is None:
        self.correction_heading = 0.
      if self.error_heading_deg is None:
        self.error_heading_deg = 0.
      if self.correct_heading_deg is None:
        self.correct_heading_deg = 0.
      if self.cumulative_traveled_distance is None:
        self.cumulative_traveled_distance = 0.
      if self.cumulative_traveled_rotation is None:
        self.cumulative_traveled_rotation = 0.
      if self.error_percentage is None:
        self.error_percentage = 0.
      if self.cluster_id is None:
        self.cluster_id = 0
      if self.acq_quality_estimate is None:
        self.acq_quality_estimate = 0
      if self.reserved1 is None:
        self.reserved1 = 0.
      if self.reserved2 is None:
        self.reserved2 = 0.
      if self.reserved3 is None:
        self.reserved3 = 0.
    else:
      self.new_corrected_pose = geometry_msgs.msg.PoseWithCovariance()
      self.correction_x = 0.
      self.correction_y = 0.
      self.correction_heading = 0.
      self.error_heading_deg = 0.
      self.correct_heading_deg = 0.
      self.cumulative_traveled_distance = 0.
      self.cumulative_traveled_rotation = 0.
      self.error_percentage = 0.
      self.cluster_id = 0
      self.acq_quality_estimate = 0
      self.reserved1 = 0.
      self.reserved2 = 0.
      self.reserved3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.new_corrected_pose.pose.position.x, _x.new_corrected_pose.pose.position.y, _x.new_corrected_pose.pose.position.z, _x.new_corrected_pose.pose.orientation.x, _x.new_corrected_pose.pose.orientation.y, _x.new_corrected_pose.pose.orientation.z, _x.new_corrected_pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.new_corrected_pose.covariance))
      _x = self
      buff.write(_get_struct_8fHB3f().pack(_x.correction_x, _x.correction_y, _x.correction_heading, _x.error_heading_deg, _x.correct_heading_deg, _x.cumulative_traveled_distance, _x.cumulative_traveled_rotation, _x.error_percentage, _x.cluster_id, _x.acq_quality_estimate, _x.reserved1, _x.reserved2, _x.reserved3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.new_corrected_pose is None:
        self.new_corrected_pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.new_corrected_pose.pose.position.x, _x.new_corrected_pose.pose.position.y, _x.new_corrected_pose.pose.position.z, _x.new_corrected_pose.pose.orientation.x, _x.new_corrected_pose.pose.orientation.y, _x.new_corrected_pose.pose.orientation.z, _x.new_corrected_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.new_corrected_pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 47
      (_x.correction_x, _x.correction_y, _x.correction_heading, _x.error_heading_deg, _x.correct_heading_deg, _x.cumulative_traveled_distance, _x.cumulative_traveled_rotation, _x.error_percentage, _x.cluster_id, _x.acq_quality_estimate, _x.reserved1, _x.reserved2, _x.reserved3,) = _get_struct_8fHB3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.new_corrected_pose.pose.position.x, _x.new_corrected_pose.pose.position.y, _x.new_corrected_pose.pose.position.z, _x.new_corrected_pose.pose.orientation.x, _x.new_corrected_pose.pose.orientation.y, _x.new_corrected_pose.pose.orientation.z, _x.new_corrected_pose.pose.orientation.w))
      buff.write(self.new_corrected_pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_8fHB3f().pack(_x.correction_x, _x.correction_y, _x.correction_heading, _x.error_heading_deg, _x.correct_heading_deg, _x.cumulative_traveled_distance, _x.cumulative_traveled_rotation, _x.error_percentage, _x.cluster_id, _x.acq_quality_estimate, _x.reserved1, _x.reserved2, _x.reserved3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.new_corrected_pose is None:
        self.new_corrected_pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.new_corrected_pose.pose.position.x, _x.new_corrected_pose.pose.position.y, _x.new_corrected_pose.pose.position.z, _x.new_corrected_pose.pose.orientation.x, _x.new_corrected_pose.pose.orientation.y, _x.new_corrected_pose.pose.orientation.z, _x.new_corrected_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.new_corrected_pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 47
      (_x.correction_x, _x.correction_y, _x.correction_heading, _x.error_heading_deg, _x.correct_heading_deg, _x.cumulative_traveled_distance, _x.cumulative_traveled_rotation, _x.error_percentage, _x.cluster_id, _x.acq_quality_estimate, _x.reserved1, _x.reserved2, _x.reserved3,) = _get_struct_8fHB3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_8fHB3f = None
def _get_struct_8fHB3f():
    global _struct_8fHB3f
    if _struct_8fHB3f is None:
        _struct_8fHB3f = struct.Struct("<8fHB3f")
    return _struct_8fHB3f
