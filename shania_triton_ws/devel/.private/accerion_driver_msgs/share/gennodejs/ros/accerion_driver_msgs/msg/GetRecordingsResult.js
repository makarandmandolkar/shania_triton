// Auto-generated. Do not edit!

// (in-package accerion_driver_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class GetRecordingsResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.recordings = null;
      this.done = null;
      this.success = null;
      this.message = null;
    }
    else {
      if (initObj.hasOwnProperty('recordings')) {
        this.recordings = initObj.recordings
      }
      else {
        this.recordings = [];
      }
      if (initObj.hasOwnProperty('done')) {
        this.done = initObj.done
      }
      else {
        this.done = false;
      }
      if (initObj.hasOwnProperty('success')) {
        this.success = initObj.success
      }
      else {
        this.success = false;
      }
      if (initObj.hasOwnProperty('message')) {
        this.message = initObj.message
      }
      else {
        this.message = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GetRecordingsResult
    // Serialize message field [recordings]
    bufferOffset = _arraySerializer.string(obj.recordings, buffer, bufferOffset, null);
    // Serialize message field [done]
    bufferOffset = _serializer.bool(obj.done, buffer, bufferOffset);
    // Serialize message field [success]
    bufferOffset = _serializer.bool(obj.success, buffer, bufferOffset);
    // Serialize message field [message]
    bufferOffset = _serializer.string(obj.message, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GetRecordingsResult
    let len;
    let data = new GetRecordingsResult(null);
    // Deserialize message field [recordings]
    data.recordings = _arrayDeserializer.string(buffer, bufferOffset, null)
    // Deserialize message field [done]
    data.done = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [success]
    data.success = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [message]
    data.message = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.recordings.forEach((val) => {
      length += 4 + val.length;
    });
    length += object.message.length;
    return length + 10;
  }

  static datatype() {
    // Returns string type for a message object
    return 'accerion_driver_msgs/GetRecordingsResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '592b29fce47652d4ecfd82dcf834c677';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # result
    string[] recordings 	    # names of the recordings on the sensor
    bool done                   # sets the action to a finite state
    bool success                # boolean that holds whether the request has been made
    string message              # message that contains information about the request(success/failure etc.)
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GetRecordingsResult(null);
    if (msg.recordings !== undefined) {
      resolved.recordings = msg.recordings;
    }
    else {
      resolved.recordings = []
    }

    if (msg.done !== undefined) {
      resolved.done = msg.done;
    }
    else {
      resolved.done = false
    }

    if (msg.success !== undefined) {
      resolved.success = msg.success;
    }
    else {
      resolved.success = false
    }

    if (msg.message !== undefined) {
      resolved.message = msg.message;
    }
    else {
      resolved.message = ''
    }

    return resolved;
    }
};

module.exports = GetRecordingsResult;
