// Auto-generated. Do not edit!

// (in-package accerion_driver_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class SubsetMapGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.clusterIDs = null;
      this.targetAreaID = null;
    }
    else {
      if (initObj.hasOwnProperty('clusterIDs')) {
        this.clusterIDs = initObj.clusterIDs
      }
      else {
        this.clusterIDs = '';
      }
      if (initObj.hasOwnProperty('targetAreaID')) {
        this.targetAreaID = initObj.targetAreaID
      }
      else {
        this.targetAreaID = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SubsetMapGoal
    // Serialize message field [clusterIDs]
    bufferOffset = _serializer.string(obj.clusterIDs, buffer, bufferOffset);
    // Serialize message field [targetAreaID]
    bufferOffset = _serializer.uint16(obj.targetAreaID, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SubsetMapGoal
    let len;
    let data = new SubsetMapGoal(null);
    // Deserialize message field [clusterIDs]
    data.clusterIDs = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [targetAreaID]
    data.targetAreaID = _deserializer.uint16(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.clusterIDs.length;
    return length + 6;
  }

  static datatype() {
    // Returns string type for a message object
    return 'accerion_driver_msgs/SubsetMapGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ebb07f5655f1c030657a7fb8af794413';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # goal
    string clusterIDs           # idxs of the clusters to be moved(e.g. 0-100,102)
    uint16 targetAreaID         # id of the targetArea, has to be unused/empty
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SubsetMapGoal(null);
    if (msg.clusterIDs !== undefined) {
      resolved.clusterIDs = msg.clusterIDs;
    }
    else {
      resolved.clusterIDs = ''
    }

    if (msg.targetAreaID !== undefined) {
      resolved.targetAreaID = msg.targetAreaID;
    }
    else {
      resolved.targetAreaID = 0
    }

    return resolved;
    }
};

module.exports = SubsetMapGoal;
