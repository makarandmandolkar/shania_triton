;; Auto-generated. Do not edit!


(when (boundp 'accerion_driver_msgs::GetRecordingsResult)
  (if (not (find-package "ACCERION_DRIVER_MSGS"))
    (make-package "ACCERION_DRIVER_MSGS"))
  (shadow 'GetRecordingsResult (find-package "ACCERION_DRIVER_MSGS")))
(unless (find-package "ACCERION_DRIVER_MSGS::GETRECORDINGSRESULT")
  (make-package "ACCERION_DRIVER_MSGS::GETRECORDINGSRESULT"))

(in-package "ROS")
;;//! \htmlinclude GetRecordingsResult.msg.html


(defclass accerion_driver_msgs::GetRecordingsResult
  :super ros::object
  :slots (_recordings _done _success _message ))

(defmethod accerion_driver_msgs::GetRecordingsResult
  (:init
   (&key
    ((:recordings __recordings) (let (r) (dotimes (i 0) (push "" r)) r))
    ((:done __done) nil)
    ((:success __success) nil)
    ((:message __message) "")
    )
   (send-super :init)
   (setq _recordings __recordings)
   (setq _done __done)
   (setq _success __success)
   (setq _message (string __message))
   self)
  (:recordings
   (&optional __recordings)
   (if __recordings (setq _recordings __recordings)) _recordings)
  (:done
   (&optional __done)
   (if __done (setq _done __done)) _done)
  (:success
   (&optional __success)
   (if __success (setq _success __success)) _success)
  (:message
   (&optional __message)
   (if __message (setq _message __message)) _message)
  (:serialization-length
   ()
   (+
    ;; string[] _recordings
    (apply #'+ (mapcar #'(lambda (x) (+ 4 (length x))) _recordings)) 4
    ;; bool _done
    1
    ;; bool _success
    1
    ;; string _message
    4 (length _message)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string[] _recordings
     (write-long (length _recordings) s)
     (dolist (elem _recordings)
       (write-long (length elem) s) (princ elem s)
       )
     ;; bool _done
       (if _done (write-byte -1 s) (write-byte 0 s))
     ;; bool _success
       (if _success (write-byte -1 s) (write-byte 0 s))
     ;; string _message
       (write-long (length _message) s) (princ _message s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string[] _recordings
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _recordings (make-list n))
     (dotimes (i n)
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setf (elt _recordings i) (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
     ))
   ;; bool _done
     (setq _done (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _success
     (setq _success (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; string _message
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _message (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get accerion_driver_msgs::GetRecordingsResult :md5sum-) "592b29fce47652d4ecfd82dcf834c677")
(setf (get accerion_driver_msgs::GetRecordingsResult :datatype-) "accerion_driver_msgs/GetRecordingsResult")
(setf (get accerion_driver_msgs::GetRecordingsResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
string[] recordings 	    # names of the recordings on the sensor
bool done                   # sets the action to a finite state
bool success                # boolean that holds whether the request has been made
string message              # message that contains information about the request(success/failure etc.)

")



(provide :accerion_driver_msgs/GetRecordingsResult "592b29fce47652d4ecfd82dcf834c677")


