;; Auto-generated. Do not edit!


(when (boundp 'accerion_driver_msgs::SubsetMapResult)
  (if (not (find-package "ACCERION_DRIVER_MSGS"))
    (make-package "ACCERION_DRIVER_MSGS"))
  (shadow 'SubsetMapResult (find-package "ACCERION_DRIVER_MSGS")))
(unless (find-package "ACCERION_DRIVER_MSGS::SUBSETMAPRESULT")
  (make-package "ACCERION_DRIVER_MSGS::SUBSETMAPRESULT"))

(in-package "ROS")
;;//! \htmlinclude SubsetMapResult.msg.html


(defclass accerion_driver_msgs::SubsetMapResult
  :super ros::object
  :slots (_done _success _message _failedIDs ))

(defmethod accerion_driver_msgs::SubsetMapResult
  (:init
   (&key
    ((:done __done) nil)
    ((:success __success) nil)
    ((:message __message) "")
    ((:failedIDs __failedIDs) (make-array 0 :initial-element 0 :element-type :integer))
    )
   (send-super :init)
   (setq _done __done)
   (setq _success __success)
   (setq _message (string __message))
   (setq _failedIDs __failedIDs)
   self)
  (:done
   (&optional __done)
   (if __done (setq _done __done)) _done)
  (:success
   (&optional __success)
   (if __success (setq _success __success)) _success)
  (:message
   (&optional __message)
   (if __message (setq _message __message)) _message)
  (:failedIDs
   (&optional __failedIDs)
   (if __failedIDs (setq _failedIDs __failedIDs)) _failedIDs)
  (:serialization-length
   ()
   (+
    ;; bool _done
    1
    ;; bool _success
    1
    ;; string _message
    4 (length _message)
    ;; uint16[] _failedIDs
    (* 2    (length _failedIDs)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _done
       (if _done (write-byte -1 s) (write-byte 0 s))
     ;; bool _success
       (if _success (write-byte -1 s) (write-byte 0 s))
     ;; string _message
       (write-long (length _message) s) (princ _message s)
     ;; uint16[] _failedIDs
     (write-long (length _failedIDs) s)
     (dotimes (i (length _failedIDs))
       (write-word (elt _failedIDs i) s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _done
     (setq _done (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _success
     (setq _success (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; string _message
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _message (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; uint16[] _failedIDs
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _failedIDs (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _failedIDs i) (sys::peek buf ptr- :short)) (incf ptr- 2)
     ))
   ;;
   self)
  )

(setf (get accerion_driver_msgs::SubsetMapResult :md5sum-) "fb4f07909349905bd624c9f52bdc4c8f")
(setf (get accerion_driver_msgs::SubsetMapResult :datatype-) "accerion_driver_msgs/SubsetMapResult")
(setf (get accerion_driver_msgs::SubsetMapResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
bool done                   # sets the action to a finite state
bool success                # bool that holds whether the request was succesful
string message              # message containing information about the result
uint16[] failedIDs          # ID's of the clusters that could not be found and/or copied

")



(provide :accerion_driver_msgs/SubsetMapResult "fb4f07909349905bd624c9f52bdc4c8f")


