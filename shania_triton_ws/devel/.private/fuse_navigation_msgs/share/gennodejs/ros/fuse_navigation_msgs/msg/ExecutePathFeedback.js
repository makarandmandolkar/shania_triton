// Auto-generated. Do not edit!

// (in-package fuse_navigation_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class ExecutePathFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.status = null;
      this.completed_nodes = null;
      this.remaining_nodes = null;
      this.percent_complete = null;
      this.distance_to_end = null;
      this.distance_to_next_node = null;
    }
    else {
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = '';
      }
      if (initObj.hasOwnProperty('completed_nodes')) {
        this.completed_nodes = initObj.completed_nodes
      }
      else {
        this.completed_nodes = [];
      }
      if (initObj.hasOwnProperty('remaining_nodes')) {
        this.remaining_nodes = initObj.remaining_nodes
      }
      else {
        this.remaining_nodes = [];
      }
      if (initObj.hasOwnProperty('percent_complete')) {
        this.percent_complete = initObj.percent_complete
      }
      else {
        this.percent_complete = 0.0;
      }
      if (initObj.hasOwnProperty('distance_to_end')) {
        this.distance_to_end = initObj.distance_to_end
      }
      else {
        this.distance_to_end = 0.0;
      }
      if (initObj.hasOwnProperty('distance_to_next_node')) {
        this.distance_to_next_node = initObj.distance_to_next_node
      }
      else {
        this.distance_to_next_node = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ExecutePathFeedback
    // Serialize message field [status]
    bufferOffset = _serializer.string(obj.status, buffer, bufferOffset);
    // Serialize message field [completed_nodes]
    bufferOffset = _arraySerializer.string(obj.completed_nodes, buffer, bufferOffset, null);
    // Serialize message field [remaining_nodes]
    bufferOffset = _arraySerializer.string(obj.remaining_nodes, buffer, bufferOffset, null);
    // Serialize message field [percent_complete]
    bufferOffset = _serializer.float64(obj.percent_complete, buffer, bufferOffset);
    // Serialize message field [distance_to_end]
    bufferOffset = _serializer.float64(obj.distance_to_end, buffer, bufferOffset);
    // Serialize message field [distance_to_next_node]
    bufferOffset = _serializer.float64(obj.distance_to_next_node, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ExecutePathFeedback
    let len;
    let data = new ExecutePathFeedback(null);
    // Deserialize message field [status]
    data.status = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [completed_nodes]
    data.completed_nodes = _arrayDeserializer.string(buffer, bufferOffset, null)
    // Deserialize message field [remaining_nodes]
    data.remaining_nodes = _arrayDeserializer.string(buffer, bufferOffset, null)
    // Deserialize message field [percent_complete]
    data.percent_complete = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [distance_to_end]
    data.distance_to_end = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [distance_to_next_node]
    data.distance_to_next_node = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.status.length;
    object.completed_nodes.forEach((val) => {
      length += 4 + val.length;
    });
    object.remaining_nodes.forEach((val) => {
      length += 4 + val.length;
    });
    return length + 36;
  }

  static datatype() {
    // Returns string type for a message object
    return 'fuse_navigation_msgs/ExecutePathFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '9a7ee1c7269b2a6d4a5cae7a717b3329';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback
    string status
    string[] completed_nodes # List of the completed node ids
    string[] remaining_nodes # List of the nodes that have not yet been completed
    float64 percent_complete # Percent of the full path distance that has been traversed (0-100)
    float64 distance_to_end  # Distance in meters (along path) to the end of the path
    float64 distance_to_next_node # Distance in meters (along path) to the next node
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ExecutePathFeedback(null);
    if (msg.status !== undefined) {
      resolved.status = msg.status;
    }
    else {
      resolved.status = ''
    }

    if (msg.completed_nodes !== undefined) {
      resolved.completed_nodes = msg.completed_nodes;
    }
    else {
      resolved.completed_nodes = []
    }

    if (msg.remaining_nodes !== undefined) {
      resolved.remaining_nodes = msg.remaining_nodes;
    }
    else {
      resolved.remaining_nodes = []
    }

    if (msg.percent_complete !== undefined) {
      resolved.percent_complete = msg.percent_complete;
    }
    else {
      resolved.percent_complete = 0.0
    }

    if (msg.distance_to_end !== undefined) {
      resolved.distance_to_end = msg.distance_to_end;
    }
    else {
      resolved.distance_to_end = 0.0
    }

    if (msg.distance_to_next_node !== undefined) {
      resolved.distance_to_next_node = msg.distance_to_next_node;
    }
    else {
      resolved.distance_to_next_node = 0.0
    }

    return resolved;
    }
};

module.exports = ExecutePathFeedback;
