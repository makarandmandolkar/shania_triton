// Generated by gencpp from file fuse_pathfollowing_msgs/PIDMetrics.msg
// DO NOT EDIT!


#ifndef FUSE_PATHFOLLOWING_MSGS_MESSAGE_PIDMETRICS_H
#define FUSE_PATHFOLLOWING_MSGS_MESSAGE_PIDMETRICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fuse_pathfollowing_msgs
{
template <class ContainerAllocator>
struct PIDMetrics_
{
  typedef PIDMetrics_<ContainerAllocator> Type;

  PIDMetrics_()
    : p_effort(0.0)
    , i_effort(0.0)
    , d_effort(0.0)
    , total_effort(0.0)  {
    }
  PIDMetrics_(const ContainerAllocator& _alloc)
    : p_effort(0.0)
    , i_effort(0.0)
    , d_effort(0.0)
    , total_effort(0.0)  {
  (void)_alloc;
    }



   typedef double _p_effort_type;
  _p_effort_type p_effort;

   typedef double _i_effort_type;
  _i_effort_type i_effort;

   typedef double _d_effort_type;
  _d_effort_type d_effort;

   typedef double _total_effort_type;
  _total_effort_type total_effort;





  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> const> ConstPtr;

}; // struct PIDMetrics_

typedef ::fuse_pathfollowing_msgs::PIDMetrics_<std::allocator<void> > PIDMetrics;

typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::PIDMetrics > PIDMetricsPtr;
typedef boost::shared_ptr< ::fuse_pathfollowing_msgs::PIDMetrics const> PIDMetricsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator2> & rhs)
{
  return lhs.p_effort == rhs.p_effort &&
    lhs.i_effort == rhs.i_effort &&
    lhs.d_effort == rhs.d_effort &&
    lhs.total_effort == rhs.total_effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator1> & lhs, const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_pathfollowing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5f1ade5268ff3fd49169efd23b304bd";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5f1ade5268ff3fdULL;
  static const uint64_t static_value2 = 0x49169efd23b304bdULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_pathfollowing_msgs/PIDMetrics";
  }

  static const char* value(const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 p_effort\n"
"float64 i_effort\n"
"float64 d_effort\n"
"float64 total_effort\n"
;
  }

  static const char* value(const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p_effort);
      stream.next(m.i_effort);
      stream.next(m.d_effort);
      stream.next(m.total_effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDMetrics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_pathfollowing_msgs::PIDMetrics_<ContainerAllocator>& v)
  {
    s << indent << "p_effort: ";
    Printer<double>::stream(s, indent + "  ", v.p_effort);
    s << indent << "i_effort: ";
    Printer<double>::stream(s, indent + "  ", v.i_effort);
    s << indent << "d_effort: ";
    Printer<double>::stream(s, indent + "  ", v.d_effort);
    s << indent << "total_effort: ";
    Printer<double>::stream(s, indent + "  ", v.total_effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_PATHFOLLOWING_MSGS_MESSAGE_PIDMETRICS_H
