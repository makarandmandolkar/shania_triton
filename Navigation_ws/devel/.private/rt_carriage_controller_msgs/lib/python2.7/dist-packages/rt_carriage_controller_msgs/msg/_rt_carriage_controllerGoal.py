# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_carriage_controller_msgs/rt_carriage_controllerGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rt_carriage_controllerGoal(genpy.Message):
  _md5sum = "7e6c7501f66c1b8ed00a522d5a5aab57"
  _type = "rt_carriage_controller_msgs/rt_carriage_controllerGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal
int32 MOVE_UNDEFINED_REQUEST=0
int32 MOVE_ABSOLUTE      =1
int32 MOVE_RELATIVE      =2
int32 CALIBRATE_REACH    =3
int32 CALIBRATE_LIFT     =4
int32 CALIBRATE_TILT     =5
int32 CALIBRATE_SIDESHIFT =6

int32 move_type_enum

float64 position_Goal
float32 position_tolerance
int32 mission_type_enum
int32 MISSION_PICK = 1
int32 MISSION_PLACE = 2
int32 SENSOR_NO_SENSE                              =7
int32 SENSOR_REACH_PAYLOAD_SENSE_LINEAR_CHANGE     =8
int32 SENSOR_REACH_PAYLOAD_SENSE_NO_CHANGE         =9
int32 SENSOR_REACH_FORKTIP_SENSE_COLLISION_CHANGE  =10
int32 SENSOR_REACH_UNTIL_FORKTIP_SENSE_SENSE_VALUE =11
int32 SENSOR_LIFT_UNTIL_LASER_READING =12
int32 sensor_type_enum

float64 forktip_distance

"""
  # Pseudo-constants
  MOVE_UNDEFINED_REQUEST = 0
  MOVE_ABSOLUTE = 1
  MOVE_RELATIVE = 2
  CALIBRATE_REACH = 3
  CALIBRATE_LIFT = 4
  CALIBRATE_TILT = 5
  CALIBRATE_SIDESHIFT = 6
  MISSION_PICK = 1
  MISSION_PLACE = 2
  SENSOR_NO_SENSE = 7
  SENSOR_REACH_PAYLOAD_SENSE_LINEAR_CHANGE = 8
  SENSOR_REACH_PAYLOAD_SENSE_NO_CHANGE = 9
  SENSOR_REACH_FORKTIP_SENSE_COLLISION_CHANGE = 10
  SENSOR_REACH_UNTIL_FORKTIP_SENSE_SENSE_VALUE = 11
  SENSOR_LIFT_UNTIL_LASER_READING = 12

  __slots__ = ['move_type_enum','position_Goal','position_tolerance','mission_type_enum','sensor_type_enum','forktip_distance']
  _slot_types = ['int32','float64','float32','int32','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       move_type_enum,position_Goal,position_tolerance,mission_type_enum,sensor_type_enum,forktip_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rt_carriage_controllerGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.move_type_enum is None:
        self.move_type_enum = 0
      if self.position_Goal is None:
        self.position_Goal = 0.
      if self.position_tolerance is None:
        self.position_tolerance = 0.
      if self.mission_type_enum is None:
        self.mission_type_enum = 0
      if self.sensor_type_enum is None:
        self.sensor_type_enum = 0
      if self.forktip_distance is None:
        self.forktip_distance = 0.
    else:
      self.move_type_enum = 0
      self.position_Goal = 0.
      self.position_tolerance = 0.
      self.mission_type_enum = 0
      self.sensor_type_enum = 0
      self.forktip_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_idf2id().pack(_x.move_type_enum, _x.position_Goal, _x.position_tolerance, _x.mission_type_enum, _x.sensor_type_enum, _x.forktip_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.move_type_enum, _x.position_Goal, _x.position_tolerance, _x.mission_type_enum, _x.sensor_type_enum, _x.forktip_distance,) = _get_struct_idf2id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_idf2id().pack(_x.move_type_enum, _x.position_Goal, _x.position_tolerance, _x.mission_type_enum, _x.sensor_type_enum, _x.forktip_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.move_type_enum, _x.position_Goal, _x.position_tolerance, _x.mission_type_enum, _x.sensor_type_enum, _x.forktip_distance,) = _get_struct_idf2id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_idf2id = None
def _get_struct_idf2id():
    global _struct_idf2id
    if _struct_idf2id is None:
        _struct_idf2id = struct.Struct("<idf2id")
    return _struct_idf2id
