// Generated by gencpp from file rt_carriage_controller_msgs/rt_carriage_controllerGoal.msg
// DO NOT EDIT!


#ifndef RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERGOAL_H
#define RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_carriage_controller_msgs
{
template <class ContainerAllocator>
struct rt_carriage_controllerGoal_
{
  typedef rt_carriage_controllerGoal_<ContainerAllocator> Type;

  rt_carriage_controllerGoal_()
    : move_type_enum(0)
    , position_Goal(0.0)
    , position_tolerance(0.0)
    , mission_type_enum(0)
    , sensor_type_enum(0)
    , forktip_distance(0.0)  {
    }
  rt_carriage_controllerGoal_(const ContainerAllocator& _alloc)
    : move_type_enum(0)
    , position_Goal(0.0)
    , position_tolerance(0.0)
    , mission_type_enum(0)
    , sensor_type_enum(0)
    , forktip_distance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _move_type_enum_type;
  _move_type_enum_type move_type_enum;

   typedef double _position_Goal_type;
  _position_Goal_type position_Goal;

   typedef float _position_tolerance_type;
  _position_tolerance_type position_tolerance;

   typedef int32_t _mission_type_enum_type;
  _mission_type_enum_type mission_type_enum;

   typedef int32_t _sensor_type_enum_type;
  _sensor_type_enum_type sensor_type_enum;

   typedef double _forktip_distance_type;
  _forktip_distance_type forktip_distance;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOVE_UNDEFINED_REQUEST)
  #undef MOVE_UNDEFINED_REQUEST
#endif
#if defined(_WIN32) && defined(MOVE_ABSOLUTE)
  #undef MOVE_ABSOLUTE
#endif
#if defined(_WIN32) && defined(MOVE_RELATIVE)
  #undef MOVE_RELATIVE
#endif
#if defined(_WIN32) && defined(CALIBRATE_REACH)
  #undef CALIBRATE_REACH
#endif
#if defined(_WIN32) && defined(CALIBRATE_LIFT)
  #undef CALIBRATE_LIFT
#endif
#if defined(_WIN32) && defined(CALIBRATE_TILT)
  #undef CALIBRATE_TILT
#endif
#if defined(_WIN32) && defined(CALIBRATE_SIDESHIFT)
  #undef CALIBRATE_SIDESHIFT
#endif
#if defined(_WIN32) && defined(MISSION_PICK)
  #undef MISSION_PICK
#endif
#if defined(_WIN32) && defined(MISSION_PLACE)
  #undef MISSION_PLACE
#endif
#if defined(_WIN32) && defined(SENSOR_NO_SENSE)
  #undef SENSOR_NO_SENSE
#endif
#if defined(_WIN32) && defined(SENSOR_REACH_PAYLOAD_SENSE_LINEAR_CHANGE)
  #undef SENSOR_REACH_PAYLOAD_SENSE_LINEAR_CHANGE
#endif
#if defined(_WIN32) && defined(SENSOR_REACH_PAYLOAD_SENSE_NO_CHANGE)
  #undef SENSOR_REACH_PAYLOAD_SENSE_NO_CHANGE
#endif
#if defined(_WIN32) && defined(SENSOR_REACH_FORKTIP_SENSE_COLLISION_CHANGE)
  #undef SENSOR_REACH_FORKTIP_SENSE_COLLISION_CHANGE
#endif
#if defined(_WIN32) && defined(SENSOR_REACH_UNTIL_FORKTIP_SENSE_SENSE_VALUE)
  #undef SENSOR_REACH_UNTIL_FORKTIP_SENSE_SENSE_VALUE
#endif
#if defined(_WIN32) && defined(SENSOR_LIFT_UNTIL_LASER_READING)
  #undef SENSOR_LIFT_UNTIL_LASER_READING
#endif

  enum {
    MOVE_UNDEFINED_REQUEST = 0,
    MOVE_ABSOLUTE = 1,
    MOVE_RELATIVE = 2,
    CALIBRATE_REACH = 3,
    CALIBRATE_LIFT = 4,
    CALIBRATE_TILT = 5,
    CALIBRATE_SIDESHIFT = 6,
    MISSION_PICK = 1,
    MISSION_PLACE = 2,
    SENSOR_NO_SENSE = 7,
    SENSOR_REACH_PAYLOAD_SENSE_LINEAR_CHANGE = 8,
    SENSOR_REACH_PAYLOAD_SENSE_NO_CHANGE = 9,
    SENSOR_REACH_FORKTIP_SENSE_COLLISION_CHANGE = 10,
    SENSOR_REACH_UNTIL_FORKTIP_SENSE_SENSE_VALUE = 11,
    SENSOR_LIFT_UNTIL_LASER_READING = 12,
  };


  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct rt_carriage_controllerGoal_

typedef ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<std::allocator<void> > rt_carriage_controllerGoal;

typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal > rt_carriage_controllerGoalPtr;
typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal const> rt_carriage_controllerGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.move_type_enum == rhs.move_type_enum &&
    lhs.position_Goal == rhs.position_Goal &&
    lhs.position_tolerance == rhs.position_tolerance &&
    lhs.mission_type_enum == rhs.mission_type_enum &&
    lhs.sensor_type_enum == rhs.sensor_type_enum &&
    lhs.forktip_distance == rhs.forktip_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_carriage_controller_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e6c7501f66c1b8ed00a522d5a5aab57";
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e6c7501f66c1b8eULL;
  static const uint64_t static_value2 = 0xd00a522d5a5aab57ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_carriage_controller_msgs/rt_carriage_controllerGoal";
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"int32 MOVE_UNDEFINED_REQUEST=0\n"
"int32 MOVE_ABSOLUTE      =1\n"
"int32 MOVE_RELATIVE      =2\n"
"int32 CALIBRATE_REACH    =3\n"
"int32 CALIBRATE_LIFT     =4\n"
"int32 CALIBRATE_TILT     =5\n"
"int32 CALIBRATE_SIDESHIFT =6\n"
"\n"
"int32 move_type_enum\n"
"\n"
"float64 position_Goal\n"
"float32 position_tolerance\n"
"int32 mission_type_enum\n"
"int32 MISSION_PICK = 1\n"
"int32 MISSION_PLACE = 2\n"
"int32 SENSOR_NO_SENSE                              =7\n"
"int32 SENSOR_REACH_PAYLOAD_SENSE_LINEAR_CHANGE     =8\n"
"int32 SENSOR_REACH_PAYLOAD_SENSE_NO_CHANGE         =9\n"
"int32 SENSOR_REACH_FORKTIP_SENSE_COLLISION_CHANGE  =10\n"
"int32 SENSOR_REACH_UNTIL_FORKTIP_SENSE_SENSE_VALUE =11\n"
"int32 SENSOR_LIFT_UNTIL_LASER_READING =12\n"
"int32 sensor_type_enum\n"
"\n"
"float64 forktip_distance\n"
"\n"
;
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_type_enum);
      stream.next(m.position_Goal);
      stream.next(m.position_tolerance);
      stream.next(m.mission_type_enum);
      stream.next(m.sensor_type_enum);
      stream.next(m.forktip_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rt_carriage_controllerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_carriage_controller_msgs::rt_carriage_controllerGoal_<ContainerAllocator>& v)
  {
    s << indent << "move_type_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.move_type_enum);
    s << indent << "position_Goal: ";
    Printer<double>::stream(s, indent + "  ", v.position_Goal);
    s << indent << "position_tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.position_tolerance);
    s << indent << "mission_type_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mission_type_enum);
    s << indent << "sensor_type_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_type_enum);
    s << indent << "forktip_distance: ";
    Printer<double>::stream(s, indent + "  ", v.forktip_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERGOAL_H
