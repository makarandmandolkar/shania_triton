// Generated by gencpp from file rt_carriage_controller_msgs/rt_carriage_controllerFeedback.msg
// DO NOT EDIT!


#ifndef RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERFEEDBACK_H
#define RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_carriage_controller_msgs
{
template <class ContainerAllocator>
struct rt_carriage_controllerFeedback_
{
  typedef rt_carriage_controllerFeedback_<ContainerAllocator> Type;

  rt_carriage_controllerFeedback_()
    : percentage_finished(0.0)  {
    }
  rt_carriage_controllerFeedback_(const ContainerAllocator& _alloc)
    : percentage_finished(0.0)  {
  (void)_alloc;
    }



   typedef double _percentage_finished_type;
  _percentage_finished_type percentage_finished;





  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct rt_carriage_controllerFeedback_

typedef ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<std::allocator<void> > rt_carriage_controllerFeedback;

typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback > rt_carriage_controllerFeedbackPtr;
typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback const> rt_carriage_controllerFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.percentage_finished == rhs.percentage_finished;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_carriage_controller_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9095a553dcd7ab17f485835d069ce951";
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9095a553dcd7ab17ULL;
  static const uint64_t static_value2 = 0xf485835d069ce951ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_carriage_controller_msgs/rt_carriage_controllerFeedback";
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float64 percentage_finished\n"
"\n"
"\n"
;
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percentage_finished);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rt_carriage_controllerFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_carriage_controller_msgs::rt_carriage_controllerFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percentage_finished: ";
    Printer<double>::stream(s, indent + "  ", v.percentage_finished);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERFEEDBACK_H
