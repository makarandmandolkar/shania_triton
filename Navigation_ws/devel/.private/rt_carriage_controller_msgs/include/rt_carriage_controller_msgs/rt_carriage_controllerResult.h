// Generated by gencpp from file rt_carriage_controller_msgs/rt_carriage_controllerResult.msg
// DO NOT EDIT!


#ifndef RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERRESULT_H
#define RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_carriage_controller_msgs
{
template <class ContainerAllocator>
struct rt_carriage_controllerResult_
{
  typedef rt_carriage_controllerResult_<ContainerAllocator> Type;

  rt_carriage_controllerResult_()
    : success_Result(false)
    , error_enum(0)
    , exceeded_distance(0.0)
    , allowable_distance(0.0)
    , final_position(0.0)  {
    }
  rt_carriage_controllerResult_(const ContainerAllocator& _alloc)
    : success_Result(false)
    , error_enum(0)
    , exceeded_distance(0.0)
    , allowable_distance(0.0)
    , final_position(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_Result_type;
  _success_Result_type success_Result;

   typedef int32_t _error_enum_type;
  _error_enum_type error_enum;

   typedef double _exceeded_distance_type;
  _exceeded_distance_type exceeded_distance;

   typedef double _allowable_distance_type;
  _allowable_distance_type allowable_distance;

   typedef double _final_position_type;
  _final_position_type final_position;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_EXCEEDED_TRAVEL)
  #undef ERROR_EXCEEDED_TRAVEL
#endif
#if defined(_WIN32) && defined(ERROR_TIMEOUT)
  #undef ERROR_TIMEOUT
#endif
#if defined(_WIN32) && defined(ERROR_UNDEFINED_MOVE_TYPE)
  #undef ERROR_UNDEFINED_MOVE_TYPE
#endif
#if defined(_WIN32) && defined(ERROR_UNDEFINED_SENSOR_TYPE)
  #undef ERROR_UNDEFINED_SENSOR_TYPE
#endif
#if defined(_WIN32) && defined(ERROR_STALL_DETECTED)
  #undef ERROR_STALL_DETECTED
#endif
#if defined(_WIN32) && defined(ERROR_DEADMAN_IS_OFF)
  #undef ERROR_DEADMAN_IS_OFF
#endif

  enum {
    ERROR_EXCEEDED_TRAVEL = 0,
    ERROR_TIMEOUT = 1,
    ERROR_UNDEFINED_MOVE_TYPE = 2,
    ERROR_UNDEFINED_SENSOR_TYPE = 3,
    ERROR_STALL_DETECTED = 4,
    ERROR_DEADMAN_IS_OFF = 5,
  };


  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> const> ConstPtr;

}; // struct rt_carriage_controllerResult_

typedef ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<std::allocator<void> > rt_carriage_controllerResult;

typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerResult > rt_carriage_controllerResultPtr;
typedef boost::shared_ptr< ::rt_carriage_controller_msgs::rt_carriage_controllerResult const> rt_carriage_controllerResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator2> & rhs)
{
  return lhs.success_Result == rhs.success_Result &&
    lhs.error_enum == rhs.error_enum &&
    lhs.exceeded_distance == rhs.exceeded_distance &&
    lhs.allowable_distance == rhs.allowable_distance &&
    lhs.final_position == rhs.final_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_carriage_controller_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9a785add0c2594557fbcf2f8da28b75";
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9a785add0c25945ULL;
  static const uint64_t static_value2 = 0x57fbcf2f8da28b75ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_carriage_controller_msgs/rt_carriage_controllerResult";
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"bool success_Result\n"
"\n"
"int32 ERROR_EXCEEDED_TRAVEL=0\n"
"int32 ERROR_TIMEOUT=1\n"
"int32 ERROR_UNDEFINED_MOVE_TYPE=2\n"
"int32 ERROR_UNDEFINED_SENSOR_TYPE=3\n"
"int32 ERROR_STALL_DETECTED=4\n"
"int32 ERROR_DEADMAN_IS_OFF=5\n"
"\n"
"int32 error_enum\n"
"\n"
"float64 exceeded_distance\n"
"float64 allowable_distance\n"
"float64 final_position\n"
;
  }

  static const char* value(const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success_Result);
      stream.next(m.error_enum);
      stream.next(m.exceeded_distance);
      stream.next(m.allowable_distance);
      stream.next(m.final_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rt_carriage_controllerResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_carriage_controller_msgs::rt_carriage_controllerResult_<ContainerAllocator>& v)
  {
    s << indent << "success_Result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success_Result);
    s << indent << "error_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_enum);
    s << indent << "exceeded_distance: ";
    Printer<double>::stream(s, indent + "  ", v.exceeded_distance);
    s << indent << "allowable_distance: ";
    Printer<double>::stream(s, indent + "  ", v.allowable_distance);
    s << indent << "final_position: ";
    Printer<double>::stream(s, indent + "  ", v.final_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_RT_CARRIAGE_CONTROLLERRESULT_H
