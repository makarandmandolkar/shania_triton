// Generated by gencpp from file rt_carriage_controller_msgs/carriage_sensor_diagnostics.msg
// DO NOT EDIT!


#ifndef RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_CARRIAGE_SENSOR_DIAGNOSTICS_H
#define RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_CARRIAGE_SENSOR_DIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_carriage_controller_msgs
{
template <class ContainerAllocator>
struct carriage_sensor_diagnostics_
{
  typedef carriage_sensor_diagnostics_<ContainerAllocator> Type;

  carriage_sensor_diagnostics_()
    : name()
    , raw_data()
    , filtered_data()
    , position()  {
      raw_data.assign(0.0);

      filtered_data.assign(0.0);

      position.assign(0.0);
  }
  carriage_sensor_diagnostics_(const ContainerAllocator& _alloc)
    : name()
    , raw_data()
    , filtered_data()
    , position()  {
      name.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));

      raw_data.assign(0.0);

      filtered_data.assign(0.0);

      position.assign(0.0);
  }



   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 6>  _name_type;
  _name_type name;

   typedef boost::array<double, 6>  _raw_data_type;
  _raw_data_type raw_data;

   typedef boost::array<double, 6>  _filtered_data_type;
  _filtered_data_type filtered_data;

   typedef boost::array<double, 6>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct carriage_sensor_diagnostics_

typedef ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<std::allocator<void> > carriage_sensor_diagnostics;

typedef boost::shared_ptr< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics > carriage_sensor_diagnosticsPtr;
typedef boost::shared_ptr< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics const> carriage_sensor_diagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.raw_data == rhs.raw_data &&
    lhs.filtered_data == rhs.filtered_data &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator1> & lhs, const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_carriage_controller_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0617ade47f8a69926360e2cca79d5e22";
  }

  static const char* value(const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0617ade47f8a6992ULL;
  static const uint64_t static_value2 = 0x6360e2cca79d5e22ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_carriage_controller_msgs/carriage_sensor_diagnostics";
  }

  static const char* value(const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[6] name\n"
"float64[6] raw_data\n"
"float64[6] filtered_data\n"
"float64[6] position\n"
;
  }

  static const char* value(const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.raw_data);
      stream.next(m.filtered_data);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct carriage_sensor_diagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_carriage_controller_msgs::carriage_sensor_diagnostics_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "raw_data[]" << std::endl;
    for (size_t i = 0; i < v.raw_data.size(); ++i)
    {
      s << indent << "  raw_data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.raw_data[i]);
    }
    s << indent << "filtered_data[]" << std::endl;
    for (size_t i = 0; i < v.filtered_data.size(); ++i)
    {
      s << indent << "  filtered_data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.filtered_data[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_CARRIAGE_CONTROLLER_MSGS_MESSAGE_CARRIAGE_SENSOR_DIAGNOSTICS_H
