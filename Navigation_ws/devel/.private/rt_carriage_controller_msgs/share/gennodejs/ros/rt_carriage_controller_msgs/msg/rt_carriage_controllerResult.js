// Auto-generated. Do not edit!

// (in-package rt_carriage_controller_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class rt_carriage_controllerResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.success_Result = null;
      this.error_enum = null;
      this.exceeded_distance = null;
      this.allowable_distance = null;
      this.final_position = null;
    }
    else {
      if (initObj.hasOwnProperty('success_Result')) {
        this.success_Result = initObj.success_Result
      }
      else {
        this.success_Result = false;
      }
      if (initObj.hasOwnProperty('error_enum')) {
        this.error_enum = initObj.error_enum
      }
      else {
        this.error_enum = 0;
      }
      if (initObj.hasOwnProperty('exceeded_distance')) {
        this.exceeded_distance = initObj.exceeded_distance
      }
      else {
        this.exceeded_distance = 0.0;
      }
      if (initObj.hasOwnProperty('allowable_distance')) {
        this.allowable_distance = initObj.allowable_distance
      }
      else {
        this.allowable_distance = 0.0;
      }
      if (initObj.hasOwnProperty('final_position')) {
        this.final_position = initObj.final_position
      }
      else {
        this.final_position = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type rt_carriage_controllerResult
    // Serialize message field [success_Result]
    bufferOffset = _serializer.bool(obj.success_Result, buffer, bufferOffset);
    // Serialize message field [error_enum]
    bufferOffset = _serializer.int32(obj.error_enum, buffer, bufferOffset);
    // Serialize message field [exceeded_distance]
    bufferOffset = _serializer.float64(obj.exceeded_distance, buffer, bufferOffset);
    // Serialize message field [allowable_distance]
    bufferOffset = _serializer.float64(obj.allowable_distance, buffer, bufferOffset);
    // Serialize message field [final_position]
    bufferOffset = _serializer.float64(obj.final_position, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type rt_carriage_controllerResult
    let len;
    let data = new rt_carriage_controllerResult(null);
    // Deserialize message field [success_Result]
    data.success_Result = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [error_enum]
    data.error_enum = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [exceeded_distance]
    data.exceeded_distance = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [allowable_distance]
    data.allowable_distance = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [final_position]
    data.final_position = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 29;
  }

  static datatype() {
    // Returns string type for a message object
    return 'rt_carriage_controller_msgs/rt_carriage_controllerResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'd9a785add0c2594557fbcf2f8da28b75';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    bool success_Result
    
    int32 ERROR_EXCEEDED_TRAVEL=0
    int32 ERROR_TIMEOUT=1
    int32 ERROR_UNDEFINED_MOVE_TYPE=2
    int32 ERROR_UNDEFINED_SENSOR_TYPE=3
    int32 ERROR_STALL_DETECTED=4
    int32 ERROR_DEADMAN_IS_OFF=5
    
    int32 error_enum
    
    float64 exceeded_distance
    float64 allowable_distance
    float64 final_position
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new rt_carriage_controllerResult(null);
    if (msg.success_Result !== undefined) {
      resolved.success_Result = msg.success_Result;
    }
    else {
      resolved.success_Result = false
    }

    if (msg.error_enum !== undefined) {
      resolved.error_enum = msg.error_enum;
    }
    else {
      resolved.error_enum = 0
    }

    if (msg.exceeded_distance !== undefined) {
      resolved.exceeded_distance = msg.exceeded_distance;
    }
    else {
      resolved.exceeded_distance = 0.0
    }

    if (msg.allowable_distance !== undefined) {
      resolved.allowable_distance = msg.allowable_distance;
    }
    else {
      resolved.allowable_distance = 0.0
    }

    if (msg.final_position !== undefined) {
      resolved.final_position = msg.final_position;
    }
    else {
      resolved.final_position = 0.0
    }

    return resolved;
    }
};

// Constants for message
rt_carriage_controllerResult.Constants = {
  ERROR_EXCEEDED_TRAVEL: 0,
  ERROR_TIMEOUT: 1,
  ERROR_UNDEFINED_MOVE_TYPE: 2,
  ERROR_UNDEFINED_SENSOR_TYPE: 3,
  ERROR_STALL_DETECTED: 4,
  ERROR_DEADMAN_IS_OFF: 5,
}

module.exports = rt_carriage_controllerResult;
