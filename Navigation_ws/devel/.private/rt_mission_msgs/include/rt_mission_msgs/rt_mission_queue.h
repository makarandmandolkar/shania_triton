// Generated by gencpp from file rt_mission_msgs/rt_mission_queue.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_RT_MISSION_QUEUE_H
#define RT_MISSION_MSGS_MESSAGE_RT_MISSION_QUEUE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rt_mission_msgs/rt_mission.h>

namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct rt_mission_queue_
{
  typedef rt_mission_queue_<ContainerAllocator> Type;

  rt_mission_queue_()
    : mission_queue()
    , mission_queue_index(0)  {
    }
  rt_mission_queue_(const ContainerAllocator& _alloc)
    : mission_queue(_alloc)
    , mission_queue_index(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::rt_mission_msgs::rt_mission_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >::other >  _mission_queue_type;
  _mission_queue_type mission_queue;

   typedef int32_t _mission_queue_index_type;
  _mission_queue_index_type mission_queue_index;





  typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> const> ConstPtr;

}; // struct rt_mission_queue_

typedef ::rt_mission_msgs::rt_mission_queue_<std::allocator<void> > rt_mission_queue;

typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission_queue > rt_mission_queuePtr;
typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission_queue const> rt_mission_queueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator2> & rhs)
{
  return lhs.mission_queue == rhs.mission_queue &&
    lhs.mission_queue_index == rhs.mission_queue_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca28651d6271b7ac52eca2ec6cfb8a4f";
  }

  static const char* value(const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca28651d6271b7acULL;
  static const uint64_t static_value2 = 0x52eca2ec6cfb8a4fULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/rt_mission_queue";
  }

  static const char* value(const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/rt_mission[] mission_queue\n"
"int32 mission_queue_index\n"
"\n"
"================================================================================\n"
"MSG: rt_mission_msgs/rt_mission\n"
"int32 task_enum\n"
"int32 TASK_PICK_AND_PLACE=0\n"
"int32 TASK_PICK=1\n"
"int32 TASK_PLACE=2\n"
"int32 TASK_CHARGE_ROBOT=3\n"
"string status\n"
"string pick_location_name\n"
"string place_location_name\n"
"string pick_stage_name\n"
"string place_stage_name\n"
"geometry_msgs/Pose pick_location\n"
"geometry_msgs/Pose pick_stage_location\n"
"geometry_msgs/Pose place_location\n"
"geometry_msgs/Pose place_stage_location\n"
"string pallet_id\n"
"float32 pick_slot_height\n"
"float32 place_slot_height\n"
"string pick_approach_direction\n"
"string place_approach_direction\n"
"string pick_edge_case_direction\n"
"string place_edge_case_direction\n"
"bool priority\n"
"bool payload_dimension\n"
"float32 mission_complete_time\n"
"float32 mission_distance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_queue);
      stream.next(m.mission_queue_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rt_mission_queue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::rt_mission_queue_<ContainerAllocator>& v)
  {
    s << indent << "mission_queue[]" << std::endl;
    for (size_t i = 0; i < v.mission_queue.size(); ++i)
    {
      s << indent << "  mission_queue[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >::stream(s, indent + "    ", v.mission_queue[i]);
    }
    s << indent << "mission_queue_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mission_queue_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_RT_MISSION_QUEUE_H
