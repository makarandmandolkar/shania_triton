// Generated by gencpp from file rt_mission_msgs/rt_mission.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_RT_MISSION_H
#define RT_MISSION_MSGS_MESSAGE_RT_MISSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct rt_mission_
{
  typedef rt_mission_<ContainerAllocator> Type;

  rt_mission_()
    : task_enum(0)
    , status()
    , pick_location_name()
    , place_location_name()
    , pick_stage_name()
    , place_stage_name()
    , pick_location()
    , pick_stage_location()
    , place_location()
    , place_stage_location()
    , pallet_id()
    , pick_slot_height(0.0)
    , place_slot_height(0.0)
    , pick_approach_direction()
    , place_approach_direction()
    , pick_edge_case_direction()
    , place_edge_case_direction()
    , priority(false)
    , payload_dimension(false)
    , mission_complete_time(0.0)
    , mission_distance(0.0)  {
    }
  rt_mission_(const ContainerAllocator& _alloc)
    : task_enum(0)
    , status(_alloc)
    , pick_location_name(_alloc)
    , place_location_name(_alloc)
    , pick_stage_name(_alloc)
    , place_stage_name(_alloc)
    , pick_location(_alloc)
    , pick_stage_location(_alloc)
    , place_location(_alloc)
    , place_stage_location(_alloc)
    , pallet_id(_alloc)
    , pick_slot_height(0.0)
    , place_slot_height(0.0)
    , pick_approach_direction(_alloc)
    , place_approach_direction(_alloc)
    , pick_edge_case_direction(_alloc)
    , place_edge_case_direction(_alloc)
    , priority(false)
    , payload_dimension(false)
    , mission_complete_time(0.0)
    , mission_distance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _task_enum_type;
  _task_enum_type task_enum;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pick_location_name_type;
  _pick_location_name_type pick_location_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _place_location_name_type;
  _place_location_name_type place_location_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pick_stage_name_type;
  _pick_stage_name_type pick_stage_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _place_stage_name_type;
  _place_stage_name_type place_stage_name;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pick_location_type;
  _pick_location_type pick_location;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pick_stage_location_type;
  _pick_stage_location_type pick_stage_location;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _place_location_type;
  _place_location_type place_location;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _place_stage_location_type;
  _place_stage_location_type place_stage_location;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pallet_id_type;
  _pallet_id_type pallet_id;

   typedef float _pick_slot_height_type;
  _pick_slot_height_type pick_slot_height;

   typedef float _place_slot_height_type;
  _place_slot_height_type place_slot_height;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pick_approach_direction_type;
  _pick_approach_direction_type pick_approach_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _place_approach_direction_type;
  _place_approach_direction_type place_approach_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pick_edge_case_direction_type;
  _pick_edge_case_direction_type pick_edge_case_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _place_edge_case_direction_type;
  _place_edge_case_direction_type place_edge_case_direction;

   typedef uint8_t _priority_type;
  _priority_type priority;

   typedef uint8_t _payload_dimension_type;
  _payload_dimension_type payload_dimension;

   typedef float _mission_complete_time_type;
  _mission_complete_time_type mission_complete_time;

   typedef float _mission_distance_type;
  _mission_distance_type mission_distance;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TASK_PICK_AND_PLACE)
  #undef TASK_PICK_AND_PLACE
#endif
#if defined(_WIN32) && defined(TASK_PICK)
  #undef TASK_PICK
#endif
#if defined(_WIN32) && defined(TASK_PLACE)
  #undef TASK_PLACE
#endif
#if defined(_WIN32) && defined(TASK_CHARGE_ROBOT)
  #undef TASK_CHARGE_ROBOT
#endif

  enum {
    TASK_PICK_AND_PLACE = 0,
    TASK_PICK = 1,
    TASK_PLACE = 2,
    TASK_CHARGE_ROBOT = 3,
  };


  typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission_<ContainerAllocator> const> ConstPtr;

}; // struct rt_mission_

typedef ::rt_mission_msgs::rt_mission_<std::allocator<void> > rt_mission;

typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission > rt_missionPtr;
typedef boost::shared_ptr< ::rt_mission_msgs::rt_mission const> rt_missionConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::rt_mission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::rt_mission_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::rt_mission_<ContainerAllocator2> & rhs)
{
  return lhs.task_enum == rhs.task_enum &&
    lhs.status == rhs.status &&
    lhs.pick_location_name == rhs.pick_location_name &&
    lhs.place_location_name == rhs.place_location_name &&
    lhs.pick_stage_name == rhs.pick_stage_name &&
    lhs.place_stage_name == rhs.place_stage_name &&
    lhs.pick_location == rhs.pick_location &&
    lhs.pick_stage_location == rhs.pick_stage_location &&
    lhs.place_location == rhs.place_location &&
    lhs.place_stage_location == rhs.place_stage_location &&
    lhs.pallet_id == rhs.pallet_id &&
    lhs.pick_slot_height == rhs.pick_slot_height &&
    lhs.place_slot_height == rhs.place_slot_height &&
    lhs.pick_approach_direction == rhs.pick_approach_direction &&
    lhs.place_approach_direction == rhs.place_approach_direction &&
    lhs.pick_edge_case_direction == rhs.pick_edge_case_direction &&
    lhs.place_edge_case_direction == rhs.place_edge_case_direction &&
    lhs.priority == rhs.priority &&
    lhs.payload_dimension == rhs.payload_dimension &&
    lhs.mission_complete_time == rhs.mission_complete_time &&
    lhs.mission_distance == rhs.mission_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::rt_mission_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::rt_mission_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::rt_mission_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::rt_mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::rt_mission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ada315410efb79e7745f34310db12a0";
  }

  static const char* value(const ::rt_mission_msgs::rt_mission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ada315410efb79eULL;
  static const uint64_t static_value2 = 0x7745f34310db12a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/rt_mission";
  }

  static const char* value(const ::rt_mission_msgs::rt_mission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_enum\n"
"int32 TASK_PICK_AND_PLACE=0\n"
"int32 TASK_PICK=1\n"
"int32 TASK_PLACE=2\n"
"int32 TASK_CHARGE_ROBOT=3\n"
"string status\n"
"string pick_location_name\n"
"string place_location_name\n"
"string pick_stage_name\n"
"string place_stage_name\n"
"geometry_msgs/Pose pick_location\n"
"geometry_msgs/Pose pick_stage_location\n"
"geometry_msgs/Pose place_location\n"
"geometry_msgs/Pose place_stage_location\n"
"string pallet_id\n"
"float32 pick_slot_height\n"
"float32 place_slot_height\n"
"string pick_approach_direction\n"
"string place_approach_direction\n"
"string pick_edge_case_direction\n"
"string place_edge_case_direction\n"
"bool priority\n"
"bool payload_dimension\n"
"float32 mission_complete_time\n"
"float32 mission_distance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rt_mission_msgs::rt_mission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_enum);
      stream.next(m.status);
      stream.next(m.pick_location_name);
      stream.next(m.place_location_name);
      stream.next(m.pick_stage_name);
      stream.next(m.place_stage_name);
      stream.next(m.pick_location);
      stream.next(m.pick_stage_location);
      stream.next(m.place_location);
      stream.next(m.place_stage_location);
      stream.next(m.pallet_id);
      stream.next(m.pick_slot_height);
      stream.next(m.place_slot_height);
      stream.next(m.pick_approach_direction);
      stream.next(m.place_approach_direction);
      stream.next(m.pick_edge_case_direction);
      stream.next(m.place_edge_case_direction);
      stream.next(m.priority);
      stream.next(m.payload_dimension);
      stream.next(m.mission_complete_time);
      stream.next(m.mission_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rt_mission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::rt_mission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::rt_mission_<ContainerAllocator>& v)
  {
    s << indent << "task_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_enum);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "pick_location_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pick_location_name);
    s << indent << "place_location_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.place_location_name);
    s << indent << "pick_stage_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pick_stage_name);
    s << indent << "place_stage_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.place_stage_name);
    s << indent << "pick_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pick_location);
    s << indent << "pick_stage_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pick_stage_location);
    s << indent << "place_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.place_location);
    s << indent << "place_stage_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.place_stage_location);
    s << indent << "pallet_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pallet_id);
    s << indent << "pick_slot_height: ";
    Printer<float>::stream(s, indent + "  ", v.pick_slot_height);
    s << indent << "place_slot_height: ";
    Printer<float>::stream(s, indent + "  ", v.place_slot_height);
    s << indent << "pick_approach_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pick_approach_direction);
    s << indent << "place_approach_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.place_approach_direction);
    s << indent << "pick_edge_case_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pick_edge_case_direction);
    s << indent << "place_edge_case_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.place_edge_case_direction);
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "payload_dimension: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.payload_dimension);
    s << indent << "mission_complete_time: ";
    Printer<float>::stream(s, indent + "  ", v.mission_complete_time);
    s << indent << "mission_distance: ";
    Printer<float>::stream(s, indent + "  ", v.mission_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_RT_MISSION_H
