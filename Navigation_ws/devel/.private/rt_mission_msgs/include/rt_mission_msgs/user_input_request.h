// Generated by gencpp from file rt_mission_msgs/user_input_request.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_USER_INPUT_REQUEST_H
#define RT_MISSION_MSGS_MESSAGE_USER_INPUT_REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct user_input_request_
{
  typedef user_input_request_<ContainerAllocator> Type;

  user_input_request_()
    : user_input_msg()
    , input_enum(0)
    , message_handeled(false)  {
    }
  user_input_request_(const ContainerAllocator& _alloc)
    : user_input_msg(_alloc)
    , input_enum(0)
    , message_handeled(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _user_input_msg_type;
  _user_input_msg_type user_input_msg;

   typedef int32_t _input_enum_type;
  _input_enum_type input_enum;

   typedef uint8_t _message_handeled_type;
  _message_handeled_type message_handeled;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(USER_INPUT_CONFIRMATION)
  #undef USER_INPUT_CONFIRMATION
#endif
#if defined(_WIN32) && defined(USER_INPUT_PICK_LOCATION)
  #undef USER_INPUT_PICK_LOCATION
#endif
#if defined(_WIN32) && defined(USER_INPUT_PLACE_LOCATION)
  #undef USER_INPUT_PLACE_LOCATION
#endif

  enum {
    USER_INPUT_CONFIRMATION = 0,
    USER_INPUT_PICK_LOCATION = 1,
    USER_INPUT_PLACE_LOCATION = 2,
  };


  typedef boost::shared_ptr< ::rt_mission_msgs::user_input_request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::user_input_request_<ContainerAllocator> const> ConstPtr;

}; // struct user_input_request_

typedef ::rt_mission_msgs::user_input_request_<std::allocator<void> > user_input_request;

typedef boost::shared_ptr< ::rt_mission_msgs::user_input_request > user_input_requestPtr;
typedef boost::shared_ptr< ::rt_mission_msgs::user_input_request const> user_input_requestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::user_input_request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::user_input_request_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::user_input_request_<ContainerAllocator2> & rhs)
{
  return lhs.user_input_msg == rhs.user_input_msg &&
    lhs.input_enum == rhs.input_enum &&
    lhs.message_handeled == rhs.message_handeled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::user_input_request_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::user_input_request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::user_input_request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::user_input_request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::user_input_request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "091c1a1726a1b2a56375b655091cb478";
  }

  static const char* value(const ::rt_mission_msgs::user_input_request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x091c1a1726a1b2a5ULL;
  static const uint64_t static_value2 = 0x6375b655091cb478ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/user_input_request";
  }

  static const char* value(const ::rt_mission_msgs::user_input_request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string user_input_msg\n"
"int32 input_enum\n"
"int32 USER_INPUT_CONFIRMATION=0\n"
"int32 USER_INPUT_PICK_LOCATION=1\n"
"int32 USER_INPUT_PLACE_LOCATION=2\n"
"bool message_handeled\n"
;
  }

  static const char* value(const ::rt_mission_msgs::user_input_request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.user_input_msg);
      stream.next(m.input_enum);
      stream.next(m.message_handeled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct user_input_request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::user_input_request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::user_input_request_<ContainerAllocator>& v)
  {
    s << indent << "user_input_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.user_input_msg);
    s << indent << "input_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.input_enum);
    s << indent << "message_handeled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_handeled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_USER_INPUT_REQUEST_H
