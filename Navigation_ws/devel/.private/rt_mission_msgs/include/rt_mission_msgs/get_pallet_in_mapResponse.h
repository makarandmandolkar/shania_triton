// Generated by gencpp from file rt_mission_msgs/get_pallet_in_mapResponse.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_GET_PALLET_IN_MAPRESPONSE_H
#define RT_MISSION_MSGS_MESSAGE_GET_PALLET_IN_MAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct get_pallet_in_mapResponse_
{
  typedef get_pallet_in_mapResponse_<ContainerAllocator> Type;

  get_pallet_in_mapResponse_()
    : pallet_pose_in_map()
    , confidence_value(0.0)
    , error_code(0)
    , error_msg()
    , success(false)  {
    }
  get_pallet_in_mapResponse_(const ContainerAllocator& _alloc)
    : pallet_pose_in_map(_alloc)
    , confidence_value(0.0)
    , error_code(0)
    , error_msg(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pallet_pose_in_map_type;
  _pallet_pose_in_map_type pallet_pose_in_map;

   typedef float _confidence_value_type;
  _confidence_value_type confidence_value;

   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_msg_type;
  _error_msg_type error_msg;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct get_pallet_in_mapResponse_

typedef ::rt_mission_msgs::get_pallet_in_mapResponse_<std::allocator<void> > get_pallet_in_mapResponse;

typedef boost::shared_ptr< ::rt_mission_msgs::get_pallet_in_mapResponse > get_pallet_in_mapResponsePtr;
typedef boost::shared_ptr< ::rt_mission_msgs::get_pallet_in_mapResponse const> get_pallet_in_mapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pallet_pose_in_map == rhs.pallet_pose_in_map &&
    lhs.confidence_value == rhs.confidence_value &&
    lhs.error_code == rhs.error_code &&
    lhs.error_msg == rhs.error_msg &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b7bdcbe41ef056f4a2eded3510cbf51";
  }

  static const char* value(const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b7bdcbe41ef056fULL;
  static const uint64_t static_value2 = 0x4a2eded3510cbf51ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/get_pallet_in_mapResponse";
  }

  static const char* value(const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pallet_pose_in_map\n"
"float32 confidence_value\n"
"int32 error_code\n"
"string error_msg\n"
"bool success\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pallet_pose_in_map);
      stream.next(m.confidence_value);
      stream.next(m.error_code);
      stream.next(m.error_msg);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_pallet_in_mapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::get_pallet_in_mapResponse_<ContainerAllocator>& v)
  {
    s << indent << "pallet_pose_in_map: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pallet_pose_in_map);
    s << indent << "confidence_value: ";
    Printer<float>::stream(s, indent + "  ", v.confidence_value);
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_msg);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_GET_PALLET_IN_MAPRESPONSE_H
