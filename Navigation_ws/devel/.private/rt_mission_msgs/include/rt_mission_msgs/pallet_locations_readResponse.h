// Generated by gencpp from file rt_mission_msgs/pallet_locations_readResponse.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_PALLET_LOCATIONS_READRESPONSE_H
#define RT_MISSION_MSGS_MESSAGE_PALLET_LOCATIONS_READRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct pallet_locations_readResponse_
{
  typedef pallet_locations_readResponse_<ContainerAllocator> Type;

  pallet_locations_readResponse_()
    : pallet_location_names()
    , pallet_ids()  {
    }
  pallet_locations_readResponse_(const ContainerAllocator& _alloc)
    : pallet_location_names(_alloc)
    , pallet_ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _pallet_location_names_type;
  _pallet_location_names_type pallet_location_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _pallet_ids_type;
  _pallet_ids_type pallet_ids;





  typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pallet_locations_readResponse_

typedef ::rt_mission_msgs::pallet_locations_readResponse_<std::allocator<void> > pallet_locations_readResponse;

typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_readResponse > pallet_locations_readResponsePtr;
typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_readResponse const> pallet_locations_readResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pallet_location_names == rhs.pallet_location_names &&
    lhs.pallet_ids == rhs.pallet_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd7004084a8c6b852a1a973d12608609";
  }

  static const char* value(const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd7004084a8c6b85ULL;
  static const uint64_t static_value2 = 0x2a1a973d12608609ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/pallet_locations_readResponse";
  }

  static const char* value(const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] pallet_location_names\n"
"string[] pallet_ids\n"
"\n"
;
  }

  static const char* value(const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pallet_location_names);
      stream.next(m.pallet_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pallet_locations_readResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::pallet_locations_readResponse_<ContainerAllocator>& v)
  {
    s << indent << "pallet_location_names[]" << std::endl;
    for (size_t i = 0; i < v.pallet_location_names.size(); ++i)
    {
      s << indent << "  pallet_location_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pallet_location_names[i]);
    }
    s << indent << "pallet_ids[]" << std::endl;
    for (size_t i = 0; i < v.pallet_ids.size(); ++i)
    {
      s << indent << "  pallet_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pallet_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_PALLET_LOCATIONS_READRESPONSE_H
