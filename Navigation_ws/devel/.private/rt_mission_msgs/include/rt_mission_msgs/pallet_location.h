// Generated by gencpp from file rt_mission_msgs/pallet_location.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_PALLET_LOCATION_H
#define RT_MISSION_MSGS_MESSAGE_PALLET_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct pallet_location_
{
  typedef pallet_location_<ContainerAllocator> Type;

  pallet_location_()
    : location_name()
    , map_location()
    , location_id()  {
    }
  pallet_location_(const ContainerAllocator& _alloc)
    : location_name(_alloc)
    , map_location(_alloc)
    , location_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_name_type;
  _location_name_type location_name;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _map_location_type;
  _map_location_type map_location;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_id_type;
  _location_id_type location_id;





  typedef boost::shared_ptr< ::rt_mission_msgs::pallet_location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::pallet_location_<ContainerAllocator> const> ConstPtr;

}; // struct pallet_location_

typedef ::rt_mission_msgs::pallet_location_<std::allocator<void> > pallet_location;

typedef boost::shared_ptr< ::rt_mission_msgs::pallet_location > pallet_locationPtr;
typedef boost::shared_ptr< ::rt_mission_msgs::pallet_location const> pallet_locationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::pallet_location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::pallet_location_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::pallet_location_<ContainerAllocator2> & rhs)
{
  return lhs.location_name == rhs.location_name &&
    lhs.map_location == rhs.map_location &&
    lhs.location_id == rhs.location_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::pallet_location_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::pallet_location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::pallet_location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::pallet_location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::pallet_location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df6b2a914d117d0714ccbfe4bb9b70f0";
  }

  static const char* value(const ::rt_mission_msgs::pallet_location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf6b2a914d117d07ULL;
  static const uint64_t static_value2 = 0x14ccbfe4bb9b70f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/pallet_location";
  }

  static const char* value(const ::rt_mission_msgs::pallet_location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string location_name\n"
"geometry_msgs/Pose map_location\n"
"string location_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rt_mission_msgs::pallet_location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location_name);
      stream.next(m.map_location);
      stream.next(m.location_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pallet_location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::pallet_location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::pallet_location_<ContainerAllocator>& v)
  {
    s << indent << "location_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.location_name);
    s << indent << "map_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.map_location);
    s << indent << "location_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.location_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_PALLET_LOCATION_H
