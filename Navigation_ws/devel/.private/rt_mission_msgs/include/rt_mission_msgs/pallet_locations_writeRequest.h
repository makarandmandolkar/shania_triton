// Generated by gencpp from file rt_mission_msgs/pallet_locations_writeRequest.msg
// DO NOT EDIT!


#ifndef RT_MISSION_MSGS_MESSAGE_PALLET_LOCATIONS_WRITEREQUEST_H
#define RT_MISSION_MSGS_MESSAGE_PALLET_LOCATIONS_WRITEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt_mission_msgs
{
template <class ContainerAllocator>
struct pallet_locations_writeRequest_
{
  typedef pallet_locations_writeRequest_<ContainerAllocator> Type;

  pallet_locations_writeRequest_()
    : pick_location_name()
    , place_location_name()
    , pallet_id()
    , priority(false)
    , payload_dimension(false)  {
    }
  pallet_locations_writeRequest_(const ContainerAllocator& _alloc)
    : pick_location_name(_alloc)
    , place_location_name(_alloc)
    , pallet_id(_alloc)
    , priority(false)
    , payload_dimension(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pick_location_name_type;
  _pick_location_name_type pick_location_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _place_location_name_type;
  _place_location_name_type place_location_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pallet_id_type;
  _pallet_id_type pallet_id;

   typedef uint8_t _priority_type;
  _priority_type priority;

   typedef uint8_t _payload_dimension_type;
  _payload_dimension_type payload_dimension;





  typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pallet_locations_writeRequest_

typedef ::rt_mission_msgs::pallet_locations_writeRequest_<std::allocator<void> > pallet_locations_writeRequest;

typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_writeRequest > pallet_locations_writeRequestPtr;
typedef boost::shared_ptr< ::rt_mission_msgs::pallet_locations_writeRequest const> pallet_locations_writeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pick_location_name == rhs.pick_location_name &&
    lhs.place_location_name == rhs.place_location_name &&
    lhs.pallet_id == rhs.pallet_id &&
    lhs.priority == rhs.priority &&
    lhs.payload_dimension == rhs.payload_dimension;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator1> & lhs, const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt_mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2e94aeef1c8d856a93691cbd1486dd1";
  }

  static const char* value(const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2e94aeef1c8d856ULL;
  static const uint64_t static_value2 = 0xa93691cbd1486dd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt_mission_msgs/pallet_locations_writeRequest";
  }

  static const char* value(const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string pick_location_name\n"
"string place_location_name\n"
"string pallet_id\n"
"bool priority\n"
"bool payload_dimension\n"
"\n"
;
  }

  static const char* value(const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pick_location_name);
      stream.next(m.place_location_name);
      stream.next(m.pallet_id);
      stream.next(m.priority);
      stream.next(m.payload_dimension);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pallet_locations_writeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt_mission_msgs::pallet_locations_writeRequest_<ContainerAllocator>& v)
  {
    s << indent << "pick_location_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pick_location_name);
    s << indent << "place_location_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.place_location_name);
    s << indent << "pallet_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pallet_id);
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "payload_dimension: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.payload_dimension);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT_MISSION_MSGS_MESSAGE_PALLET_LOCATIONS_WRITEREQUEST_H
