# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_mission_msgs/get_pallet_in_mapRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class get_pallet_in_mapRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "rt_mission_msgs/get_pallet_in_mapRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(get_pallet_in_mapRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_mission_msgs/get_pallet_in_mapResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class get_pallet_in_mapResponse(genpy.Message):
  _md5sum = "5b7bdcbe41ef056f4a2eded3510cbf51"
  _type = "rt_mission_msgs/get_pallet_in_mapResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose pallet_pose_in_map
float32 confidence_value
int32 error_code
string error_msg
bool success


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['pallet_pose_in_map','confidence_value','error_code','error_msg','success']
  _slot_types = ['geometry_msgs/Pose','float32','int32','string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pallet_pose_in_map,confidence_value,error_code,error_msg,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(get_pallet_in_mapResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pallet_pose_in_map is None:
        self.pallet_pose_in_map = geometry_msgs.msg.Pose()
      if self.confidence_value is None:
        self.confidence_value = 0.
      if self.error_code is None:
        self.error_code = 0
      if self.error_msg is None:
        self.error_msg = ''
      if self.success is None:
        self.success = False
    else:
      self.pallet_pose_in_map = geometry_msgs.msg.Pose()
      self.confidence_value = 0.
      self.error_code = 0
      self.error_msg = ''
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7dfi().pack(_x.pallet_pose_in_map.position.x, _x.pallet_pose_in_map.position.y, _x.pallet_pose_in_map.position.z, _x.pallet_pose_in_map.orientation.x, _x.pallet_pose_in_map.orientation.y, _x.pallet_pose_in_map.orientation.z, _x.pallet_pose_in_map.orientation.w, _x.confidence_value, _x.error_code))
      _x = self.error_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pallet_pose_in_map is None:
        self.pallet_pose_in_map = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.pallet_pose_in_map.position.x, _x.pallet_pose_in_map.position.y, _x.pallet_pose_in_map.position.z, _x.pallet_pose_in_map.orientation.x, _x.pallet_pose_in_map.orientation.y, _x.pallet_pose_in_map.orientation.z, _x.pallet_pose_in_map.orientation.w, _x.confidence_value, _x.error_code,) = _get_struct_7dfi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_msg = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7dfi().pack(_x.pallet_pose_in_map.position.x, _x.pallet_pose_in_map.position.y, _x.pallet_pose_in_map.position.z, _x.pallet_pose_in_map.orientation.x, _x.pallet_pose_in_map.orientation.y, _x.pallet_pose_in_map.orientation.z, _x.pallet_pose_in_map.orientation.w, _x.confidence_value, _x.error_code))
      _x = self.error_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pallet_pose_in_map is None:
        self.pallet_pose_in_map = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.pallet_pose_in_map.position.x, _x.pallet_pose_in_map.position.y, _x.pallet_pose_in_map.position.z, _x.pallet_pose_in_map.orientation.x, _x.pallet_pose_in_map.orientation.y, _x.pallet_pose_in_map.orientation.z, _x.pallet_pose_in_map.orientation.w, _x.confidence_value, _x.error_code,) = _get_struct_7dfi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_msg = str[start:end]
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7dfi = None
def _get_struct_7dfi():
    global _struct_7dfi
    if _struct_7dfi is None:
        _struct_7dfi = struct.Struct("<7dfi")
    return _struct_7dfi
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class get_pallet_in_map(object):
  _type          = 'rt_mission_msgs/get_pallet_in_map'
  _md5sum = '5b7bdcbe41ef056f4a2eded3510cbf51'
  _request_class  = get_pallet_in_mapRequest
  _response_class = get_pallet_in_mapResponse
