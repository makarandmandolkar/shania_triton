# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_mission_msgs/mobile_robot_pick_and_placeAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import rt_mission_msgs.msg
import std_msgs.msg

class mobile_robot_pick_and_placeAction(genpy.Message):
  _md5sum = "7947413ba193e5279f133e0b7b78224b"
  _type = "rt_mission_msgs/mobile_robot_pick_and_placeAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

mobile_robot_pick_and_placeActionGoal action_goal
mobile_robot_pick_and_placeActionResult action_result
mobile_robot_pick_and_placeActionFeedback action_feedback

================================================================================
MSG: rt_mission_msgs/mobile_robot_pick_and_placeActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
mobile_robot_pick_and_placeGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: rt_mission_msgs/mobile_robot_pick_and_placeGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
rt_mission_msgs/rt_mission mission

================================================================================
MSG: rt_mission_msgs/rt_mission
int32 task_enum
int32 TASK_PICK_AND_PLACE=0
int32 TASK_PICK=1
int32 TASK_PLACE=2
int32 TASK_CHARGE_ROBOT=3
string status
string pick_location_name
string place_location_name
string pick_stage_name
string place_stage_name
geometry_msgs/Pose pick_location
geometry_msgs/Pose pick_stage_location
geometry_msgs/Pose place_location
geometry_msgs/Pose place_stage_location
string pallet_id
float32 pick_slot_height
float32 place_slot_height
string pick_approach_direction
string place_approach_direction
string pick_edge_case_direction
string place_edge_case_direction
bool priority
bool payload_dimension
float32 mission_complete_time
float32 mission_distance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: rt_mission_msgs/mobile_robot_pick_and_placeActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
mobile_robot_pick_and_placeResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: rt_mission_msgs/mobile_robot_pick_and_placeResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
bool success_Result
float32 mission_complete_time
float32 mission_distance

int32 ERROR_GENERIC_ERROR=0
int32 ERROR_PALLET_NOT_FOUND=1
int32 ERROR_PALLET_OUT_OF_POSITION=2
int32 ERROR_PLACE_LOCATION_NOT_CLEAR=3
int32 ERROR_UNDEFINED_SENSOR_TYPE=4
int32 ERROR_CARRIAGE_MOTION_FAILED=5
int32 ERROR_NAVIGATION_ERROR=6
int32 ERROR_SAFETY_COMMUNICATION_ERROR=7
int32 ERROR_DEADMAN_TIMED_OUT=8
int32 ERROR_OVERSIZED_PAYLOAD=9
int32 ERROR_LOAD_ALREADY_ON_PALLET_FOR_PICK=10

float32 exceeded_distance
int32 error_enum

================================================================================
MSG: rt_mission_msgs/mobile_robot_pick_and_placeActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
mobile_robot_pick_and_placeFeedback feedback

================================================================================
MSG: rt_mission_msgs/mobile_robot_pick_and_placeFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
string feedback
float64 percentage_finished

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['rt_mission_msgs/mobile_robot_pick_and_placeActionGoal','rt_mission_msgs/mobile_robot_pick_and_placeActionResult','rt_mission_msgs/mobile_robot_pick_and_placeActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mobile_robot_pick_and_placeAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionGoal()
      if self.action_result is None:
        self.action_result = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionResult()
      if self.action_feedback is None:
        self.action_feedback = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionFeedback()
    else:
      self.action_goal = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionGoal()
      self.action_result = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionResult()
      self.action_feedback = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.task_enum
      buff.write(_get_struct_i().pack(_x))
      _x = self.action_goal.goal.mission.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.pick_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.pick_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_28d().pack(_x.action_goal.goal.mission.pick_location.position.x, _x.action_goal.goal.mission.pick_location.position.y, _x.action_goal.goal.mission.pick_location.position.z, _x.action_goal.goal.mission.pick_location.orientation.x, _x.action_goal.goal.mission.pick_location.orientation.y, _x.action_goal.goal.mission.pick_location.orientation.z, _x.action_goal.goal.mission.pick_location.orientation.w, _x.action_goal.goal.mission.pick_stage_location.position.x, _x.action_goal.goal.mission.pick_stage_location.position.y, _x.action_goal.goal.mission.pick_stage_location.position.z, _x.action_goal.goal.mission.pick_stage_location.orientation.x, _x.action_goal.goal.mission.pick_stage_location.orientation.y, _x.action_goal.goal.mission.pick_stage_location.orientation.z, _x.action_goal.goal.mission.pick_stage_location.orientation.w, _x.action_goal.goal.mission.place_location.position.x, _x.action_goal.goal.mission.place_location.position.y, _x.action_goal.goal.mission.place_location.position.z, _x.action_goal.goal.mission.place_location.orientation.x, _x.action_goal.goal.mission.place_location.orientation.y, _x.action_goal.goal.mission.place_location.orientation.z, _x.action_goal.goal.mission.place_location.orientation.w, _x.action_goal.goal.mission.place_stage_location.position.x, _x.action_goal.goal.mission.place_stage_location.position.y, _x.action_goal.goal.mission.place_stage_location.position.z, _x.action_goal.goal.mission.place_stage_location.orientation.x, _x.action_goal.goal.mission.place_stage_location.orientation.y, _x.action_goal.goal.mission.place_stage_location.orientation.z, _x.action_goal.goal.mission.place_stage_location.orientation.w))
      _x = self.action_goal.goal.mission.pallet_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.action_goal.goal.mission.pick_slot_height, _x.action_goal.goal.mission.place_slot_height))
      _x = self.action_goal.goal.mission.pick_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.pick_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2f3I().pack(_x.action_goal.goal.mission.priority, _x.action_goal.goal.mission.payload_dimension, _x.action_goal.goal.mission.mission_complete_time, _x.action_goal.goal.mission.mission_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3fi3I().pack(_x.action_result.result.success_Result, _x.action_result.result.mission_complete_time, _x.action_result.result.mission_distance, _x.action_result.result.exceeded_distance, _x.action_result.result.error_enum, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.feedback
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.percentage_finished
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionGoal()
      if self.action_result is None:
        self.action_result = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionResult()
      if self.action_feedback is None:
        self.action_feedback = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.mission.task_enum,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_stage_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_stage_name = str[start:end]
      _x = self
      start = end
      end += 224
      (_x.action_goal.goal.mission.pick_location.position.x, _x.action_goal.goal.mission.pick_location.position.y, _x.action_goal.goal.mission.pick_location.position.z, _x.action_goal.goal.mission.pick_location.orientation.x, _x.action_goal.goal.mission.pick_location.orientation.y, _x.action_goal.goal.mission.pick_location.orientation.z, _x.action_goal.goal.mission.pick_location.orientation.w, _x.action_goal.goal.mission.pick_stage_location.position.x, _x.action_goal.goal.mission.pick_stage_location.position.y, _x.action_goal.goal.mission.pick_stage_location.position.z, _x.action_goal.goal.mission.pick_stage_location.orientation.x, _x.action_goal.goal.mission.pick_stage_location.orientation.y, _x.action_goal.goal.mission.pick_stage_location.orientation.z, _x.action_goal.goal.mission.pick_stage_location.orientation.w, _x.action_goal.goal.mission.place_location.position.x, _x.action_goal.goal.mission.place_location.position.y, _x.action_goal.goal.mission.place_location.position.z, _x.action_goal.goal.mission.place_location.orientation.x, _x.action_goal.goal.mission.place_location.orientation.y, _x.action_goal.goal.mission.place_location.orientation.z, _x.action_goal.goal.mission.place_location.orientation.w, _x.action_goal.goal.mission.place_stage_location.position.x, _x.action_goal.goal.mission.place_stage_location.position.y, _x.action_goal.goal.mission.place_stage_location.position.z, _x.action_goal.goal.mission.place_stage_location.orientation.x, _x.action_goal.goal.mission.place_stage_location.orientation.y, _x.action_goal.goal.mission.place_stage_location.orientation.z, _x.action_goal.goal.mission.place_stage_location.orientation.w,) = _get_struct_28d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pallet_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pallet_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.mission.pick_slot_height, _x.action_goal.goal.mission.place_slot_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_edge_case_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_edge_case_direction = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.action_goal.goal.mission.priority, _x.action_goal.goal.mission.payload_dimension, _x.action_goal.goal.mission.mission_complete_time, _x.action_goal.goal.mission.mission_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2B2f3I().unpack(str[start:end])
      self.action_goal.goal.mission.priority = bool(self.action_goal.goal.mission.priority)
      self.action_goal.goal.mission.payload_dimension = bool(self.action_goal.goal.mission.payload_dimension)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.action_result.result.success_Result, _x.action_result.result.mission_complete_time, _x.action_result.result.mission_distance, _x.action_result.result.exceeded_distance, _x.action_result.result.error_enum, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3fi3I().unpack(str[start:end])
      self.action_result.result.success_Result = bool(self.action_result.result.success_Result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.feedback = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.feedback = str[start:end]
      start = end
      end += 8
      (self.action_feedback.feedback.percentage_finished,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.task_enum
      buff.write(_get_struct_i().pack(_x))
      _x = self.action_goal.goal.mission.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.pick_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.pick_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_28d().pack(_x.action_goal.goal.mission.pick_location.position.x, _x.action_goal.goal.mission.pick_location.position.y, _x.action_goal.goal.mission.pick_location.position.z, _x.action_goal.goal.mission.pick_location.orientation.x, _x.action_goal.goal.mission.pick_location.orientation.y, _x.action_goal.goal.mission.pick_location.orientation.z, _x.action_goal.goal.mission.pick_location.orientation.w, _x.action_goal.goal.mission.pick_stage_location.position.x, _x.action_goal.goal.mission.pick_stage_location.position.y, _x.action_goal.goal.mission.pick_stage_location.position.z, _x.action_goal.goal.mission.pick_stage_location.orientation.x, _x.action_goal.goal.mission.pick_stage_location.orientation.y, _x.action_goal.goal.mission.pick_stage_location.orientation.z, _x.action_goal.goal.mission.pick_stage_location.orientation.w, _x.action_goal.goal.mission.place_location.position.x, _x.action_goal.goal.mission.place_location.position.y, _x.action_goal.goal.mission.place_location.position.z, _x.action_goal.goal.mission.place_location.orientation.x, _x.action_goal.goal.mission.place_location.orientation.y, _x.action_goal.goal.mission.place_location.orientation.z, _x.action_goal.goal.mission.place_location.orientation.w, _x.action_goal.goal.mission.place_stage_location.position.x, _x.action_goal.goal.mission.place_stage_location.position.y, _x.action_goal.goal.mission.place_stage_location.position.z, _x.action_goal.goal.mission.place_stage_location.orientation.x, _x.action_goal.goal.mission.place_stage_location.orientation.y, _x.action_goal.goal.mission.place_stage_location.orientation.z, _x.action_goal.goal.mission.place_stage_location.orientation.w))
      _x = self.action_goal.goal.mission.pallet_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.action_goal.goal.mission.pick_slot_height, _x.action_goal.goal.mission.place_slot_height))
      _x = self.action_goal.goal.mission.pick_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.pick_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.mission.place_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2f3I().pack(_x.action_goal.goal.mission.priority, _x.action_goal.goal.mission.payload_dimension, _x.action_goal.goal.mission.mission_complete_time, _x.action_goal.goal.mission.mission_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3fi3I().pack(_x.action_result.result.success_Result, _x.action_result.result.mission_complete_time, _x.action_result.result.mission_distance, _x.action_result.result.exceeded_distance, _x.action_result.result.error_enum, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.feedback
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.percentage_finished
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionGoal()
      if self.action_result is None:
        self.action_result = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionResult()
      if self.action_feedback is None:
        self.action_feedback = rt_mission_msgs.msg.mobile_robot_pick_and_placeActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.mission.task_enum,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_stage_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_stage_name = str[start:end]
      _x = self
      start = end
      end += 224
      (_x.action_goal.goal.mission.pick_location.position.x, _x.action_goal.goal.mission.pick_location.position.y, _x.action_goal.goal.mission.pick_location.position.z, _x.action_goal.goal.mission.pick_location.orientation.x, _x.action_goal.goal.mission.pick_location.orientation.y, _x.action_goal.goal.mission.pick_location.orientation.z, _x.action_goal.goal.mission.pick_location.orientation.w, _x.action_goal.goal.mission.pick_stage_location.position.x, _x.action_goal.goal.mission.pick_stage_location.position.y, _x.action_goal.goal.mission.pick_stage_location.position.z, _x.action_goal.goal.mission.pick_stage_location.orientation.x, _x.action_goal.goal.mission.pick_stage_location.orientation.y, _x.action_goal.goal.mission.pick_stage_location.orientation.z, _x.action_goal.goal.mission.pick_stage_location.orientation.w, _x.action_goal.goal.mission.place_location.position.x, _x.action_goal.goal.mission.place_location.position.y, _x.action_goal.goal.mission.place_location.position.z, _x.action_goal.goal.mission.place_location.orientation.x, _x.action_goal.goal.mission.place_location.orientation.y, _x.action_goal.goal.mission.place_location.orientation.z, _x.action_goal.goal.mission.place_location.orientation.w, _x.action_goal.goal.mission.place_stage_location.position.x, _x.action_goal.goal.mission.place_stage_location.position.y, _x.action_goal.goal.mission.place_stage_location.position.z, _x.action_goal.goal.mission.place_stage_location.orientation.x, _x.action_goal.goal.mission.place_stage_location.orientation.y, _x.action_goal.goal.mission.place_stage_location.orientation.z, _x.action_goal.goal.mission.place_stage_location.orientation.w,) = _get_struct_28d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pallet_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pallet_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.mission.pick_slot_height, _x.action_goal.goal.mission.place_slot_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.pick_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.pick_edge_case_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission.place_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission.place_edge_case_direction = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.action_goal.goal.mission.priority, _x.action_goal.goal.mission.payload_dimension, _x.action_goal.goal.mission.mission_complete_time, _x.action_goal.goal.mission.mission_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2B2f3I().unpack(str[start:end])
      self.action_goal.goal.mission.priority = bool(self.action_goal.goal.mission.priority)
      self.action_goal.goal.mission.payload_dimension = bool(self.action_goal.goal.mission.payload_dimension)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.action_result.result.success_Result, _x.action_result.result.mission_complete_time, _x.action_result.result.mission_distance, _x.action_result.result.exceeded_distance, _x.action_result.result.error_enum, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3fi3I().unpack(str[start:end])
      self.action_result.result.success_Result = bool(self.action_result.result.success_Result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.feedback = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.feedback = str[start:end]
      start = end
      end += 8
      (self.action_feedback.feedback.percentage_finished,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_28d = None
def _get_struct_28d():
    global _struct_28d
    if _struct_28d is None:
        _struct_28d = struct.Struct("<28d")
    return _struct_28d
_struct_2B2f3I = None
def _get_struct_2B2f3I():
    global _struct_2B2f3I
    if _struct_2B2f3I is None:
        _struct_2B2f3I = struct.Struct("<2B2f3I")
    return _struct_2B2f3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B3fi3I = None
def _get_struct_B3fi3I():
    global _struct_B3fi3I
    if _struct_B3fi3I is None:
        _struct_B3fi3I = struct.Struct("<B3fi3I")
    return _struct_B3fi3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
