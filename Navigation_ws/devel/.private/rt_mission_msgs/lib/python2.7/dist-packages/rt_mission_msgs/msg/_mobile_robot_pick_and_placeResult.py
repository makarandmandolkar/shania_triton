# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_mission_msgs/mobile_robot_pick_and_placeResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mobile_robot_pick_and_placeResult(genpy.Message):
  _md5sum = "ac52838d542856c95a94291f388cced0"
  _type = "rt_mission_msgs/mobile_robot_pick_and_placeResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
bool success_Result
float32 mission_complete_time
float32 mission_distance

int32 ERROR_GENERIC_ERROR=0
int32 ERROR_PALLET_NOT_FOUND=1
int32 ERROR_PALLET_OUT_OF_POSITION=2
int32 ERROR_PLACE_LOCATION_NOT_CLEAR=3
int32 ERROR_UNDEFINED_SENSOR_TYPE=4
int32 ERROR_CARRIAGE_MOTION_FAILED=5
int32 ERROR_NAVIGATION_ERROR=6
int32 ERROR_SAFETY_COMMUNICATION_ERROR=7
int32 ERROR_DEADMAN_TIMED_OUT=8
int32 ERROR_OVERSIZED_PAYLOAD=9
int32 ERROR_LOAD_ALREADY_ON_PALLET_FOR_PICK=10

float32 exceeded_distance
int32 error_enum
"""
  # Pseudo-constants
  ERROR_GENERIC_ERROR = 0
  ERROR_PALLET_NOT_FOUND = 1
  ERROR_PALLET_OUT_OF_POSITION = 2
  ERROR_PLACE_LOCATION_NOT_CLEAR = 3
  ERROR_UNDEFINED_SENSOR_TYPE = 4
  ERROR_CARRIAGE_MOTION_FAILED = 5
  ERROR_NAVIGATION_ERROR = 6
  ERROR_SAFETY_COMMUNICATION_ERROR = 7
  ERROR_DEADMAN_TIMED_OUT = 8
  ERROR_OVERSIZED_PAYLOAD = 9
  ERROR_LOAD_ALREADY_ON_PALLET_FOR_PICK = 10

  __slots__ = ['success_Result','mission_complete_time','mission_distance','exceeded_distance','error_enum']
  _slot_types = ['bool','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success_Result,mission_complete_time,mission_distance,exceeded_distance,error_enum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mobile_robot_pick_and_placeResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success_Result is None:
        self.success_Result = False
      if self.mission_complete_time is None:
        self.mission_complete_time = 0.
      if self.mission_distance is None:
        self.mission_distance = 0.
      if self.exceeded_distance is None:
        self.exceeded_distance = 0.
      if self.error_enum is None:
        self.error_enum = 0
    else:
      self.success_Result = False
      self.mission_complete_time = 0.
      self.mission_distance = 0.
      self.exceeded_distance = 0.
      self.error_enum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3fi().pack(_x.success_Result, _x.mission_complete_time, _x.mission_distance, _x.exceeded_distance, _x.error_enum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.success_Result, _x.mission_complete_time, _x.mission_distance, _x.exceeded_distance, _x.error_enum,) = _get_struct_B3fi().unpack(str[start:end])
      self.success_Result = bool(self.success_Result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3fi().pack(_x.success_Result, _x.mission_complete_time, _x.mission_distance, _x.exceeded_distance, _x.error_enum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.success_Result, _x.mission_complete_time, _x.mission_distance, _x.exceeded_distance, _x.error_enum,) = _get_struct_B3fi().unpack(str[start:end])
      self.success_Result = bool(self.success_Result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3fi = None
def _get_struct_B3fi():
    global _struct_B3fi
    if _struct_B3fi is None:
        _struct_B3fi = struct.Struct("<B3fi")
    return _struct_B3fi
