# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rt_mission_msgs/rt_mission.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class rt_mission(genpy.Message):
  _md5sum = "4ada315410efb79e7745f34310db12a0"
  _type = "rt_mission_msgs/rt_mission"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 task_enum
int32 TASK_PICK_AND_PLACE=0
int32 TASK_PICK=1
int32 TASK_PLACE=2
int32 TASK_CHARGE_ROBOT=3
string status
string pick_location_name
string place_location_name
string pick_stage_name
string place_stage_name
geometry_msgs/Pose pick_location
geometry_msgs/Pose pick_stage_location
geometry_msgs/Pose place_location
geometry_msgs/Pose place_stage_location
string pallet_id
float32 pick_slot_height
float32 place_slot_height
string pick_approach_direction
string place_approach_direction
string pick_edge_case_direction
string place_edge_case_direction
bool priority
bool payload_dimension
float32 mission_complete_time
float32 mission_distance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  TASK_PICK_AND_PLACE = 0
  TASK_PICK = 1
  TASK_PLACE = 2
  TASK_CHARGE_ROBOT = 3

  __slots__ = ['task_enum','status','pick_location_name','place_location_name','pick_stage_name','place_stage_name','pick_location','pick_stage_location','place_location','place_stage_location','pallet_id','pick_slot_height','place_slot_height','pick_approach_direction','place_approach_direction','pick_edge_case_direction','place_edge_case_direction','priority','payload_dimension','mission_complete_time','mission_distance']
  _slot_types = ['int32','string','string','string','string','string','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','string','float32','float32','string','string','string','string','bool','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_enum,status,pick_location_name,place_location_name,pick_stage_name,place_stage_name,pick_location,pick_stage_location,place_location,place_stage_location,pallet_id,pick_slot_height,place_slot_height,pick_approach_direction,place_approach_direction,pick_edge_case_direction,place_edge_case_direction,priority,payload_dimension,mission_complete_time,mission_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rt_mission, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task_enum is None:
        self.task_enum = 0
      if self.status is None:
        self.status = ''
      if self.pick_location_name is None:
        self.pick_location_name = ''
      if self.place_location_name is None:
        self.place_location_name = ''
      if self.pick_stage_name is None:
        self.pick_stage_name = ''
      if self.place_stage_name is None:
        self.place_stage_name = ''
      if self.pick_location is None:
        self.pick_location = geometry_msgs.msg.Pose()
      if self.pick_stage_location is None:
        self.pick_stage_location = geometry_msgs.msg.Pose()
      if self.place_location is None:
        self.place_location = geometry_msgs.msg.Pose()
      if self.place_stage_location is None:
        self.place_stage_location = geometry_msgs.msg.Pose()
      if self.pallet_id is None:
        self.pallet_id = ''
      if self.pick_slot_height is None:
        self.pick_slot_height = 0.
      if self.place_slot_height is None:
        self.place_slot_height = 0.
      if self.pick_approach_direction is None:
        self.pick_approach_direction = ''
      if self.place_approach_direction is None:
        self.place_approach_direction = ''
      if self.pick_edge_case_direction is None:
        self.pick_edge_case_direction = ''
      if self.place_edge_case_direction is None:
        self.place_edge_case_direction = ''
      if self.priority is None:
        self.priority = False
      if self.payload_dimension is None:
        self.payload_dimension = False
      if self.mission_complete_time is None:
        self.mission_complete_time = 0.
      if self.mission_distance is None:
        self.mission_distance = 0.
    else:
      self.task_enum = 0
      self.status = ''
      self.pick_location_name = ''
      self.place_location_name = ''
      self.pick_stage_name = ''
      self.place_stage_name = ''
      self.pick_location = geometry_msgs.msg.Pose()
      self.pick_stage_location = geometry_msgs.msg.Pose()
      self.place_location = geometry_msgs.msg.Pose()
      self.place_stage_location = geometry_msgs.msg.Pose()
      self.pallet_id = ''
      self.pick_slot_height = 0.
      self.place_slot_height = 0.
      self.pick_approach_direction = ''
      self.place_approach_direction = ''
      self.pick_edge_case_direction = ''
      self.place_edge_case_direction = ''
      self.priority = False
      self.payload_dimension = False
      self.mission_complete_time = 0.
      self.mission_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task_enum
      buff.write(_get_struct_i().pack(_x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pick_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pick_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_28d().pack(_x.pick_location.position.x, _x.pick_location.position.y, _x.pick_location.position.z, _x.pick_location.orientation.x, _x.pick_location.orientation.y, _x.pick_location.orientation.z, _x.pick_location.orientation.w, _x.pick_stage_location.position.x, _x.pick_stage_location.position.y, _x.pick_stage_location.position.z, _x.pick_stage_location.orientation.x, _x.pick_stage_location.orientation.y, _x.pick_stage_location.orientation.z, _x.pick_stage_location.orientation.w, _x.place_location.position.x, _x.place_location.position.y, _x.place_location.position.z, _x.place_location.orientation.x, _x.place_location.orientation.y, _x.place_location.orientation.z, _x.place_location.orientation.w, _x.place_stage_location.position.x, _x.place_stage_location.position.y, _x.place_stage_location.position.z, _x.place_stage_location.orientation.x, _x.place_stage_location.orientation.y, _x.place_stage_location.orientation.z, _x.place_stage_location.orientation.w))
      _x = self.pallet_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.pick_slot_height, _x.place_slot_height))
      _x = self.pick_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pick_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2f().pack(_x.priority, _x.payload_dimension, _x.mission_complete_time, _x.mission_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pick_location is None:
        self.pick_location = geometry_msgs.msg.Pose()
      if self.pick_stage_location is None:
        self.pick_stage_location = geometry_msgs.msg.Pose()
      if self.place_location is None:
        self.place_location = geometry_msgs.msg.Pose()
      if self.place_stage_location is None:
        self.place_stage_location = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (self.task_enum,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_stage_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_stage_name = str[start:end]
      _x = self
      start = end
      end += 224
      (_x.pick_location.position.x, _x.pick_location.position.y, _x.pick_location.position.z, _x.pick_location.orientation.x, _x.pick_location.orientation.y, _x.pick_location.orientation.z, _x.pick_location.orientation.w, _x.pick_stage_location.position.x, _x.pick_stage_location.position.y, _x.pick_stage_location.position.z, _x.pick_stage_location.orientation.x, _x.pick_stage_location.orientation.y, _x.pick_stage_location.orientation.z, _x.pick_stage_location.orientation.w, _x.place_location.position.x, _x.place_location.position.y, _x.place_location.position.z, _x.place_location.orientation.x, _x.place_location.orientation.y, _x.place_location.orientation.z, _x.place_location.orientation.w, _x.place_stage_location.position.x, _x.place_stage_location.position.y, _x.place_stage_location.position.z, _x.place_stage_location.orientation.x, _x.place_stage_location.orientation.y, _x.place_stage_location.orientation.z, _x.place_stage_location.orientation.w,) = _get_struct_28d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pallet_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pallet_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pick_slot_height, _x.place_slot_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_edge_case_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_edge_case_direction = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.priority, _x.payload_dimension, _x.mission_complete_time, _x.mission_distance,) = _get_struct_2B2f().unpack(str[start:end])
      self.priority = bool(self.priority)
      self.payload_dimension = bool(self.payload_dimension)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task_enum
      buff.write(_get_struct_i().pack(_x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pick_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_location_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pick_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_stage_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_28d().pack(_x.pick_location.position.x, _x.pick_location.position.y, _x.pick_location.position.z, _x.pick_location.orientation.x, _x.pick_location.orientation.y, _x.pick_location.orientation.z, _x.pick_location.orientation.w, _x.pick_stage_location.position.x, _x.pick_stage_location.position.y, _x.pick_stage_location.position.z, _x.pick_stage_location.orientation.x, _x.pick_stage_location.orientation.y, _x.pick_stage_location.orientation.z, _x.pick_stage_location.orientation.w, _x.place_location.position.x, _x.place_location.position.y, _x.place_location.position.z, _x.place_location.orientation.x, _x.place_location.orientation.y, _x.place_location.orientation.z, _x.place_location.orientation.w, _x.place_stage_location.position.x, _x.place_stage_location.position.y, _x.place_stage_location.position.z, _x.place_stage_location.orientation.x, _x.place_stage_location.orientation.y, _x.place_stage_location.orientation.z, _x.place_stage_location.orientation.w))
      _x = self.pallet_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.pick_slot_height, _x.place_slot_height))
      _x = self.pick_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_approach_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pick_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.place_edge_case_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2f().pack(_x.priority, _x.payload_dimension, _x.mission_complete_time, _x.mission_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pick_location is None:
        self.pick_location = geometry_msgs.msg.Pose()
      if self.pick_stage_location is None:
        self.pick_stage_location = geometry_msgs.msg.Pose()
      if self.place_location is None:
        self.place_location = geometry_msgs.msg.Pose()
      if self.place_stage_location is None:
        self.place_stage_location = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (self.task_enum,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_location_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_location_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_stage_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_stage_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_stage_name = str[start:end]
      _x = self
      start = end
      end += 224
      (_x.pick_location.position.x, _x.pick_location.position.y, _x.pick_location.position.z, _x.pick_location.orientation.x, _x.pick_location.orientation.y, _x.pick_location.orientation.z, _x.pick_location.orientation.w, _x.pick_stage_location.position.x, _x.pick_stage_location.position.y, _x.pick_stage_location.position.z, _x.pick_stage_location.orientation.x, _x.pick_stage_location.orientation.y, _x.pick_stage_location.orientation.z, _x.pick_stage_location.orientation.w, _x.place_location.position.x, _x.place_location.position.y, _x.place_location.position.z, _x.place_location.orientation.x, _x.place_location.orientation.y, _x.place_location.orientation.z, _x.place_location.orientation.w, _x.place_stage_location.position.x, _x.place_stage_location.position.y, _x.place_stage_location.position.z, _x.place_stage_location.orientation.x, _x.place_stage_location.orientation.y, _x.place_stage_location.orientation.z, _x.place_stage_location.orientation.w,) = _get_struct_28d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pallet_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pallet_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pick_slot_height, _x.place_slot_height,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_approach_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_approach_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pick_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pick_edge_case_direction = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.place_edge_case_direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.place_edge_case_direction = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.priority, _x.payload_dimension, _x.mission_complete_time, _x.mission_distance,) = _get_struct_2B2f().unpack(str[start:end])
      self.priority = bool(self.priority)
      self.payload_dimension = bool(self.payload_dimension)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_28d = None
def _get_struct_28d():
    global _struct_28d
    if _struct_28d is None:
        _struct_28d = struct.Struct("<28d")
    return _struct_28d
_struct_2B2f = None
def _get_struct_2B2f():
    global _struct_2B2f
    if _struct_2B2f is None:
        _struct_2B2f = struct.Struct("<2B2f")
    return _struct_2B2f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
