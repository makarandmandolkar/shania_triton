// Auto-generated. Do not edit!

// (in-package fuse_navigation_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class ExecutePathGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.id_type_enum = null;
      this.nodes = null;
      this.append = null;
    }
    else {
      if (initObj.hasOwnProperty('id_type_enum')) {
        this.id_type_enum = initObj.id_type_enum
      }
      else {
        this.id_type_enum = 0;
      }
      if (initObj.hasOwnProperty('nodes')) {
        this.nodes = initObj.nodes
      }
      else {
        this.nodes = [];
      }
      if (initObj.hasOwnProperty('append')) {
        this.append = initObj.append
      }
      else {
        this.append = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ExecutePathGoal
    // Serialize message field [id_type_enum]
    bufferOffset = _serializer.uint8(obj.id_type_enum, buffer, bufferOffset);
    // Serialize message field [nodes]
    bufferOffset = _arraySerializer.string(obj.nodes, buffer, bufferOffset, null);
    // Serialize message field [append]
    bufferOffset = _serializer.bool(obj.append, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ExecutePathGoal
    let len;
    let data = new ExecutePathGoal(null);
    // Deserialize message field [id_type_enum]
    data.id_type_enum = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [nodes]
    data.nodes = _arrayDeserializer.string(buffer, bufferOffset, null)
    // Deserialize message field [append]
    data.append = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.nodes.forEach((val) => {
      length += 4 + val.length;
    });
    return length + 6;
  }

  static datatype() {
    // Returns string type for a message object
    return 'fuse_navigation_msgs/ExecutePathGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '56048e3d1a74f5550c8af38fee5cf8c6';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ## Action used to command the vehicle to execute a path of nodes
    
    # Defines the type NodeID
    uint8 id_type_enum
    # Possible types
    uint8 ID_TYPE_NODE_INDEX = 0 # Indicates that the node ids are the human-readable indices shown in the UI
    uint8 ID_TYPE_NODE_ID    = 1 # Indicates that the node ids are the unique IDs used by the internal data structure
    
    # Goal
    string[] nodes # IDs of desired nodes, in order
    bool append # If true, new nodes are appended to the current mission. If false, replace the current mission
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ExecutePathGoal(null);
    if (msg.id_type_enum !== undefined) {
      resolved.id_type_enum = msg.id_type_enum;
    }
    else {
      resolved.id_type_enum = 0
    }

    if (msg.nodes !== undefined) {
      resolved.nodes = msg.nodes;
    }
    else {
      resolved.nodes = []
    }

    if (msg.append !== undefined) {
      resolved.append = msg.append;
    }
    else {
      resolved.append = false
    }

    return resolved;
    }
};

// Constants for message
ExecutePathGoal.Constants = {
  ID_TYPE_NODE_INDEX: 0,
  ID_TYPE_NODE_ID: 1,
}

module.exports = ExecutePathGoal;
