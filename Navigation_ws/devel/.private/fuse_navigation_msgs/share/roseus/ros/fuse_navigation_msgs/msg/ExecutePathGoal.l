;; Auto-generated. Do not edit!


(when (boundp 'fuse_navigation_msgs::ExecutePathGoal)
  (if (not (find-package "FUSE_NAVIGATION_MSGS"))
    (make-package "FUSE_NAVIGATION_MSGS"))
  (shadow 'ExecutePathGoal (find-package "FUSE_NAVIGATION_MSGS")))
(unless (find-package "FUSE_NAVIGATION_MSGS::EXECUTEPATHGOAL")
  (make-package "FUSE_NAVIGATION_MSGS::EXECUTEPATHGOAL"))

(in-package "ROS")
;;//! \htmlinclude ExecutePathGoal.msg.html


(intern "*ID_TYPE_NODE_INDEX*" (find-package "FUSE_NAVIGATION_MSGS::EXECUTEPATHGOAL"))
(shadow '*ID_TYPE_NODE_INDEX* (find-package "FUSE_NAVIGATION_MSGS::EXECUTEPATHGOAL"))
(defconstant fuse_navigation_msgs::ExecutePathGoal::*ID_TYPE_NODE_INDEX* 0)
(intern "*ID_TYPE_NODE_ID*" (find-package "FUSE_NAVIGATION_MSGS::EXECUTEPATHGOAL"))
(shadow '*ID_TYPE_NODE_ID* (find-package "FUSE_NAVIGATION_MSGS::EXECUTEPATHGOAL"))
(defconstant fuse_navigation_msgs::ExecutePathGoal::*ID_TYPE_NODE_ID* 1)
(defclass fuse_navigation_msgs::ExecutePathGoal
  :super ros::object
  :slots (_id_type_enum _nodes _append ))

(defmethod fuse_navigation_msgs::ExecutePathGoal
  (:init
   (&key
    ((:id_type_enum __id_type_enum) 0)
    ((:nodes __nodes) (let (r) (dotimes (i 0) (push "" r)) r))
    ((:append __append) nil)
    )
   (send-super :init)
   (setq _id_type_enum (round __id_type_enum))
   (setq _nodes __nodes)
   (setq _append __append)
   self)
  (:id_type_enum
   (&optional __id_type_enum)
   (if __id_type_enum (setq _id_type_enum __id_type_enum)) _id_type_enum)
  (:nodes
   (&optional __nodes)
   (if __nodes (setq _nodes __nodes)) _nodes)
  (:append
   (&optional __append)
   (if __append (setq _append __append)) _append)
  (:serialization-length
   ()
   (+
    ;; uint8 _id_type_enum
    1
    ;; string[] _nodes
    (apply #'+ (mapcar #'(lambda (x) (+ 4 (length x))) _nodes)) 4
    ;; bool _append
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _id_type_enum
       (write-byte _id_type_enum s)
     ;; string[] _nodes
     (write-long (length _nodes) s)
     (dolist (elem _nodes)
       (write-long (length elem) s) (princ elem s)
       )
     ;; bool _append
       (if _append (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _id_type_enum
     (setq _id_type_enum (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; string[] _nodes
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _nodes (make-list n))
     (dotimes (i n)
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setf (elt _nodes i) (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
     ))
   ;; bool _append
     (setq _append (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get fuse_navigation_msgs::ExecutePathGoal :md5sum-) "56048e3d1a74f5550c8af38fee5cf8c6")
(setf (get fuse_navigation_msgs::ExecutePathGoal :datatype-) "fuse_navigation_msgs/ExecutePathGoal")
(setf (get fuse_navigation_msgs::ExecutePathGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## Action used to command the vehicle to execute a path of nodes

# Defines the type NodeID
uint8 id_type_enum
# Possible types
uint8 ID_TYPE_NODE_INDEX = 0 # Indicates that the node ids are the human-readable indices shown in the UI
uint8 ID_TYPE_NODE_ID    = 1 # Indicates that the node ids are the unique IDs used by the internal data structure

# Goal
string[] nodes # IDs of desired nodes, in order
bool append # If true, new nodes are appended to the current mission. If false, replace the current mission

")



(provide :fuse_navigation_msgs/ExecutePathGoal "56048e3d1a74f5550c8af38fee5cf8c6")


