// Generated by gencpp from file fuse_navigation_msgs/ExecuteTaskFeedback.msg
// DO NOT EDIT!


#ifndef FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTETASKFEEDBACK_H
#define FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTETASKFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fuse_navigation_msgs
{
template <class ContainerAllocator>
struct ExecuteTaskFeedback_
{
  typedef ExecuteTaskFeedback_<ContainerAllocator> Type;

  ExecuteTaskFeedback_()
    : status()
    , task_state()
    , action_index(0)  {
    }
  ExecuteTaskFeedback_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , task_state(_alloc)
    , action_index(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_state_type;
  _task_state_type task_state;

   typedef int32_t _action_index_type;
  _action_index_type action_index;





  typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteTaskFeedback_

typedef ::fuse_navigation_msgs::ExecuteTaskFeedback_<std::allocator<void> > ExecuteTaskFeedback;

typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskFeedback > ExecuteTaskFeedbackPtr;
typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskFeedback const> ExecuteTaskFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator1> & lhs, const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.task_state == rhs.task_state &&
    lhs.action_index == rhs.action_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator1> & lhs, const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42a3a37e957109ca445ba30df675dde3";
  }

  static const char* value(const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42a3a37e957109caULL;
  static const uint64_t static_value2 = 0x445ba30df675dde3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_navigation_msgs/ExecuteTaskFeedback";
  }

  static const char* value(const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"string status # For general status messages\n"
"string task_state\n"
"int32 action_index\n"
"\n"
;
  }

  static const char* value(const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.task_state);
      stream.next(m.action_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteTaskFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_navigation_msgs::ExecuteTaskFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "task_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_state);
    s << indent << "action_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTETASKFEEDBACK_H
