// Generated by gencpp from file fuse_navigation_msgs/ExecuteTaskGoal.msg
// DO NOT EDIT!


#ifndef FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTETASKGOAL_H
#define FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTETASKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fuse_navigation_msgs/TaskAction.h>

namespace fuse_navigation_msgs
{
template <class ContainerAllocator>
struct ExecuteTaskGoal_
{
  typedef ExecuteTaskGoal_<ContainerAllocator> Type;

  ExecuteTaskGoal_()
    : task_id()
    , agent_id()
    , action_plan()  {
    }
  ExecuteTaskGoal_(const ContainerAllocator& _alloc)
    : task_id(_alloc)
    , agent_id(_alloc)
    , action_plan(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_id_type;
  _task_id_type task_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agent_id_type;
  _agent_id_type agent_id;

   typedef std::vector< ::fuse_navigation_msgs::TaskAction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fuse_navigation_msgs::TaskAction_<ContainerAllocator> >::other >  _action_plan_type;
  _action_plan_type action_plan;





  typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteTaskGoal_

typedef ::fuse_navigation_msgs::ExecuteTaskGoal_<std::allocator<void> > ExecuteTaskGoal;

typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskGoal > ExecuteTaskGoalPtr;
typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecuteTaskGoal const> ExecuteTaskGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator1> & lhs, const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator2> & rhs)
{
  return lhs.task_id == rhs.task_id &&
    lhs.agent_id == rhs.agent_id &&
    lhs.action_plan == rhs.action_plan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator1> & lhs, const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61e0bad8ee9b5e9931c6026164f872c0";
  }

  static const char* value(const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61e0bad8ee9b5e99ULL;
  static const uint64_t static_value2 = 0x31c6026164f872c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_navigation_msgs/ExecuteTaskGoal";
  }

  static const char* value(const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"## Action used to send a task/mission for the agent to execute\n"
"\n"
"# Goal\n"
"string task_id\n"
"string agent_id\n"
"TaskAction[] action_plan\n"
"\n"
"================================================================================\n"
"MSG: fuse_navigation_msgs/TaskAction\n"
"# Represents an action as part of a larger agent task\n"
"string name\n"
"string[] arguments\n"
;
  }

  static const char* value(const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.agent_id);
      stream.next(m.action_plan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteTaskGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_navigation_msgs::ExecuteTaskGoal_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_id);
    s << indent << "agent_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agent_id);
    s << indent << "action_plan[]" << std::endl;
    for (size_t i = 0; i < v.action_plan.size(); ++i)
    {
      s << indent << "  action_plan[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fuse_navigation_msgs::TaskAction_<ContainerAllocator> >::stream(s, indent + "    ", v.action_plan[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTETASKGOAL_H
