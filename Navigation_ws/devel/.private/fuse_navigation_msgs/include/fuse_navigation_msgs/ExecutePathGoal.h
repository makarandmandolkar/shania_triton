// Generated by gencpp from file fuse_navigation_msgs/ExecutePathGoal.msg
// DO NOT EDIT!


#ifndef FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTEPATHGOAL_H
#define FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTEPATHGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fuse_navigation_msgs
{
template <class ContainerAllocator>
struct ExecutePathGoal_
{
  typedef ExecutePathGoal_<ContainerAllocator> Type;

  ExecutePathGoal_()
    : id_type_enum(0)
    , nodes()
    , append(false)  {
    }
  ExecutePathGoal_(const ContainerAllocator& _alloc)
    : id_type_enum(0)
    , nodes(_alloc)
    , append(false)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type_enum_type;
  _id_type_enum_type id_type_enum;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _nodes_type;
  _nodes_type nodes;

   typedef uint8_t _append_type;
  _append_type append;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ID_TYPE_NODE_INDEX)
  #undef ID_TYPE_NODE_INDEX
#endif
#if defined(_WIN32) && defined(ID_TYPE_NODE_ID)
  #undef ID_TYPE_NODE_ID
#endif

  enum {
    ID_TYPE_NODE_INDEX = 0u,
    ID_TYPE_NODE_ID = 1u,
  };


  typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ExecutePathGoal_

typedef ::fuse_navigation_msgs::ExecutePathGoal_<std::allocator<void> > ExecutePathGoal;

typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecutePathGoal > ExecutePathGoalPtr;
typedef boost::shared_ptr< ::fuse_navigation_msgs::ExecutePathGoal const> ExecutePathGoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator1> & lhs, const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator2> & rhs)
{
  return lhs.id_type_enum == rhs.id_type_enum &&
    lhs.nodes == rhs.nodes &&
    lhs.append == rhs.append;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator1> & lhs, const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fuse_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56048e3d1a74f5550c8af38fee5cf8c6";
  }

  static const char* value(const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56048e3d1a74f555ULL;
  static const uint64_t static_value2 = 0x0c8af38fee5cf8c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fuse_navigation_msgs/ExecutePathGoal";
  }

  static const char* value(const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"## Action used to command the vehicle to execute a path of nodes\n"
"\n"
"# Defines the type NodeID\n"
"uint8 id_type_enum\n"
"# Possible types\n"
"uint8 ID_TYPE_NODE_INDEX = 0 # Indicates that the node ids are the human-readable indices shown in the UI\n"
"uint8 ID_TYPE_NODE_ID    = 1 # Indicates that the node ids are the unique IDs used by the internal data structure\n"
"\n"
"# Goal\n"
"string[] nodes # IDs of desired nodes, in order\n"
"bool append # If true, new nodes are appended to the current mission. If false, replace the current mission\n"
;
  }

  static const char* value(const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_type_enum);
      stream.next(m.nodes);
      stream.next(m.append);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecutePathGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fuse_navigation_msgs::ExecutePathGoal_<ContainerAllocator>& v)
  {
    s << indent << "id_type_enum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_type_enum);
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.nodes[i]);
    }
    s << indent << "append: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.append);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSE_NAVIGATION_MSGS_MESSAGE_EXECUTEPATHGOAL_H
