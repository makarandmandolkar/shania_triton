# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from monitor_utils/node_watchdog_serviceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class node_watchdog_serviceRequest(genpy.Message):
  _md5sum = "d7e3f8843ea4df5e36fcc1a89aa6ac8d"
  _type = "monitor_utils/node_watchdog_serviceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#request
string node_name
int16 COMMAND_ADD_WATCHED_NODE=1
int16 COMMAND_REMOVE_WATCHED_NODE=2
int16 COMMAND_KILL_WATCHED_NODE=3
int16 COMMAND_LAUNCH_WATCHED_NODE=4
int16 command_type_enum

# If you are adding a node, these values are used
int32 watch_rate
int32 startup_duration
int32 watched_topics_timeout
string[] watched_topics
bool reboot_on_hang
bool reboot_on_death
bool reboot_on_publish_timeout
string launch_script

"""
  # Pseudo-constants
  COMMAND_ADD_WATCHED_NODE = 1
  COMMAND_REMOVE_WATCHED_NODE = 2
  COMMAND_KILL_WATCHED_NODE = 3
  COMMAND_LAUNCH_WATCHED_NODE = 4

  __slots__ = ['node_name','command_type_enum','watch_rate','startup_duration','watched_topics_timeout','watched_topics','reboot_on_hang','reboot_on_death','reboot_on_publish_timeout','launch_script']
  _slot_types = ['string','int16','int32','int32','int32','string[]','bool','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node_name,command_type_enum,watch_rate,startup_duration,watched_topics_timeout,watched_topics,reboot_on_hang,reboot_on_death,reboot_on_publish_timeout,launch_script

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(node_watchdog_serviceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node_name is None:
        self.node_name = ''
      if self.command_type_enum is None:
        self.command_type_enum = 0
      if self.watch_rate is None:
        self.watch_rate = 0
      if self.startup_duration is None:
        self.startup_duration = 0
      if self.watched_topics_timeout is None:
        self.watched_topics_timeout = 0
      if self.watched_topics is None:
        self.watched_topics = []
      if self.reboot_on_hang is None:
        self.reboot_on_hang = False
      if self.reboot_on_death is None:
        self.reboot_on_death = False
      if self.reboot_on_publish_timeout is None:
        self.reboot_on_publish_timeout = False
      if self.launch_script is None:
        self.launch_script = ''
    else:
      self.node_name = ''
      self.command_type_enum = 0
      self.watch_rate = 0
      self.startup_duration = 0
      self.watched_topics_timeout = 0
      self.watched_topics = []
      self.reboot_on_hang = False
      self.reboot_on_death = False
      self.reboot_on_publish_timeout = False
      self.launch_script = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_h3i().pack(_x.command_type_enum, _x.watch_rate, _x.startup_duration, _x.watched_topics_timeout))
      length = len(self.watched_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.watched_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3B().pack(_x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout))
      _x = self.launch_script
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.command_type_enum, _x.watch_rate, _x.startup_duration, _x.watched_topics_timeout,) = _get_struct_h3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.watched_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.watched_topics.append(val1)
      _x = self
      start = end
      end += 3
      (_x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout,) = _get_struct_3B().unpack(str[start:end])
      self.reboot_on_hang = bool(self.reboot_on_hang)
      self.reboot_on_death = bool(self.reboot_on_death)
      self.reboot_on_publish_timeout = bool(self.reboot_on_publish_timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.launch_script = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.launch_script = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_h3i().pack(_x.command_type_enum, _x.watch_rate, _x.startup_duration, _x.watched_topics_timeout))
      length = len(self.watched_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.watched_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3B().pack(_x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout))
      _x = self.launch_script
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.command_type_enum, _x.watch_rate, _x.startup_duration, _x.watched_topics_timeout,) = _get_struct_h3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.watched_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.watched_topics.append(val1)
      _x = self
      start = end
      end += 3
      (_x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout,) = _get_struct_3B().unpack(str[start:end])
      self.reboot_on_hang = bool(self.reboot_on_hang)
      self.reboot_on_death = bool(self.reboot_on_death)
      self.reboot_on_publish_timeout = bool(self.reboot_on_publish_timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.launch_script = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.launch_script = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_h3i = None
def _get_struct_h3i():
    global _struct_h3i
    if _struct_h3i is None:
        _struct_h3i = struct.Struct("<h3i")
    return _struct_h3i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from monitor_utils/node_watchdog_serviceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class node_watchdog_serviceResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "monitor_utils/node_watchdog_serviceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response
bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(node_watchdog_serviceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class node_watchdog_service(object):
  _type          = 'monitor_utils/node_watchdog_service'
  _md5sum = '966c5e764adcdb27f4f871b3066bf913'
  _request_class  = node_watchdog_serviceRequest
  _response_class = node_watchdog_serviceResponse
