# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from monitor_utils/node_watchdog_status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class node_watchdog_status(genpy.Message):
  _md5sum = "b5b891ace9dd6aa5540bc71f15a96b40"
  _type = "monitor_utils/node_watchdog_status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 sequence
string my_node_name
string ros_master_uri
bool is_ros_master_connected
string[] watched_nodes
int32 watch_rate
int32 ping_rate"""
  __slots__ = ['sequence','my_node_name','ros_master_uri','is_ros_master_connected','watched_nodes','watch_rate','ping_rate']
  _slot_types = ['int32','string','string','bool','string[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sequence,my_node_name,ros_master_uri,is_ros_master_connected,watched_nodes,watch_rate,ping_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(node_watchdog_status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sequence is None:
        self.sequence = 0
      if self.my_node_name is None:
        self.my_node_name = ''
      if self.ros_master_uri is None:
        self.ros_master_uri = ''
      if self.is_ros_master_connected is None:
        self.is_ros_master_connected = False
      if self.watched_nodes is None:
        self.watched_nodes = []
      if self.watch_rate is None:
        self.watch_rate = 0
      if self.ping_rate is None:
        self.ping_rate = 0
    else:
      self.sequence = 0
      self.my_node_name = ''
      self.ros_master_uri = ''
      self.is_ros_master_connected = False
      self.watched_nodes = []
      self.watch_rate = 0
      self.ping_rate = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.sequence
      buff.write(_get_struct_i().pack(_x))
      _x = self.my_node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ros_master_uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_ros_master_connected
      buff.write(_get_struct_B().pack(_x))
      length = len(self.watched_nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.watched_nodes:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_2i().pack(_x.watch_rate, _x.ping_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.sequence,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.my_node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.my_node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ros_master_uri = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ros_master_uri = str[start:end]
      start = end
      end += 1
      (self.is_ros_master_connected,) = _get_struct_B().unpack(str[start:end])
      self.is_ros_master_connected = bool(self.is_ros_master_connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.watched_nodes = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.watched_nodes.append(val1)
      _x = self
      start = end
      end += 8
      (_x.watch_rate, _x.ping_rate,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.sequence
      buff.write(_get_struct_i().pack(_x))
      _x = self.my_node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ros_master_uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_ros_master_connected
      buff.write(_get_struct_B().pack(_x))
      length = len(self.watched_nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.watched_nodes:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_2i().pack(_x.watch_rate, _x.ping_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.sequence,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.my_node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.my_node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ros_master_uri = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ros_master_uri = str[start:end]
      start = end
      end += 1
      (self.is_ros_master_connected,) = _get_struct_B().unpack(str[start:end])
      self.is_ros_master_connected = bool(self.is_ros_master_connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.watched_nodes = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.watched_nodes.append(val1)
      _x = self
      start = end
      end += 8
      (_x.watch_rate, _x.ping_rate,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
