# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from monitor_utils/watched_node_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class watched_node_data(genpy.Message):
  _md5sum = "81c3123a2ea294b2971a0476e03b9bf8"
  _type = "monitor_utils/watched_node_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 sequence
string name
int32 watch_rate
int32 startup_duration
int32 PID
float64 instantiation_time
string[] watched_topics
bool is_alive
bool is_hung
bool is_publishing
bool reboot_on_hang
bool reboot_on_death
bool reboot_on_publish_timeout
int32 reboot_count
string launch_script

"""
  __slots__ = ['sequence','name','watch_rate','startup_duration','PID','instantiation_time','watched_topics','is_alive','is_hung','is_publishing','reboot_on_hang','reboot_on_death','reboot_on_publish_timeout','reboot_count','launch_script']
  _slot_types = ['int64','string','int32','int32','int32','float64','string[]','bool','bool','bool','bool','bool','bool','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sequence,name,watch_rate,startup_duration,PID,instantiation_time,watched_topics,is_alive,is_hung,is_publishing,reboot_on_hang,reboot_on_death,reboot_on_publish_timeout,reboot_count,launch_script

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(watched_node_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sequence is None:
        self.sequence = 0
      if self.name is None:
        self.name = ''
      if self.watch_rate is None:
        self.watch_rate = 0
      if self.startup_duration is None:
        self.startup_duration = 0
      if self.PID is None:
        self.PID = 0
      if self.instantiation_time is None:
        self.instantiation_time = 0.
      if self.watched_topics is None:
        self.watched_topics = []
      if self.is_alive is None:
        self.is_alive = False
      if self.is_hung is None:
        self.is_hung = False
      if self.is_publishing is None:
        self.is_publishing = False
      if self.reboot_on_hang is None:
        self.reboot_on_hang = False
      if self.reboot_on_death is None:
        self.reboot_on_death = False
      if self.reboot_on_publish_timeout is None:
        self.reboot_on_publish_timeout = False
      if self.reboot_count is None:
        self.reboot_count = 0
      if self.launch_script is None:
        self.launch_script = ''
    else:
      self.sequence = 0
      self.name = ''
      self.watch_rate = 0
      self.startup_duration = 0
      self.PID = 0
      self.instantiation_time = 0.
      self.watched_topics = []
      self.is_alive = False
      self.is_hung = False
      self.is_publishing = False
      self.reboot_on_hang = False
      self.reboot_on_death = False
      self.reboot_on_publish_timeout = False
      self.reboot_count = 0
      self.launch_script = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.sequence
      buff.write(_get_struct_q().pack(_x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3id().pack(_x.watch_rate, _x.startup_duration, _x.PID, _x.instantiation_time))
      length = len(self.watched_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.watched_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_6Bi().pack(_x.is_alive, _x.is_hung, _x.is_publishing, _x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout, _x.reboot_count))
      _x = self.launch_script
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.sequence,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.watch_rate, _x.startup_duration, _x.PID, _x.instantiation_time,) = _get_struct_3id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.watched_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.watched_topics.append(val1)
      _x = self
      start = end
      end += 10
      (_x.is_alive, _x.is_hung, _x.is_publishing, _x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout, _x.reboot_count,) = _get_struct_6Bi().unpack(str[start:end])
      self.is_alive = bool(self.is_alive)
      self.is_hung = bool(self.is_hung)
      self.is_publishing = bool(self.is_publishing)
      self.reboot_on_hang = bool(self.reboot_on_hang)
      self.reboot_on_death = bool(self.reboot_on_death)
      self.reboot_on_publish_timeout = bool(self.reboot_on_publish_timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.launch_script = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.launch_script = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.sequence
      buff.write(_get_struct_q().pack(_x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3id().pack(_x.watch_rate, _x.startup_duration, _x.PID, _x.instantiation_time))
      length = len(self.watched_topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.watched_topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_6Bi().pack(_x.is_alive, _x.is_hung, _x.is_publishing, _x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout, _x.reboot_count))
      _x = self.launch_script
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.sequence,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.watch_rate, _x.startup_duration, _x.PID, _x.instantiation_time,) = _get_struct_3id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.watched_topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.watched_topics.append(val1)
      _x = self
      start = end
      end += 10
      (_x.is_alive, _x.is_hung, _x.is_publishing, _x.reboot_on_hang, _x.reboot_on_death, _x.reboot_on_publish_timeout, _x.reboot_count,) = _get_struct_6Bi().unpack(str[start:end])
      self.is_alive = bool(self.is_alive)
      self.is_hung = bool(self.is_hung)
      self.is_publishing = bool(self.is_publishing)
      self.reboot_on_hang = bool(self.reboot_on_hang)
      self.reboot_on_death = bool(self.reboot_on_death)
      self.reboot_on_publish_timeout = bool(self.reboot_on_publish_timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.launch_script = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.launch_script = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3id = None
def _get_struct_3id():
    global _struct_3id
    if _struct_3id is None:
        _struct_3id = struct.Struct("<3id")
    return _struct_3id
_struct_6Bi = None
def _get_struct_6Bi():
    global _struct_6Bi
    if _struct_6Bi is None:
        _struct_6Bi = struct.Struct("<6Bi")
    return _struct_6Bi
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
