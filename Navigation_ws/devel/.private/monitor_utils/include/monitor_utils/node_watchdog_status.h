// Generated by gencpp from file monitor_utils/node_watchdog_status.msg
// DO NOT EDIT!


#ifndef MONITOR_UTILS_MESSAGE_NODE_WATCHDOG_STATUS_H
#define MONITOR_UTILS_MESSAGE_NODE_WATCHDOG_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace monitor_utils
{
template <class ContainerAllocator>
struct node_watchdog_status_
{
  typedef node_watchdog_status_<ContainerAllocator> Type;

  node_watchdog_status_()
    : sequence(0)
    , my_node_name()
    , ros_master_uri()
    , is_ros_master_connected(false)
    , watched_nodes()
    , watch_rate(0)
    , ping_rate(0)  {
    }
  node_watchdog_status_(const ContainerAllocator& _alloc)
    : sequence(0)
    , my_node_name(_alloc)
    , ros_master_uri(_alloc)
    , is_ros_master_connected(false)
    , watched_nodes(_alloc)
    , watch_rate(0)
    , ping_rate(0)  {
  (void)_alloc;
    }



   typedef int32_t _sequence_type;
  _sequence_type sequence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _my_node_name_type;
  _my_node_name_type my_node_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ros_master_uri_type;
  _ros_master_uri_type ros_master_uri;

   typedef uint8_t _is_ros_master_connected_type;
  _is_ros_master_connected_type is_ros_master_connected;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _watched_nodes_type;
  _watched_nodes_type watched_nodes;

   typedef int32_t _watch_rate_type;
  _watch_rate_type watch_rate;

   typedef int32_t _ping_rate_type;
  _ping_rate_type ping_rate;





  typedef boost::shared_ptr< ::monitor_utils::node_watchdog_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitor_utils::node_watchdog_status_<ContainerAllocator> const> ConstPtr;

}; // struct node_watchdog_status_

typedef ::monitor_utils::node_watchdog_status_<std::allocator<void> > node_watchdog_status;

typedef boost::shared_ptr< ::monitor_utils::node_watchdog_status > node_watchdog_statusPtr;
typedef boost::shared_ptr< ::monitor_utils::node_watchdog_status const> node_watchdog_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitor_utils::node_watchdog_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::monitor_utils::node_watchdog_status_<ContainerAllocator1> & lhs, const ::monitor_utils::node_watchdog_status_<ContainerAllocator2> & rhs)
{
  return lhs.sequence == rhs.sequence &&
    lhs.my_node_name == rhs.my_node_name &&
    lhs.ros_master_uri == rhs.ros_master_uri &&
    lhs.is_ros_master_connected == rhs.is_ros_master_connected &&
    lhs.watched_nodes == rhs.watched_nodes &&
    lhs.watch_rate == rhs.watch_rate &&
    lhs.ping_rate == rhs.ping_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::monitor_utils::node_watchdog_status_<ContainerAllocator1> & lhs, const ::monitor_utils::node_watchdog_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace monitor_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_utils::node_watchdog_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_utils::node_watchdog_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_utils::node_watchdog_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5b891ace9dd6aa5540bc71f15a96b40";
  }

  static const char* value(const ::monitor_utils::node_watchdog_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5b891ace9dd6aa5ULL;
  static const uint64_t static_value2 = 0x540bc71f15a96b40ULL;
};

template<class ContainerAllocator>
struct DataType< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_utils/node_watchdog_status";
  }

  static const char* value(const ::monitor_utils::node_watchdog_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sequence\n"
"string my_node_name\n"
"string ros_master_uri\n"
"bool is_ros_master_connected\n"
"string[] watched_nodes\n"
"int32 watch_rate\n"
"int32 ping_rate\n"
;
  }

  static const char* value(const ::monitor_utils::node_watchdog_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sequence);
      stream.next(m.my_node_name);
      stream.next(m.ros_master_uri);
      stream.next(m.is_ros_master_connected);
      stream.next(m.watched_nodes);
      stream.next(m.watch_rate);
      stream.next(m.ping_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_watchdog_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitor_utils::node_watchdog_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitor_utils::node_watchdog_status_<ContainerAllocator>& v)
  {
    s << indent << "sequence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence);
    s << indent << "my_node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.my_node_name);
    s << indent << "ros_master_uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ros_master_uri);
    s << indent << "is_ros_master_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ros_master_connected);
    s << indent << "watched_nodes[]" << std::endl;
    for (size_t i = 0; i < v.watched_nodes.size(); ++i)
    {
      s << indent << "  watched_nodes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.watched_nodes[i]);
    }
    s << indent << "watch_rate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.watch_rate);
    s << indent << "ping_rate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ping_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITOR_UTILS_MESSAGE_NODE_WATCHDOG_STATUS_H
