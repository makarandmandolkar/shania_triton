// Generated by gencpp from file monitor_utils/node_watchdog_serviceRequest.msg
// DO NOT EDIT!


#ifndef MONITOR_UTILS_MESSAGE_NODE_WATCHDOG_SERVICEREQUEST_H
#define MONITOR_UTILS_MESSAGE_NODE_WATCHDOG_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace monitor_utils
{
template <class ContainerAllocator>
struct node_watchdog_serviceRequest_
{
  typedef node_watchdog_serviceRequest_<ContainerAllocator> Type;

  node_watchdog_serviceRequest_()
    : node_name()
    , command_type_enum(0)
    , watch_rate(0)
    , startup_duration(0)
    , watched_topics_timeout(0)
    , watched_topics()
    , reboot_on_hang(false)
    , reboot_on_death(false)
    , reboot_on_publish_timeout(false)
    , launch_script()  {
    }
  node_watchdog_serviceRequest_(const ContainerAllocator& _alloc)
    : node_name(_alloc)
    , command_type_enum(0)
    , watch_rate(0)
    , startup_duration(0)
    , watched_topics_timeout(0)
    , watched_topics(_alloc)
    , reboot_on_hang(false)
    , reboot_on_death(false)
    , reboot_on_publish_timeout(false)
    , launch_script(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;

   typedef int16_t _command_type_enum_type;
  _command_type_enum_type command_type_enum;

   typedef int32_t _watch_rate_type;
  _watch_rate_type watch_rate;

   typedef int32_t _startup_duration_type;
  _startup_duration_type startup_duration;

   typedef int32_t _watched_topics_timeout_type;
  _watched_topics_timeout_type watched_topics_timeout;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _watched_topics_type;
  _watched_topics_type watched_topics;

   typedef uint8_t _reboot_on_hang_type;
  _reboot_on_hang_type reboot_on_hang;

   typedef uint8_t _reboot_on_death_type;
  _reboot_on_death_type reboot_on_death;

   typedef uint8_t _reboot_on_publish_timeout_type;
  _reboot_on_publish_timeout_type reboot_on_publish_timeout;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _launch_script_type;
  _launch_script_type launch_script;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(COMMAND_ADD_WATCHED_NODE)
  #undef COMMAND_ADD_WATCHED_NODE
#endif
#if defined(_WIN32) && defined(COMMAND_REMOVE_WATCHED_NODE)
  #undef COMMAND_REMOVE_WATCHED_NODE
#endif
#if defined(_WIN32) && defined(COMMAND_KILL_WATCHED_NODE)
  #undef COMMAND_KILL_WATCHED_NODE
#endif
#if defined(_WIN32) && defined(COMMAND_LAUNCH_WATCHED_NODE)
  #undef COMMAND_LAUNCH_WATCHED_NODE
#endif

  enum {
    COMMAND_ADD_WATCHED_NODE = 1,
    COMMAND_REMOVE_WATCHED_NODE = 2,
    COMMAND_KILL_WATCHED_NODE = 3,
    COMMAND_LAUNCH_WATCHED_NODE = 4,
  };


  typedef boost::shared_ptr< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct node_watchdog_serviceRequest_

typedef ::monitor_utils::node_watchdog_serviceRequest_<std::allocator<void> > node_watchdog_serviceRequest;

typedef boost::shared_ptr< ::monitor_utils::node_watchdog_serviceRequest > node_watchdog_serviceRequestPtr;
typedef boost::shared_ptr< ::monitor_utils::node_watchdog_serviceRequest const> node_watchdog_serviceRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator1> & lhs, const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.node_name == rhs.node_name &&
    lhs.command_type_enum == rhs.command_type_enum &&
    lhs.watch_rate == rhs.watch_rate &&
    lhs.startup_duration == rhs.startup_duration &&
    lhs.watched_topics_timeout == rhs.watched_topics_timeout &&
    lhs.watched_topics == rhs.watched_topics &&
    lhs.reboot_on_hang == rhs.reboot_on_hang &&
    lhs.reboot_on_death == rhs.reboot_on_death &&
    lhs.reboot_on_publish_timeout == rhs.reboot_on_publish_timeout &&
    lhs.launch_script == rhs.launch_script;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator1> & lhs, const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace monitor_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7e3f8843ea4df5e36fcc1a89aa6ac8d";
  }

  static const char* value(const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7e3f8843ea4df5eULL;
  static const uint64_t static_value2 = 0x36fcc1a89aa6ac8dULL;
};

template<class ContainerAllocator>
struct DataType< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_utils/node_watchdog_serviceRequest";
  }

  static const char* value(const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"string node_name\n"
"int16 COMMAND_ADD_WATCHED_NODE=1\n"
"int16 COMMAND_REMOVE_WATCHED_NODE=2\n"
"int16 COMMAND_KILL_WATCHED_NODE=3\n"
"int16 COMMAND_LAUNCH_WATCHED_NODE=4\n"
"int16 command_type_enum\n"
"\n"
"# If you are adding a node, these values are used\n"
"int32 watch_rate\n"
"int32 startup_duration\n"
"int32 watched_topics_timeout\n"
"string[] watched_topics\n"
"bool reboot_on_hang\n"
"bool reboot_on_death\n"
"bool reboot_on_publish_timeout\n"
"string launch_script\n"
"\n"
;
  }

  static const char* value(const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_name);
      stream.next(m.command_type_enum);
      stream.next(m.watch_rate);
      stream.next(m.startup_duration);
      stream.next(m.watched_topics_timeout);
      stream.next(m.watched_topics);
      stream.next(m.reboot_on_hang);
      stream.next(m.reboot_on_death);
      stream.next(m.reboot_on_publish_timeout);
      stream.next(m.launch_script);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_watchdog_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitor_utils::node_watchdog_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
    s << indent << "command_type_enum: ";
    Printer<int16_t>::stream(s, indent + "  ", v.command_type_enum);
    s << indent << "watch_rate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.watch_rate);
    s << indent << "startup_duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.startup_duration);
    s << indent << "watched_topics_timeout: ";
    Printer<int32_t>::stream(s, indent + "  ", v.watched_topics_timeout);
    s << indent << "watched_topics[]" << std::endl;
    for (size_t i = 0; i < v.watched_topics.size(); ++i)
    {
      s << indent << "  watched_topics[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.watched_topics[i]);
    }
    s << indent << "reboot_on_hang: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reboot_on_hang);
    s << indent << "reboot_on_death: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reboot_on_death);
    s << indent << "reboot_on_publish_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reboot_on_publish_timeout);
    s << indent << "launch_script: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.launch_script);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITOR_UTILS_MESSAGE_NODE_WATCHDOG_SERVICEREQUEST_H
