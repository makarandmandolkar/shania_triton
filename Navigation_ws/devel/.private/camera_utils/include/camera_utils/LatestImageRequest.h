// Generated by gencpp from file camera_utils/LatestImageRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_UTILS_MESSAGE_LATESTIMAGEREQUEST_H
#define CAMERA_UTILS_MESSAGE_LATESTIMAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera_utils
{
template <class ContainerAllocator>
struct LatestImageRequest_
{
  typedef LatestImageRequest_<ContainerAllocator> Type;

  LatestImageRequest_()
    : realsense_source()
    , timeout_millis(0)  {
    }
  LatestImageRequest_(const ContainerAllocator& _alloc)
    : realsense_source(_alloc)
    , timeout_millis(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _realsense_source_type;
  _realsense_source_type realsense_source;

   typedef int32_t _timeout_millis_type;
  _timeout_millis_type timeout_millis;





  typedef boost::shared_ptr< ::camera_utils::LatestImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_utils::LatestImageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LatestImageRequest_

typedef ::camera_utils::LatestImageRequest_<std::allocator<void> > LatestImageRequest;

typedef boost::shared_ptr< ::camera_utils::LatestImageRequest > LatestImageRequestPtr;
typedef boost::shared_ptr< ::camera_utils::LatestImageRequest const> LatestImageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_utils::LatestImageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_utils::LatestImageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_utils::LatestImageRequest_<ContainerAllocator1> & lhs, const ::camera_utils::LatestImageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.realsense_source == rhs.realsense_source &&
    lhs.timeout_millis == rhs.timeout_millis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_utils::LatestImageRequest_<ContainerAllocator1> & lhs, const ::camera_utils::LatestImageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_utils::LatestImageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_utils::LatestImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_utils::LatestImageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee5971164a8203b5270f2074d44893e1";
  }

  static const char* value(const ::camera_utils::LatestImageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee5971164a8203b5ULL;
  static const uint64_t static_value2 = 0x270f2074d44893e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_utils/LatestImageRequest";
  }

  static const char* value(const ::camera_utils::LatestImageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string realsense_source\n"
"int32 timeout_millis\n"
;
  }

  static const char* value(const ::camera_utils::LatestImageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.realsense_source);
      stream.next(m.timeout_millis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LatestImageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_utils::LatestImageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_utils::LatestImageRequest_<ContainerAllocator>& v)
  {
    s << indent << "realsense_source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.realsense_source);
    s << indent << "timeout_millis: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout_millis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_UTILS_MESSAGE_LATESTIMAGEREQUEST_H
