// Auto-generated. Do not edit!

// (in-package holonomic_controller.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class approach_goalGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.goal_pose = null;
      this.vehicle_pose = null;
      this.min_turn_radius = null;
      this.approach_enum = null;
      this.goal_tolerance = null;
    }
    else {
      if (initObj.hasOwnProperty('goal_pose')) {
        this.goal_pose = initObj.goal_pose
      }
      else {
        this.goal_pose = new geometry_msgs.msg.Pose();
      }
      if (initObj.hasOwnProperty('vehicle_pose')) {
        this.vehicle_pose = initObj.vehicle_pose
      }
      else {
        this.vehicle_pose = new geometry_msgs.msg.Pose();
      }
      if (initObj.hasOwnProperty('min_turn_radius')) {
        this.min_turn_radius = initObj.min_turn_radius
      }
      else {
        this.min_turn_radius = 0.0;
      }
      if (initObj.hasOwnProperty('approach_enum')) {
        this.approach_enum = initObj.approach_enum
      }
      else {
        this.approach_enum = 0;
      }
      if (initObj.hasOwnProperty('goal_tolerance')) {
        this.goal_tolerance = initObj.goal_tolerance
      }
      else {
        this.goal_tolerance = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type approach_goalGoal
    // Serialize message field [goal_pose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.goal_pose, buffer, bufferOffset);
    // Serialize message field [vehicle_pose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.vehicle_pose, buffer, bufferOffset);
    // Serialize message field [min_turn_radius]
    bufferOffset = _serializer.float32(obj.min_turn_radius, buffer, bufferOffset);
    // Serialize message field [approach_enum]
    bufferOffset = _serializer.int32(obj.approach_enum, buffer, bufferOffset);
    // Serialize message field [goal_tolerance]
    bufferOffset = _serializer.float32(obj.goal_tolerance, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type approach_goalGoal
    let len;
    let data = new approach_goalGoal(null);
    // Deserialize message field [goal_pose]
    data.goal_pose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [vehicle_pose]
    data.vehicle_pose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [min_turn_radius]
    data.min_turn_radius = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [approach_enum]
    data.approach_enum = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [goal_tolerance]
    data.goal_tolerance = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 124;
  }

  static datatype() {
    // Returns string type for a message object
    return 'holonomic_controller/approach_goalGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '06b0f36a422cb4dd202e7db3401240d0';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    int32 UNDEFINED=0
    int32 DRIVE_X=1
    int32 DRIVE_Y=2
    int32 ROTATE_Z=3
    
    
    geometry_msgs/Pose goal_pose
    geometry_msgs/Pose vehicle_pose
    float32 min_turn_radius
    int32 approach_enum
    float32 goal_tolerance
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new approach_goalGoal(null);
    if (msg.goal_pose !== undefined) {
      resolved.goal_pose = geometry_msgs.msg.Pose.Resolve(msg.goal_pose)
    }
    else {
      resolved.goal_pose = new geometry_msgs.msg.Pose()
    }

    if (msg.vehicle_pose !== undefined) {
      resolved.vehicle_pose = geometry_msgs.msg.Pose.Resolve(msg.vehicle_pose)
    }
    else {
      resolved.vehicle_pose = new geometry_msgs.msg.Pose()
    }

    if (msg.min_turn_radius !== undefined) {
      resolved.min_turn_radius = msg.min_turn_radius;
    }
    else {
      resolved.min_turn_radius = 0.0
    }

    if (msg.approach_enum !== undefined) {
      resolved.approach_enum = msg.approach_enum;
    }
    else {
      resolved.approach_enum = 0
    }

    if (msg.goal_tolerance !== undefined) {
      resolved.goal_tolerance = msg.goal_tolerance;
    }
    else {
      resolved.goal_tolerance = 0.0
    }

    return resolved;
    }
};

// Constants for message
approach_goalGoal.Constants = {
  UNDEFINED: 0,
  DRIVE_X: 1,
  DRIVE_Y: 2,
  ROTATE_Z: 3,
}

module.exports = approach_goalGoal;
