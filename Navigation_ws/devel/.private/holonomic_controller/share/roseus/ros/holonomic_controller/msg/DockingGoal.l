;; Auto-generated. Do not edit!


(when (boundp 'holonomic_controller::DockingGoal)
  (if (not (find-package "HOLONOMIC_CONTROLLER"))
    (make-package "HOLONOMIC_CONTROLLER"))
  (shadow 'DockingGoal (find-package "HOLONOMIC_CONTROLLER")))
(unless (find-package "HOLONOMIC_CONTROLLER::DOCKINGGOAL")
  (make-package "HOLONOMIC_CONTROLLER::DOCKINGGOAL"))

(in-package "ROS")
;;//! \htmlinclude DockingGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass holonomic_controller::DockingGoal
  :super ros::object
  :slots (_goal_parent_frame _goal_position _goal_euler_orientation _goal_tolerance _lin_vel_max ))

(defmethod holonomic_controller::DockingGoal
  (:init
   (&key
    ((:goal_parent_frame __goal_parent_frame) "")
    ((:goal_position __goal_position) (instance geometry_msgs::Point :init))
    ((:goal_euler_orientation __goal_euler_orientation) (instance geometry_msgs::Vector3 :init))
    ((:goal_tolerance __goal_tolerance) 0.0)
    ((:lin_vel_max __lin_vel_max) 0.0)
    )
   (send-super :init)
   (setq _goal_parent_frame (string __goal_parent_frame))
   (setq _goal_position __goal_position)
   (setq _goal_euler_orientation __goal_euler_orientation)
   (setq _goal_tolerance (float __goal_tolerance))
   (setq _lin_vel_max (float __lin_vel_max))
   self)
  (:goal_parent_frame
   (&optional __goal_parent_frame)
   (if __goal_parent_frame (setq _goal_parent_frame __goal_parent_frame)) _goal_parent_frame)
  (:goal_position
   (&rest __goal_position)
   (if (keywordp (car __goal_position))
       (send* _goal_position __goal_position)
     (progn
       (if __goal_position (setq _goal_position (car __goal_position)))
       _goal_position)))
  (:goal_euler_orientation
   (&rest __goal_euler_orientation)
   (if (keywordp (car __goal_euler_orientation))
       (send* _goal_euler_orientation __goal_euler_orientation)
     (progn
       (if __goal_euler_orientation (setq _goal_euler_orientation (car __goal_euler_orientation)))
       _goal_euler_orientation)))
  (:goal_tolerance
   (&optional __goal_tolerance)
   (if __goal_tolerance (setq _goal_tolerance __goal_tolerance)) _goal_tolerance)
  (:lin_vel_max
   (&optional __lin_vel_max)
   (if __lin_vel_max (setq _lin_vel_max __lin_vel_max)) _lin_vel_max)
  (:serialization-length
   ()
   (+
    ;; string _goal_parent_frame
    4 (length _goal_parent_frame)
    ;; geometry_msgs/Point _goal_position
    (send _goal_position :serialization-length)
    ;; geometry_msgs/Vector3 _goal_euler_orientation
    (send _goal_euler_orientation :serialization-length)
    ;; float64 _goal_tolerance
    8
    ;; float64 _lin_vel_max
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _goal_parent_frame
       (write-long (length _goal_parent_frame) s) (princ _goal_parent_frame s)
     ;; geometry_msgs/Point _goal_position
       (send _goal_position :serialize s)
     ;; geometry_msgs/Vector3 _goal_euler_orientation
       (send _goal_euler_orientation :serialize s)
     ;; float64 _goal_tolerance
       (sys::poke _goal_tolerance (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _lin_vel_max
       (sys::poke _lin_vel_max (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _goal_parent_frame
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _goal_parent_frame (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; geometry_msgs/Point _goal_position
     (send _goal_position :deserialize buf ptr-) (incf ptr- (send _goal_position :serialization-length))
   ;; geometry_msgs/Vector3 _goal_euler_orientation
     (send _goal_euler_orientation :deserialize buf ptr-) (incf ptr- (send _goal_euler_orientation :serialization-length))
   ;; float64 _goal_tolerance
     (setq _goal_tolerance (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _lin_vel_max
     (setq _lin_vel_max (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get holonomic_controller::DockingGoal :md5sum-) "4a01939c8197b95cd380fc2893fea6c5")
(setf (get holonomic_controller::DockingGoal :datatype-) "holonomic_controller/DockingGoal")
(setf (get holonomic_controller::DockingGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
string goal_parent_frame
geometry_msgs/Point goal_position
geometry_msgs/Vector3 goal_euler_orientation
float64 goal_tolerance
float64 lin_vel_max

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :holonomic_controller/DockingGoal "4a01939c8197b95cd380fc2893fea6c5")


