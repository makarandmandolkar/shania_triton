// Generated by gencpp from file holonomic_controller/DockingGoal.msg
// DO NOT EDIT!


#ifndef HOLONOMIC_CONTROLLER_MESSAGE_DOCKINGGOAL_H
#define HOLONOMIC_CONTROLLER_MESSAGE_DOCKINGGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace holonomic_controller
{
template <class ContainerAllocator>
struct DockingGoal_
{
  typedef DockingGoal_<ContainerAllocator> Type;

  DockingGoal_()
    : goal_parent_frame()
    , goal_position()
    , goal_euler_orientation()
    , goal_tolerance(0.0)
    , lin_vel_max(0.0)  {
    }
  DockingGoal_(const ContainerAllocator& _alloc)
    : goal_parent_frame(_alloc)
    , goal_position(_alloc)
    , goal_euler_orientation(_alloc)
    , goal_tolerance(0.0)
    , lin_vel_max(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_parent_frame_type;
  _goal_parent_frame_type goal_parent_frame;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _goal_position_type;
  _goal_position_type goal_position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _goal_euler_orientation_type;
  _goal_euler_orientation_type goal_euler_orientation;

   typedef double _goal_tolerance_type;
  _goal_tolerance_type goal_tolerance;

   typedef double _lin_vel_max_type;
  _lin_vel_max_type lin_vel_max;





  typedef boost::shared_ptr< ::holonomic_controller::DockingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::holonomic_controller::DockingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DockingGoal_

typedef ::holonomic_controller::DockingGoal_<std::allocator<void> > DockingGoal;

typedef boost::shared_ptr< ::holonomic_controller::DockingGoal > DockingGoalPtr;
typedef boost::shared_ptr< ::holonomic_controller::DockingGoal const> DockingGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::holonomic_controller::DockingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::holonomic_controller::DockingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::holonomic_controller::DockingGoal_<ContainerAllocator1> & lhs, const ::holonomic_controller::DockingGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal_parent_frame == rhs.goal_parent_frame &&
    lhs.goal_position == rhs.goal_position &&
    lhs.goal_euler_orientation == rhs.goal_euler_orientation &&
    lhs.goal_tolerance == rhs.goal_tolerance &&
    lhs.lin_vel_max == rhs.lin_vel_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::holonomic_controller::DockingGoal_<ContainerAllocator1> & lhs, const ::holonomic_controller::DockingGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace holonomic_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::holonomic_controller::DockingGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::holonomic_controller::DockingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::holonomic_controller::DockingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a01939c8197b95cd380fc2893fea6c5";
  }

  static const char* value(const ::holonomic_controller::DockingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a01939c8197b95cULL;
  static const uint64_t static_value2 = 0xd380fc2893fea6c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "holonomic_controller/DockingGoal";
  }

  static const char* value(const ::holonomic_controller::DockingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"string goal_parent_frame\n"
"geometry_msgs/Point goal_position\n"
"geometry_msgs/Vector3 goal_euler_orientation\n"
"float64 goal_tolerance\n"
"float64 lin_vel_max\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::holonomic_controller::DockingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_parent_frame);
      stream.next(m.goal_position);
      stream.next(m.goal_euler_orientation);
      stream.next(m.goal_tolerance);
      stream.next(m.lin_vel_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::holonomic_controller::DockingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::holonomic_controller::DockingGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_parent_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_parent_frame);
    s << indent << "goal_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_position);
    s << indent << "goal_euler_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_euler_orientation);
    s << indent << "goal_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.goal_tolerance);
    s << indent << "lin_vel_max: ";
    Printer<double>::stream(s, indent + "  ", v.lin_vel_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOLONOMIC_CONTROLLER_MESSAGE_DOCKINGGOAL_H
