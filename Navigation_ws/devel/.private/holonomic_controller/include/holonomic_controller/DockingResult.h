// Generated by gencpp from file holonomic_controller/DockingResult.msg
// DO NOT EDIT!


#ifndef HOLONOMIC_CONTROLLER_MESSAGE_DOCKINGRESULT_H
#define HOLONOMIC_CONTROLLER_MESSAGE_DOCKINGRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace holonomic_controller
{
template <class ContainerAllocator>
struct DockingResult_
{
  typedef DockingResult_<ContainerAllocator> Type;

  DockingResult_()
    : success(false)
    , error_enum(0)  {
    }
  DockingResult_(const ContainerAllocator& _alloc)
    : success(false)
    , error_enum(0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef int32_t _error_enum_type;
  _error_enum_type error_enum;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_GENERIC_ERROR)
  #undef ERROR_GENERIC_ERROR
#endif
#if defined(_WIN32) && defined(ERROR_TIMEOUT)
  #undef ERROR_TIMEOUT
#endif
#if defined(_WIN32) && defined(ERROR_PREEMPT)
  #undef ERROR_PREEMPT
#endif
#if defined(_WIN32) && defined(ERROR_DEADMAN_IS_OFF)
  #undef ERROR_DEADMAN_IS_OFF
#endif
#if defined(_WIN32) && defined(ERROR_CONTROLLER_OVERSHOOT)
  #undef ERROR_CONTROLLER_OVERSHOOT
#endif

  enum {
    ERROR_GENERIC_ERROR = 0,
    ERROR_TIMEOUT = 1,
    ERROR_PREEMPT = 2,
    ERROR_DEADMAN_IS_OFF = 3,
    ERROR_CONTROLLER_OVERSHOOT = 4,
  };


  typedef boost::shared_ptr< ::holonomic_controller::DockingResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::holonomic_controller::DockingResult_<ContainerAllocator> const> ConstPtr;

}; // struct DockingResult_

typedef ::holonomic_controller::DockingResult_<std::allocator<void> > DockingResult;

typedef boost::shared_ptr< ::holonomic_controller::DockingResult > DockingResultPtr;
typedef boost::shared_ptr< ::holonomic_controller::DockingResult const> DockingResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::holonomic_controller::DockingResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::holonomic_controller::DockingResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::holonomic_controller::DockingResult_<ContainerAllocator1> & lhs, const ::holonomic_controller::DockingResult_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error_enum == rhs.error_enum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::holonomic_controller::DockingResult_<ContainerAllocator1> & lhs, const ::holonomic_controller::DockingResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace holonomic_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::holonomic_controller::DockingResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::holonomic_controller::DockingResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::holonomic_controller::DockingResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::holonomic_controller::DockingResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::holonomic_controller::DockingResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::holonomic_controller::DockingResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::holonomic_controller::DockingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "578dbba02541007ea7b63f44e3b666d7";
  }

  static const char* value(const ::holonomic_controller::DockingResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x578dbba02541007eULL;
  static const uint64_t static_value2 = 0xa7b63f44e3b666d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::holonomic_controller::DockingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "holonomic_controller/DockingResult";
  }

  static const char* value(const ::holonomic_controller::DockingResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::holonomic_controller::DockingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"bool success \n"
"\n"
"int32 ERROR_GENERIC_ERROR=0\n"
"int32 ERROR_TIMEOUT=1\n"
"int32 ERROR_PREEMPT=2\n"
"int32 ERROR_DEADMAN_IS_OFF=3\n"
"int32 ERROR_CONTROLLER_OVERSHOOT=4\n"
"\n"
"int32 error_enum\n"
;
  }

  static const char* value(const ::holonomic_controller::DockingResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::holonomic_controller::DockingResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_enum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockingResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::holonomic_controller::DockingResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::holonomic_controller::DockingResult_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_enum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOLONOMIC_CONTROLLER_MESSAGE_DOCKINGRESULT_H
