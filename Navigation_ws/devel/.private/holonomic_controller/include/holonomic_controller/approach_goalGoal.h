// Generated by gencpp from file holonomic_controller/approach_goalGoal.msg
// DO NOT EDIT!


#ifndef HOLONOMIC_CONTROLLER_MESSAGE_APPROACH_GOALGOAL_H
#define HOLONOMIC_CONTROLLER_MESSAGE_APPROACH_GOALGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace holonomic_controller
{
template <class ContainerAllocator>
struct approach_goalGoal_
{
  typedef approach_goalGoal_<ContainerAllocator> Type;

  approach_goalGoal_()
    : goal_pose()
    , vehicle_pose()
    , min_turn_radius(0.0)
    , approach_enum(0)
    , goal_tolerance(0.0)  {
    }
  approach_goalGoal_(const ContainerAllocator& _alloc)
    : goal_pose(_alloc)
    , vehicle_pose(_alloc)
    , min_turn_radius(0.0)
    , approach_enum(0)
    , goal_tolerance(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _vehicle_pose_type;
  _vehicle_pose_type vehicle_pose;

   typedef float _min_turn_radius_type;
  _min_turn_radius_type min_turn_radius;

   typedef int32_t _approach_enum_type;
  _approach_enum_type approach_enum;

   typedef float _goal_tolerance_type;
  _goal_tolerance_type goal_tolerance;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNDEFINED)
  #undef UNDEFINED
#endif
#if defined(_WIN32) && defined(DRIVE_X)
  #undef DRIVE_X
#endif
#if defined(_WIN32) && defined(DRIVE_Y)
  #undef DRIVE_Y
#endif
#if defined(_WIN32) && defined(ROTATE_Z)
  #undef ROTATE_Z
#endif

  enum {
    UNDEFINED = 0,
    DRIVE_X = 1,
    DRIVE_Y = 2,
    ROTATE_Z = 3,
  };


  typedef boost::shared_ptr< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> const> ConstPtr;

}; // struct approach_goalGoal_

typedef ::holonomic_controller::approach_goalGoal_<std::allocator<void> > approach_goalGoal;

typedef boost::shared_ptr< ::holonomic_controller::approach_goalGoal > approach_goalGoalPtr;
typedef boost::shared_ptr< ::holonomic_controller::approach_goalGoal const> approach_goalGoalConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::holonomic_controller::approach_goalGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::holonomic_controller::approach_goalGoal_<ContainerAllocator1> & lhs, const ::holonomic_controller::approach_goalGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal_pose == rhs.goal_pose &&
    lhs.vehicle_pose == rhs.vehicle_pose &&
    lhs.min_turn_radius == rhs.min_turn_radius &&
    lhs.approach_enum == rhs.approach_enum &&
    lhs.goal_tolerance == rhs.goal_tolerance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::holonomic_controller::approach_goalGoal_<ContainerAllocator1> & lhs, const ::holonomic_controller::approach_goalGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace holonomic_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06b0f36a422cb4dd202e7db3401240d0";
  }

  static const char* value(const ::holonomic_controller::approach_goalGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06b0f36a422cb4ddULL;
  static const uint64_t static_value2 = 0x202e7db3401240d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "holonomic_controller/approach_goalGoal";
  }

  static const char* value(const ::holonomic_controller::approach_goalGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"int32 UNDEFINED=0\n"
"int32 DRIVE_X=1\n"
"int32 DRIVE_Y=2\n"
"int32 ROTATE_Z=3\n"
"\n"
"\n"
"geometry_msgs/Pose goal_pose\n"
"geometry_msgs/Pose vehicle_pose\n"
"float32 min_turn_radius\n"
"int32 approach_enum\n"
"float32 goal_tolerance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::holonomic_controller::approach_goalGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pose);
      stream.next(m.vehicle_pose);
      stream.next(m.min_turn_radius);
      stream.next(m.approach_enum);
      stream.next(m.goal_tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct approach_goalGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::holonomic_controller::approach_goalGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::holonomic_controller::approach_goalGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pose);
    s << indent << "vehicle_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_pose);
    s << indent << "min_turn_radius: ";
    Printer<float>::stream(s, indent + "  ", v.min_turn_radius);
    s << indent << "approach_enum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.approach_enum);
    s << indent << "goal_tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.goal_tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOLONOMIC_CONTROLLER_MESSAGE_APPROACH_GOALGOAL_H
