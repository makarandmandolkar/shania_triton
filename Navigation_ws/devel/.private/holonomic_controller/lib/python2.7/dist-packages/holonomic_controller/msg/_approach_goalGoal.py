# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from holonomic_controller/approach_goalGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class approach_goalGoal(genpy.Message):
  _md5sum = "06b0f36a422cb4dd202e7db3401240d0"
  _type = "holonomic_controller/approach_goalGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
int32 UNDEFINED=0
int32 DRIVE_X=1
int32 DRIVE_Y=2
int32 ROTATE_Z=3


geometry_msgs/Pose goal_pose
geometry_msgs/Pose vehicle_pose
float32 min_turn_radius
int32 approach_enum
float32 goal_tolerance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  UNDEFINED = 0
  DRIVE_X = 1
  DRIVE_Y = 2
  ROTATE_Z = 3

  __slots__ = ['goal_pose','vehicle_pose','min_turn_radius','approach_enum','goal_tolerance']
  _slot_types = ['geometry_msgs/Pose','geometry_msgs/Pose','float32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal_pose,vehicle_pose,min_turn_radius,approach_enum,goal_tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(approach_goalGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.Pose()
      if self.vehicle_pose is None:
        self.vehicle_pose = geometry_msgs.msg.Pose()
      if self.min_turn_radius is None:
        self.min_turn_radius = 0.
      if self.approach_enum is None:
        self.approach_enum = 0
      if self.goal_tolerance is None:
        self.goal_tolerance = 0.
    else:
      self.goal_pose = geometry_msgs.msg.Pose()
      self.vehicle_pose = geometry_msgs.msg.Pose()
      self.min_turn_radius = 0.
      self.approach_enum = 0
      self.goal_tolerance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14dfif().pack(_x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w, _x.vehicle_pose.position.x, _x.vehicle_pose.position.y, _x.vehicle_pose.position.z, _x.vehicle_pose.orientation.x, _x.vehicle_pose.orientation.y, _x.vehicle_pose.orientation.z, _x.vehicle_pose.orientation.w, _x.min_turn_radius, _x.approach_enum, _x.goal_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.Pose()
      if self.vehicle_pose is None:
        self.vehicle_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w, _x.vehicle_pose.position.x, _x.vehicle_pose.position.y, _x.vehicle_pose.position.z, _x.vehicle_pose.orientation.x, _x.vehicle_pose.orientation.y, _x.vehicle_pose.orientation.z, _x.vehicle_pose.orientation.w, _x.min_turn_radius, _x.approach_enum, _x.goal_tolerance,) = _get_struct_14dfif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14dfif().pack(_x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w, _x.vehicle_pose.position.x, _x.vehicle_pose.position.y, _x.vehicle_pose.position.z, _x.vehicle_pose.orientation.x, _x.vehicle_pose.orientation.y, _x.vehicle_pose.orientation.z, _x.vehicle_pose.orientation.w, _x.min_turn_radius, _x.approach_enum, _x.goal_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.Pose()
      if self.vehicle_pose is None:
        self.vehicle_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w, _x.vehicle_pose.position.x, _x.vehicle_pose.position.y, _x.vehicle_pose.position.z, _x.vehicle_pose.orientation.x, _x.vehicle_pose.orientation.y, _x.vehicle_pose.orientation.z, _x.vehicle_pose.orientation.w, _x.min_turn_radius, _x.approach_enum, _x.goal_tolerance,) = _get_struct_14dfif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14dfif = None
def _get_struct_14dfif():
    global _struct_14dfif
    if _struct_14dfif is None:
        _struct_14dfif = struct.Struct("<14dfif")
    return _struct_14dfif
