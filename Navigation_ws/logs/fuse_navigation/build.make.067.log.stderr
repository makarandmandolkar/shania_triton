[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:64:15:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kstd::ostream& fuse_navigation::operator<<(std::ostream&, const fuse_navigation::MapLocation&)[m[Kâ€™ has not been declared within fuse_navigation
 std::ostream &[01;35m[Kfuse_navigation[m[K::operator<<(std::ostream &os, const fuse_navigation::MapLocation &location) {
               [01;35m[K^~~~~~~~~~~~~~~[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:14:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/node_map.h:67:24:[m[K [01;36m[Knote: [m[Konly here as a friend
   friend std::ostream &[01;36m[Koperator[m[K<<(std::ostream &os, const MapLocation &location);
                        [01;36m[K^~~~~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:64:15:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kstd::ostream& fuse_navigation::operator<<(std::ostream&, const fuse_navigation::MapLocation&)[m[Kâ€™ has not been declared within fuse_navigation
 std::ostream &[01;35m[Kfuse_navigation[m[K::operator<<(std::ostream &os, const fuse_navigation::MapLocation &location) {
               [01;35m[K^~~~~~~~~~~~~~~[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:14:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/node_map.h:67:24:[m[K [01;36m[Knote: [m[Konly here as a friend
   friend std::ostream &[01;36m[Koperator[m[K<<(std::ostream &os, const MapLocation &location);
                        [01;36m[K^~~~~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:[m[K In member function â€˜[01m[Kbool fuse_navigation::NodeMap::loadJSON(const string&)[m[Kâ€™:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:179:70:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Knlohmann::basic_json<>::value()[m[Kâ€™
       const std::string& loc_x = getJsonElement(location_value.value([01;31m[K)[m[K.items(),"x");
                                                                      [01;31m[K^[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:15:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20362:15:[m[K [01;36m[Knote: [m[Kcandidate: template<class ValueType, typename std::enable_if<(nlohmann::detail::is_getable<nlohmann::basic_json<>, ValueType>::value && (! std::is_same<nlohmann::detail::value_t, ValueType>::value)), int>::type <anonymous> > ValueType nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::object_t::key_type&, const ValueType&) const [with ValueType = ValueType; typename std::enable_if<(nlohmann::detail::is_getable<nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, ValueType>::value && (! std::is_same<nlohmann::detail::value_t, ValueType>::value)), int>::type <anonymous> = <enumerator>; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>]
     ValueType [01;36m[Kvalue[m[K(const typename object_t::key_type& key, const ValueType& default_value) const
               [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20362:15:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:179:70:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
       const std::string& loc_x = getJsonElement(location_value.value([01;36m[K)[m[K.items(),"x");
                                                                      [01;36m[K^[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:15:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20384:14:[m[K [01;36m[Knote: [m[Kcandidate: nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::object_t::key_type&, const char*) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t = std::__cxx11::basic_string<char>; typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::object_t::key_type = std::__cxx11::basic_string<char>]
     string_t [01;36m[Kvalue[m[K(const typename object_t::key_type& key, const char* default_value) const
              [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20384:14:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20434:15:[m[K [01;36m[Knote: [m[Kcandidate: template<class ValueType, typename std::enable_if<nlohmann::detail::is_getable<nlohmann::basic_json<>, ValueType>::value, int>::type <anonymous> > ValueType nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const json_pointer&, const ValueType&) const [with ValueType = ValueType; typename std::enable_if<nlohmann::detail::is_getable<nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, ValueType>::value, int>::type <anonymous> = <enumerator>; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>]
     ValueType [01;36m[Kvalue[m[K(const json_pointer& ptr, const ValueType& default_value) const
               [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20434:15:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:179:70:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
       const std::string& loc_x = getJsonElement(location_value.value([01;36m[K)[m[K.items(),"x");
                                                                      [01;36m[K^[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:15:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20458:14:[m[K [01;36m[Knote: [m[Kcandidate: nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const json_pointer&, const char*) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t = std::__cxx11::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::json_pointer = nlohmann::json_pointer<nlohmann::basic_json<> >]
     string_t [01;36m[Kvalue[m[K(const json_pointer& ptr, const char* default_value) const
              [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20458:14:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:[m[K In member function â€˜[01m[Kbool fuse_navigation::NodeMap::loadJSON(const string&)[m[Kâ€™:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:179:70:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Knlohmann::basic_json<>::value()[m[Kâ€™
       const std::string& loc_x = getJsonElement(location_value.value([01;31m[K)[m[K.items(),"x");
                                                                      [01;31m[K^[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:15:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20362:15:[m[K [01;36m[Knote: [m[Kcandidate: template<class ValueType, typename std::enable_if<(nlohmann::detail::is_getable<nlohmann::basic_json<>, ValueType>::value && (! std::is_same<nlohmann::detail::value_t, ValueType>::value)), int>::type <anonymous> > ValueType nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::object_t::key_type&, const ValueType&) const [with ValueType = ValueType; typename std::enable_if<(nlohmann::detail::is_getable<nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, ValueType>::value && (! std::is_same<nlohmann::detail::value_t, ValueType>::value)), int>::type <anonymous> = <enumerator>; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>]
     ValueType [01;36m[Kvalue[m[K(const typename object_t::key_type& key, const ValueType& default_value) const
               [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20362:15:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:179:70:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
       const std::string& loc_x = getJsonElement(location_value.value([01;36m[K)[m[K.items(),"x");
                                                                      [01;36m[K^[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:15:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20384:14:[m[K [01;36m[Knote: [m[Kcandidate: nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::object_t::key_type&, const char*) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t = std::__cxx11::basic_string<char>; typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::object_t::key_type = std::__cxx11::basic_string<char>]
     string_t [01;36m[Kvalue[m[K(const typename object_t::key_type& key, const char* default_value) const
              [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20384:14:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20434:15:[m[K [01;36m[Knote: [m[Kcandidate: template<class ValueType, typename std::enable_if<nlohmann::detail::is_getable<nlohmann::basic_json<>, ValueType>::value, int>::type <anonymous> > ValueType nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const json_pointer&, const ValueType&) const [with ValueType = ValueType; typename std::enable_if<nlohmann::detail::is_getable<nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, ValueType>::value, int>::type <anonymous> = <enumerator>; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>]
     ValueType [01;36m[Kvalue[m[K(const json_pointer& ptr, const ValueType& default_value) const
               [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20434:15:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:179:70:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
       const std::string& loc_x = getJsonElement(location_value.value([01;36m[K)[m[K.items(),"x");
                                                                      [01;36m[K^[m[K
In file included from [01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/src/node_map.cpp:15:0[m[K:
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20458:14:[m[K [01;36m[Knote: [m[Kcandidate: nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::value(const json_pointer&, const char*) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; BinaryType = std::vector<unsigned char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::string_t = std::__cxx11::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::json_pointer = nlohmann::json_pointer<nlohmann::basic_json<> >]
     string_t [01;36m[Kvalue[m[K(const json_pointer& ptr, const char* default_value) const
              [01;36m[K^~~~~[m[K
[01m[K/home/makarand/Documents/Navigation_ws/src/fuse_navigation/fuse_navigation/include/fuse_navigation/json.hpp:20458:14:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 0 provided
make[2]: *** [CMakeFiles/node_map_node.dir/src/node_map.cpp.o] Error 1
make[1]: *** [CMakeFiles/node_map_node.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
make[2]: *** [CMakeFiles/behavior_manager.dir/src/node_map.cpp.o] Error 1
make[1]: *** [CMakeFiles/behavior_manager.dir/all] Error 2
make: *** [all] Error 2
