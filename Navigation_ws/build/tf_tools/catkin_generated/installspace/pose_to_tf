#!/usr/bin/env python2
import rospy
import tf2_ros
from geometry_msgs.msg import TransformStamped, PoseStamped, Pose, PoseWithCovariance, PoseWithCovarianceStamped
from nav_msgs.msg import Odometry

import param_utils.get_param as rpu


class PoseToTF(object):
    def __init__(self):
        self.topic = rospy.resolve_name(rpu.get_param("~pose_topic", "pose"))

        # currently these are required parameters
        self.parent = rpu.get_param("~parent_frame")
        self.child = rpu.get_param("~child_frame")

        # use rospy API to pass None value through
        self.type_hint = rospy.get_param("~type_hint", None)

        allowed_types = {
            'geometry_msgs/Pose': (Pose, self._parse_pose),
            'geometry_msgs/PoseStamped': (PoseStamped, self._parse_pose_stamped),
            'geometry_msgs/PoseWithCovariance': (PoseWithCovariance, self._parse_pose_with_covariance),
            'geometry_msgs/PoseWithCovarianceStamped': (PoseWithCovarianceStamped, self._parse_pose_with_covariance_stamped),
            'nav_msgs/Odometry': (Odometry, self._parse_odometry),
        }

        if self.type_hint is None:
            self.msg_types = [msgtype for (topic, msgtype) in rospy.get_published_topics() if topic == self.topic]

            if len(self.msg_types) == 0:
                rospy.logfatal("(%s) Type introspection failed. Topic not found. Consider setting param '~type_hint'"
                    % rospy.get_name())
            else:
                self.msg_type = self.msg_types[0]
        elif self.type_hint in allowed_types.keys():
            self.msg_type = self.type_hint
        else:
            rospy.logfatal("(%s) Type not supported." % rospy.get_name())

        self.last_received = None
        rospy.Subscriber(self.topic, allowed_types[self.msg_type][0], allowed_types[self.msg_type][1])

        self.br = tf2_ros.TransformBroadcaster()

    def _parse_pose(self, msg):
        """Broadcast TF from pose msg"""
        t = TransformStamped()
        t.header.frame_id = self.parent
        t.child_frame_id = self.child

        # Utilize stamps from stamped msg types when available
        if self.last_received is not None:
            t.header.stamp = self.last_received

        t.transform.translation.x = msg.position.x
        t.transform.translation.y = msg.position.y
        t.transform.translation.z = msg.position.z

        t.transform.rotation.x = msg.orientation.x
        t.transform.rotation.y = msg.orientation.y
        t.transform.rotation.z = msg.orientation.z
        t.transform.rotation.w = msg.orientation.w

        self.br.sendTransform(t)
        self.last_received = None

    def _parse_pose_stamped(self, msg):
        self.last_received = msg.header.stamp
        self._test_frame_id(msg.header.frame_id)
        self._parse_pose(msg.pose)

    def _parse_pose_with_covariance(self, msg):
        self._parse_pose(msg.pose)

    def _parse_pose_with_covariance_stamped(self, msg):
        self.last_received = msg.header.stamp
        self._test_frame_id(msg.header.frame_id)
        self._parse_pose(msg.pose.pose)

    def _parse_odometry(self, msg):
        self._parse_pose(msg.pose.pose)

    def _test_frame_id(self, frame_id):
        if frame_id != self.parent:
            rospy.logwarn_throttle(5, "(%s) Frame ID in msg header does not match the provided parent frame."
                % rospy.get_name())


if __name__ == "__main__":
    rospy.init_node("pose_to_tf")
    pttf = PoseToTF()
    rospy.spin()
